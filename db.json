{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"source/thumbnails/hatobus.jpg","path":"thumbnails/hatobus.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"source/img/og_image.JPG","path":"img/og_image.JPG","modified":1,"renderable":0},{"_id":"source/img/og_image.jpg","path":"img/og_image.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1588998488530},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1588998488511},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1588998488511},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1588998488530},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1588998488530},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1588998488530},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1588998488510},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1588998488528},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1588998488528},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1588998488528},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1588998488529},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1588998488529},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1588998488528},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1588998488529},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1588998488530},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1588998488528},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1588998488529},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1588998488529},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1588998488529},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588998488513},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1588998488512},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1588998488512},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1588998488513},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588998488517},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588998488512},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1588998488513},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1588998488530},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1588998488517},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1588998488517},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1588998488517},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1588998488517},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1588998488527},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1588998488523},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1588998488526},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1588998488528},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588998488519},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588998488519},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1588998488519},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1588998488519},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1588998488514},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1588998488514},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1588998488526},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1588998488525},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1588998488523},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1588998488523},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1588998488527},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1588998488527},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1588998488527},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588998488521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588998488522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1588998488522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1588998488522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588998488521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1588998488522},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1588998488527},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1588998488526},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1588998488523},{"_id":"public/2020/05/09/hello-world/index.html","hash":"5701a841840de2cced86e314e3e84cce06a2efb3","modified":1588998592405},{"_id":"public/archives/index.html","hash":"aa10a4377575b233ff06ebe57cdbd236143c668f","modified":1588998592405},{"_id":"public/archives/2020/index.html","hash":"34a514bf140c0dbc2bef9bc00d94e1a9a02d2308","modified":1588998592405},{"_id":"public/archives/2020/05/index.html","hash":"17ed1035582707a5b6d3f6ebf2cb34b8c5607cee","modified":1588998592405},{"_id":"public/index.html","hash":"0ff14843b4f471c0e7e0838c2f835bd25817a3fd","modified":1588998592405},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588998592405},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588998592405},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588998592405},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588998592405},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588998592405},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588998592405},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1588998592405},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1588998592405},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1588998592405},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1588998592405},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1588998592405},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1588998592405},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1588998592405},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1588998592405},{"_id":"themes/light/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1589002475676},{"_id":"themes/light/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1589002475676},{"_id":"themes/light/README.md","hash":"42cce00e360ae6c8bd1019776ff3b0b974128fa1","modified":1589002475676},{"_id":"themes/light/_config.yml","hash":"54873f9af5e1d1c802fcd7c642c4187f1f04e6b9","modified":1589002475676},{"_id":"themes/light/languages/de.yml","hash":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1589002475676},{"_id":"themes/light/languages/default.yml","hash":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1589002475676},{"_id":"themes/light/languages/es.yml","hash":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1589002475676},{"_id":"themes/light/languages/ja.yml","hash":"1511143393fb86819a9d8685ee81c3bbf1e10b23","modified":1589002475676},{"_id":"themes/light/languages/lt.yml","hash":"8826ef5b3911e094f8a118d8db981532d0919bb6","modified":1589002475676},{"_id":"themes/light/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1589002475677},{"_id":"themes/light/languages/pl.yml","hash":"3f36d08e84a85651bf777cec0752193057c08430","modified":1589002475677},{"_id":"themes/light/languages/ru.yml","hash":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1589002475677},{"_id":"themes/light/languages/zh-CN.yml","hash":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1589002475677},{"_id":"themes/light/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1589002475677},{"_id":"themes/light/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1589002475679},{"_id":"themes/light/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1589002475680},{"_id":"themes/light/layout/index.ejs","hash":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1589002475680},{"_id":"themes/light/layout/layout.ejs","hash":"1b4ee853dcd80892ba971954641c0e283ddb2e6e","modified":1589002475680},{"_id":"themes/light/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589002475680},{"_id":"themes/light/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589002475680},{"_id":"themes/light/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1589002475680},{"_id":"themes/light/layout/_partial/after_footer.ejs","hash":"ac0876ae4ec09e2f16969fea196adc66a29ea3b3","modified":1589002475677},{"_id":"themes/light/layout/_partial/archive.ejs","hash":"7e4f7c2909b1b90241424ea2ff8e7b4761d8360f","modified":1589002475677},{"_id":"themes/light/layout/_partial/article.ejs","hash":"b4479954cdaa33420e06ffce6ea8e05f48da2928","modified":1589002475677},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","hash":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1589002475678},{"_id":"themes/light/layout/_partial/comment.ejs","hash":"be7d9849855f2bb31e626db88b49ac1d87446e21","modified":1589002475678},{"_id":"themes/light/layout/_partial/footer.ejs","hash":"1deac5914b2fc93b271732fd4d5cbd0a6f78875f","modified":1589002475678},{"_id":"themes/light/layout/_partial/google_analytics.ejs","hash":"7cf0d1f93051bda510d49dab7f684b9d7c6ba58f","modified":1589002475678},{"_id":"themes/light/layout/_partial/head.ejs","hash":"bdb65794b84b8242f0e4711059a2737f317587e9","modified":1589002475678},{"_id":"themes/light/layout/_partial/pagination.ejs","hash":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1589002475678},{"_id":"themes/light/layout/_partial/header.ejs","hash":"224ea7f0fccc29418583a5c59497a8ece0073301","modified":1589002475678},{"_id":"themes/light/layout/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1589002475679},{"_id":"themes/light/layout/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1589002475679},{"_id":"themes/light/layout/_widget/search.ejs","hash":"f3600ade452f70bd49cb8cf53f3b6e59015f2ce3","modified":1589002475679},{"_id":"themes/light/layout/_widget/recent_posts.ejs","hash":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1589002475679},{"_id":"themes/light/layout/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1589002475679},{"_id":"themes/light/layout/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1589002475679},{"_id":"themes/light/source/css/style.styl","hash":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1589002475683},{"_id":"themes/light/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589002475684},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1589002475684},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1589002475685},{"_id":"themes/light/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1589002475685},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1589002475685},{"_id":"themes/light/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589002475680},{"_id":"themes/light/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1589002475685},{"_id":"themes/light/layout/_partial/post/category.ejs","hash":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1589002475678},{"_id":"themes/light/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1589002475678},{"_id":"themes/light/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1589002475679},{"_id":"themes/light/layout/_partial/post/tag.ejs","hash":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1589002475679},{"_id":"themes/light/layout/_partial/post/title.ejs","hash":"ccc088edccd47a72caae9d162581bad9d2cb5da6","modified":1589002475679},{"_id":"themes/light/source/css/_base/layout.styl","hash":"1b58c21aa48a8f9f7f811af681ac182dd058e23d","modified":1589002475680},{"_id":"themes/light/source/css/_base/variable.styl","hash":"6f3ad13e49634dae8cd992bbd598f5ff0b39a816","modified":1589002475680},{"_id":"themes/light/source/css/_partial/archive.styl","hash":"072e9b8c5ee9acf95ac7cce9c34706d41e412229","modified":1589002475681},{"_id":"themes/light/source/css/_partial/article.styl","hash":"c40dea0a6035628dd299cee299d8a6d2abf20d8b","modified":1589002475681},{"_id":"themes/light/source/css/_partial/comment.styl","hash":"e7f8c085bfa8c26afc4b2fbc9f2092f4f07aef34","modified":1589002475681},{"_id":"themes/light/source/css/_partial/footer.styl","hash":"1757872dbdbd09295a625f13e356aa798a8bb308","modified":1589002475681},{"_id":"themes/light/source/css/_partial/header.styl","hash":"50d36fe0c803cbba69dd57493611466e4d72156e","modified":1589002475681},{"_id":"themes/light/source/css/_partial/index.styl","hash":"7a8c0ec6ab99a9f8e00c9687aca29d31752424a2","modified":1589002475681},{"_id":"themes/light/source/css/_partial/sidebar.styl","hash":"a8bf5237d7d2fba66988cfb85a3ae218be8709ae","modified":1589002475681},{"_id":"themes/light/source/css/_partial/syntax.styl","hash":"400335f01229ed02e62110ba90312adb78b84ff5","modified":1589002475681},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1589002475682},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1589002475683},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","hash":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1589002475682},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1589002475683},{"_id":"themes/hexo-theme-light/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1589003969140},{"_id":"themes/hexo-theme-light/README.md","hash":"42cce00e360ae6c8bd1019776ff3b0b974128fa1","modified":1589003969140},{"_id":"themes/hexo-theme-light/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1589003969140},{"_id":"themes/hexo-theme-light/_config.yml","hash":"54873f9af5e1d1c802fcd7c642c4187f1f04e6b9","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/de.yml","hash":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/default.yml","hash":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/es.yml","hash":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/ja.yml","hash":"1511143393fb86819a9d8685ee81c3bbf1e10b23","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/lt.yml","hash":"8826ef5b3911e094f8a118d8db981532d0919bb6","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/pl.yml","hash":"3f36d08e84a85651bf777cec0752193057c08430","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/ru.yml","hash":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/zh-CN.yml","hash":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1589003969141},{"_id":"themes/hexo-theme-light/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/layout.ejs","hash":"1b4ee853dcd80892ba971954641c0e283ddb2e6e","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/index.ejs","hash":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1589003969145},{"_id":"themes/hexo-theme-light/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589003969145},{"_id":"themes/hexo-theme-light/layout/_partial/after_footer.ejs","hash":"ac0876ae4ec09e2f16969fea196adc66a29ea3b3","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/archive.ejs","hash":"7e4f7c2909b1b90241424ea2ff8e7b4761d8360f","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/article.ejs","hash":"b4479954cdaa33420e06ffce6ea8e05f48da2928","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/comment.ejs","hash":"be7d9849855f2bb31e626db88b49ac1d87446e21","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/facebook_comment.ejs","hash":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/footer.ejs","hash":"1deac5914b2fc93b271732fd4d5cbd0a6f78875f","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/google_analytics.ejs","hash":"7cf0d1f93051bda510d49dab7f684b9d7c6ba58f","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/head.ejs","hash":"bdb65794b84b8242f0e4711059a2737f317587e9","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/header.ejs","hash":"224ea7f0fccc29418583a5c59497a8ece0073301","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/pagination.ejs","hash":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/recent_posts.ejs","hash":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/search.ejs","hash":"f3600ade452f70bd49cb8cf53f3b6e59015f2ce3","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1589003969144},{"_id":"themes/hexo-theme-light/source/css/style.styl","hash":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1589003969150},{"_id":"themes/hexo-theme-light/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1589003969150},{"_id":"themes/hexo-theme-light/layout/_partial/post/category.ejs","hash":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/tag.ejs","hash":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/title.ejs","hash":"ccc088edccd47a72caae9d162581bad9d2cb5da6","modified":1589003969143},{"_id":"themes/hexo-theme-light/source/css/_partial/archive.styl","hash":"072e9b8c5ee9acf95ac7cce9c34706d41e412229","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/_partial/article.styl","hash":"c40dea0a6035628dd299cee299d8a6d2abf20d8b","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/_partial/comment.styl","hash":"e7f8c085bfa8c26afc4b2fbc9f2092f4f07aef34","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/footer.styl","hash":"1757872dbdbd09295a625f13e356aa798a8bb308","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/index.styl","hash":"7a8c0ec6ab99a9f8e00c9687aca29d31752424a2","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/header.styl","hash":"50d36fe0c803cbba69dd57493611466e4d72156e","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/syntax.styl","hash":"400335f01229ed02e62110ba90312adb78b84ff5","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/sidebar.styl","hash":"a8bf5237d7d2fba66988cfb85a3ae218be8709ae","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_base/layout.styl","hash":"1b58c21aa48a8f9f7f811af681ac182dd058e23d","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/_base/variable.styl","hash":"6f3ad13e49634dae8cd992bbd598f5ff0b39a816","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1589003969147},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.svg","hash":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1589003969147},{"_id":"source/_posts/2020-05-09-1.md","hash":"cdc0f46dbda9c733981c1429d1eab59ed9d0ea60","modified":1589004957771},{"_id":"source/_posts/2020-05-09-2.md","hash":"898ddfdad18659eb431c173d311f274c2eb5bdf8","modified":1589005180704},{"_id":"source/_posts/ブログを開設しました.md","hash":"fb5c043509b1ca42dd9316d6bd6c511e51c9dfa1","modified":1589005494637},{"_id":"source/_posts/GCP無料枠でWordPressブログを運用する.md","hash":"82c9c4f2854a30499f3faa792adb7074868e3ed2","modified":1589005486082},{"_id":"source/_posts/C-で音声変換する.md","hash":"f56ffb957c5bbfd346baa5726a7f57ad7cd8ba78","modified":1589010080961},{"_id":"source/_posts/2019年の振り返り.md","hash":"0be25179ec4a75026f92719bf7fc38b391e2f5d1","modified":1589010080961},{"_id":"source/_posts/Processingから外部プログラム・他のスケッチを起動する.md","hash":"c3614e3664d73c56b00d0b95dcdceca32b0c282c","modified":1589010082441},{"_id":"source/_posts/Win2Dでお絵かきプログラミング.md","hash":"38af382b7e3ff2cde458651c42237c329d4decb9","modified":1589010336561},{"_id":"source/_posts/GTDを少しアレンジしたタスク管理.md","hash":"36848b33fae9aa2138f40972796f0b43cec48bff","modified":1589005871141},{"_id":"source/_posts/はとバス.md","hash":"bf49cd1cbb5f9475218a5364474f011862aeef72","modified":1589010080961},{"_id":"source/_posts/WordPressにはてなスターを設置してデザインを良くする.md","hash":"765dc544cc39b4167b9766016edf09789ef2159d","modified":1589009261258},{"_id":"source/_posts/ProcessingでSQLiteを扱う.md","hash":"f7ef12acddd4d41626cfad37ae9ad90f5843b6d7","modified":1589009289000},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1589011619473},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1589011619473},{"_id":"themes/icarus/.gitignore","hash":"0ba474b25eb0ebad8ab5041b3990e27898069b49","modified":1589017655091},{"_id":"themes/icarus/.travis.yml","hash":"0a96b9f82de11bd524a74a3de9a32fd6cd6a6b47","modified":1589011619474},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"0a78b3eb68d41c22735df35447c392c0f3332ea5","modified":1589011619474},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1589011619474},{"_id":"themes/icarus/_config.yml","hash":"5a4470e5c3ccee03fa869ca33e42c44dc0f819a6","modified":1589157281179},{"_id":"themes/icarus/README.md","hash":"c948b354de7161e51f4f87e33393295051d7a7c3","modified":1589011619475},{"_id":"themes/icarus/package.json","hash":"9080de9f1223fe9906312a3f3b1096fe0eb82e38","modified":1589011619484},{"_id":"themes/icarus/.github/stale.yml","hash":"4771f82196ff95de48f9db4696ce316790f21865","modified":1589011619474},{"_id":"themes/icarus/include/config.js","hash":"13feb2c1ac64f5598f335985fb1ee4bc5e9389f1","modified":1589011619475},{"_id":"themes/icarus/include/dependency.js","hash":"3f84538fa2f528634a1f8254c49ab4c5ebfb19e7","modified":1589011619475},{"_id":"themes/icarus/include/register.js","hash":"90c55de6c114018e2ac517a2d469e2ea4cd193c5","modified":1589011619475},{"_id":"themes/icarus/languages/de.yml","hash":"79d769768780b9a72eb256ab61f217b8bdebf85b","modified":1589011619480},{"_id":"themes/icarus/languages/en.yml","hash":"792bc85571b0c16f591bb5455819793a02373017","modified":1589011619480},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1589011619480},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1589011619480},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1589011619480},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1589011619480},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1589011619480},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1589011619481},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1589011619481},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1589011619481},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1589011619481},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1589011619481},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"2f21370cb9aaa7bbe4f362618df450d7bc571a63","modified":1589011619481},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"9172121b0ec3d78861fa6ccdd6396cef90fabdc7","modified":1589011619481},{"_id":"themes/icarus/layout/archive.jsx","hash":"09c58b8e431445f1b40f2b19bc03ebc1a07a2a43","modified":1589011619481},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1589011619481},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1589011619481},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1589011619483},{"_id":"themes/icarus/layout/layout.jsx","hash":"66c95ba388c7129b8fda7ccd8b15a43144ee07d0","modified":1589011619483},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1589011619483},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1589011619484},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1589011619484},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1589011619484},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1589011619485},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619482},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619483},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619483},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619484},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619484},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"e2426853cb623d500021011820bea4726341a3d2","modified":1589011619474},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"0cbf106d95bf9991d850671a9e804f74a1783caa","modified":1589011619474},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"001de87a96271fd7676fbf0fef090369369c2cc4","modified":1589011619474},{"_id":"themes/icarus/include/migration/head.js","hash":"cca7d3a828427cbdd5cbc6a93e501a4fea1c72fd","modified":1589011619475},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1589011619475},{"_id":"themes/icarus/include/schema/config.json","hash":"f91dc103f4a95c870b4d6824dfe005289db5e309","modified":1589011619477},{"_id":"themes/icarus/include/style/article.styl","hash":"2dae2cbb64b2d8e85896a0223597049d79d8ca26","modified":1589084973333},{"_id":"themes/icarus/include/style/base.styl","hash":"35cd2e051d2e4d41f1101c73f1e0de5344b33337","modified":1589414354684},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1589011619479},{"_id":"themes/icarus/include/style/card.styl","hash":"86e307f8143649b3a6ad777ed1f01063e4de72fa","modified":1589086100706},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"44060ec764f12806bb67a6ae450e991c46adf7d0","modified":1589011619479},{"_id":"themes/icarus/include/style/donate.styl","hash":"acf06ddda9ae3f671f6237fbd059360f631a3ef7","modified":1589011619479},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1589011619479},{"_id":"themes/icarus/include/style/helper.styl","hash":"f6fe487415914dc6eb1ce10f53b1ab64eeba07ed","modified":1589011619479},{"_id":"themes/icarus/include/style/navbar.styl","hash":"f56a6f524246ad2564ceec19dbba2ed04e347ba6","modified":1589085788970},{"_id":"themes/icarus/include/style/pagination.styl","hash":"748c4fa46a6e2ec73bda213bb966bb2ee840c095","modified":1589011619479},{"_id":"themes/icarus/include/style/plugin.styl","hash":"8c665dad9ad7ecd64a5f969eba244a73c66a03a9","modified":1589011619479},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1589011619479},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1589011619480},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1589011619480},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1589011619480},{"_id":"themes/icarus/layout/common/article.jsx","hash":"63d8668de7a0e58c04897e2961853c39993488d1","modified":1589011619482},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1589011619482},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1589011619482},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"f0533a1767cbe11f47f96c0b07eb4b446f3374ce","modified":1589011619482},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"ada3968a846a3878009f1b5683346de09509297a","modified":1589011619482},{"_id":"themes/icarus/layout/common/head.jsx","hash":"f5c131b3f8bd8845fbae7ab9c8bd3337e0b7358b","modified":1589095709852},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1589011619482},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"677857a166ad8fd1fec74d869a056348bf2d6800","modified":1589011619482},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1589011619483},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1589011619483},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":1589011619483},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1589011619483},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"54d5a7606e80f76f7492a690eb65d5b5e03b615a","modified":1589011619484},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"45d86813df61de5cc74932f07578033fe4b126f8","modified":1589086029006},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1589011619485},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"4f67ae0b413c1b0286452d607ca646c4fe717f62","modified":1589011619485},{"_id":"themes/icarus/source/css/style.styl","hash":"be5d28ba5098e36483d21f94e4deb0bd2ec075e4","modified":1589011619485},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1589011619485},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1589011619485},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1589011619486},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1589011619486},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1589011619486},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1589011619487},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1589011619486},{"_id":"themes/icarus/source/img/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1589011619486},{"_id":"themes/icarus/source/js/animation.js","hash":"59a05568fd5718513792b0d48bcb4bcf7eaa20e8","modified":1589011619487},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"0f071e2331e39043529041322c4812bb13a3990d","modified":1589011619487},{"_id":"themes/icarus/source/js/main.js","hash":"3fb6be34945798cd400825e021c4267856fff2df","modified":1589011619487},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619476},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619477},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619477},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619478},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619478},{"_id":"themes/icarus/include/hexo/generator/category.js","hash":"d7e7779d5afd8d4e2b0cf9a15feed84c0ea42590","modified":1589011619475},{"_id":"themes/icarus/include/hexo/generator/insight.js","hash":"0af168e624af01c930b4c3aaecc3af2e2dc18871","modified":1589011619475},{"_id":"themes/icarus/include/schema/common/article.json","hash":"37704130789d44c313e03c9dacb809a57274c06f","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"e6b655f5f4af8958efd23137e96de35426e01a77","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/head.json","hash":"49a2a8c0508bad9446868c3c05e7fa3250855af8","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"df708bc8a25d4eeec268969f014ad99f9e74ef7a","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"0217f2af8a4d6731652a3a49b5801bbfe0e73fff","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":1589011619477},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1589011619478},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1589011619478},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1589011619478},{"_id":"themes/icarus/source/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1589012233278},{"_id":"source/_posts/2019-10-12-ブログを開設しました.md","hash":"cfd7976a22b1fa1c37da159aec6f847fde9ce273","modified":1589084008761},{"_id":"source/_posts/2019-10-13-GCP無料枠でWordPressブログを運用する.md","hash":"7116d19edb94551bc82fe0b0dd0744ff9608734e","modified":1589083950421},{"_id":"source/_posts/2019-10-21-GTDを少しアレンジしたタスク管理.md","hash":"0cb9395ff7311c8eb10f1dfc174d1da50ec27179","modified":1589083384238},{"_id":"source/_posts/2019-10-30-ProcessingでSQLiteを扱う.md","hash":"5ee617047d873c6759a8433cbeacb3f87949461e","modified":1589084023511},{"_id":"source/_posts/2019-10-30-Win2Dでお絵かきプログラミング.md","hash":"f30c4c6a94ab4800820e77ff785b9c7ccdabc411","modified":1589083455199},{"_id":"source/_posts/2019-10-31-Processingから外部プログラム・他のスケッチを起動する.md","hash":"58b07eed2cf36514b612cf7c436a5ef7000e2510","modified":1589083207642},{"_id":"source/_posts/2019-10-31-WordPressにはてなスターを設置してデザインを良くする.md","hash":"ed1eb2d92b4bbf147ffdcbcb0ce212e2b4aa897d","modified":1589083927960},{"_id":"source/_posts/2019-11-01-C-で音声変換する.md","hash":"da5ab3680d477def615fcbc639620621b20365ce","modified":1589083226350},{"_id":"source/_posts/2019-11-02-はとバス.md","hash":"0b2a57ba83886cf17918628ef81c8733a16eaf30","modified":1589089410631},{"_id":"source/_posts/2020-01-01-2019年の振り返り.md","hash":"a3845eb555a37ab7813eac7eea9c4a8061c5acde","modified":1589083263538},{"_id":"themes/icarus/include/schema/search/insight.json","hash":"943fc0d382532e63ced2a578ee3d7f5e0de53b2d","modified":1589017529103},{"_id":"themes/icarus/include/schema/search/algolia.json","hash":"48d6ebc40b90c4651eafa9bdc91962dc70e3faa3","modified":1589017529103},{"_id":"themes/icarus/include/hexo/filter/stylus.js","hash":"b06dfdf3b2fb36daa7ba4534574835da4ea6396f","modified":1589017529102},{"_id":"themes/icarus/source/img/favicon.png","hash":"3fae704298fc089e9c5e719aabb9bf609891ec0c","modified":1589086367665},{"_id":"source/thumbnails/hatobas.jpg","hash":"ca1346c61bd8a97dcf910b548016ef7f8c50bd97","modified":1589087173818},{"_id":"source/thumbnails/hatobus.jpg","hash":"ca1346c61bd8a97dcf910b548016ef7f8c50bd97","modified":1589087188498},{"_id":"source/img/favicon.png","hash":"3fae704298fc089e9c5e719aabb9bf609891ec0c","modified":1589095386416},{"_id":"source/img/og_image.jpg","hash":"5f28dad9e0c12444e214017cfbdd8d9c14ad53a8","modified":1589095445671},{"_id":"source/_posts/2019-10-28-ProcessingでSQLiteを扱う.md","hash":"5e5e656b2b0a80e7749d86b6a2179f73c38020a3","modified":1589157401659},{"_id":"source/_posts/2019-10-30-Processingから外部プログラム・他のスケッチを起動する.md","hash":"2e036008e55875a6bad1ba1c1724fb3a29d5d5c9","modified":1589157421226},{"_id":"source/_posts/2019-10-29-Win2Dでお絵かきプログラミング.md","hash":"ab25e080b83639e6ed214fa38b302471a9829e24","modified":1589157412401}],"Category":[{"name":"ブログ運営","_id":"cka0j21650000d7tvb3kjgu3z"},{"name":"ライフハック","_id":"cka0j33u30004d7tv4ua66qcp"},{"name":"技術ネタ","_id":"cka0j3k0d0007d7tva4m0cfuz"},{"name":"イベント","_id":"cka0j4w92000id7tvewl1gjyj"},{"name":"ポエム","_id":"cka0j59hd000ld7tv1xy18hbg"}],"Data":[],"Page":[],"Post":[{"title":"2019年の振り返り","date":"2020-01-01T07:40:02.000Z","_content":"\n恒例の振り返り記事です。\n\n<!-- more -->\n\n## 経歴編\n\n### 大学院を卒業した\n\n修士論文を提出し、卒業することができました。\n正直なところ年始の記憶はあまりありませんw\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n## 資格編\n\n<h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n## 生活編\n\n<h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n## まとめ\n\n思い出せる限りでまとめました。\n2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。\n\n2020年の抱負については別記事に書きます。","source":"_posts/2020-01-01-2019年の振り返り.md","raw":"---\ntitle: 2019年の振り返り\ndate: 2020-01-01 16:40:02\ncategory: ポエム\ntags:\n---\n\n恒例の振り返り記事です。\n\n<!-- more -->\n\n## 経歴編\n\n### 大学院を卒業した\n\n修士論文を提出し、卒業することができました。\n正直なところ年始の記憶はあまりありませんw\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n## 資格編\n\n<h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n## 生活編\n\n<h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n## まとめ\n\n思い出せる限りでまとめました。\n2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。\n\n2020年の抱負については別記事に書きます。","slug":"2019年の振り返り","published":1,"updated":"2020-05-10T04:01:03.538Z","_id":"ck9ze9y0t0000vbtv659vf9cl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>恒例の振り返り記事です。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"経歴編\"><a href=\"#経歴編\" class=\"headerlink\" title=\"経歴編\"></a>経歴編</h2><h3 id=\"大学院を卒業した\"><a href=\"#大学院を卒業した\" class=\"headerlink\" title=\"大学院を卒業した\"></a>大学院を卒業した</h3><p>修士論文を提出し、卒業することができました。<br>正直なところ年始の記憶はあまりありませんw</p>\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n<h2 id=\"資格編\"><a href=\"#資格編\" class=\"headerlink\" title=\"資格編\"></a>資格編</h2><h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n<h2 id=\"生活編\"><a href=\"#生活編\" class=\"headerlink\" title=\"生活編\"></a>生活編</h2><h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>思い出せる限りでまとめました。<br>2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。</p>\n<p>2020年の抱負については別記事に書きます。</p>\n","site":{"data":{}},"excerpt":"<p>恒例の振り返り記事です。</p>","more":"<h2 id=\"経歴編\"><a href=\"#経歴編\" class=\"headerlink\" title=\"経歴編\"></a>経歴編</h2><h3 id=\"大学院を卒業した\"><a href=\"#大学院を卒業した\" class=\"headerlink\" title=\"大学院を卒業した\"></a>大学院を卒業した</h3><p>修士論文を提出し、卒業することができました。<br>正直なところ年始の記憶はあまりありませんw</p>\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n<h2 id=\"資格編\"><a href=\"#資格編\" class=\"headerlink\" title=\"資格編\"></a>資格編</h2><h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n<h2 id=\"生活編\"><a href=\"#生活編\" class=\"headerlink\" title=\"生活編\"></a>生活編</h2><h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>思い出せる限りでまとめました。<br>2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。</p>\n<p>2020年の抱負については別記事に書きます。</p>"},{"title":"C#で音声変換する","date":"2019-11-01T07:36:57.000Z","_content":"\n過去記事の再掲です。\n\n最近C#を使ってwavやmp3，aacの変換を行う機会があった．\n思ったよりもいろいろ試してみることになったので，メモとして残しておく．\n\n<!-- more -->\n\n## NAudio\n\nC#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．\n\nhttps://www.nuget.org/packages/NAudio/\n\nところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．\n\nhttps://markheath.net/post/naudio-mediafoundationencoder\n\n自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．\n\n## NAudio.Lame\n\n他のライブラリを探してみたところ，NAudio.Lameというものを発見．\n\nhttps://www.nuget.org/packages/NAudio.Lame/\n\n外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．\n\n## Expression Encoder\n\nさらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？\n\nhttps://www.nuget.org/packages/Microsoft.Expression.Encoder/\n\nしかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…\n\n## Media Tool Kit\n\nffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．\n\nhttps://www.nuget.org/packages/MediaToolkit/\n\nパッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．\n\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>","source":"_posts/2019-11-01-C-で音声変換する.md","raw":"---\ntitle: 'C#で音声変換する'\ndate: 2019-11-01 16:36:57\ncategory: 技術ネタ\ntags: C#\n---\n\n過去記事の再掲です。\n\n最近C#を使ってwavやmp3，aacの変換を行う機会があった．\n思ったよりもいろいろ試してみることになったので，メモとして残しておく．\n\n<!-- more -->\n\n## NAudio\n\nC#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．\n\nhttps://www.nuget.org/packages/NAudio/\n\nところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．\n\nhttps://markheath.net/post/naudio-mediafoundationencoder\n\n自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．\n\n## NAudio.Lame\n\n他のライブラリを探してみたところ，NAudio.Lameというものを発見．\n\nhttps://www.nuget.org/packages/NAudio.Lame/\n\n外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．\n\n## Expression Encoder\n\nさらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？\n\nhttps://www.nuget.org/packages/Microsoft.Expression.Encoder/\n\nしかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…\n\n## Media Tool Kit\n\nffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．\n\nhttps://www.nuget.org/packages/MediaToolkit/\n\nパッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．\n\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>","slug":"C-で音声変換する","published":1,"updated":"2020-05-10T04:00:26.350Z","_id":"ck9zea5dx0001vbtvcdva6ctk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>過去記事の再掲です。</p>\n<p>最近C#を使ってwavやmp3，aacの変換を行う機会があった．<br>思ったよりもいろいろ試してみることになったので，メモとして残しておく．</p>\n<a id=\"more\"></a>\n\n<h2 id=\"NAudio\"><a href=\"#NAudio\" class=\"headerlink\" title=\"NAudio\"></a>NAudio</h2><p>C#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio/\">https://www.nuget.org/packages/NAudio/</a></p>\n<p>ところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．</p>\n<p><a href=\"https://markheath.net/post/naudio-mediafoundationencoder\">https://markheath.net/post/naudio-mediafoundationencoder</a></p>\n<p>自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．</p>\n<h2 id=\"NAudio-Lame\"><a href=\"#NAudio-Lame\" class=\"headerlink\" title=\"NAudio.Lame\"></a>NAudio.Lame</h2><p>他のライブラリを探してみたところ，NAudio.Lameというものを発見．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio.Lame/\">https://www.nuget.org/packages/NAudio.Lame/</a></p>\n<p>外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．</p>\n<h2 id=\"Expression-Encoder\"><a href=\"#Expression-Encoder\" class=\"headerlink\" title=\"Expression Encoder\"></a>Expression Encoder</h2><p>さらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？</p>\n<p><a href=\"https://www.nuget.org/packages/Microsoft.Expression.Encoder/\">https://www.nuget.org/packages/Microsoft.Expression.Encoder/</a></p>\n<p>しかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…</p>\n<h2 id=\"Media-Tool-Kit\"><a href=\"#Media-Tool-Kit\" class=\"headerlink\" title=\"Media Tool Kit\"></a>Media Tool Kit</h2><p>ffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．</p>\n<p><a href=\"https://www.nuget.org/packages/MediaToolkit/\">https://www.nuget.org/packages/MediaToolkit/</a></p>\n<p>パッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．</p>\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<p>最近C#を使ってwavやmp3，aacの変換を行う機会があった．<br>思ったよりもいろいろ試してみることになったので，メモとして残しておく．</p>","more":"<h2 id=\"NAudio\"><a href=\"#NAudio\" class=\"headerlink\" title=\"NAudio\"></a>NAudio</h2><p>C#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio/\">https://www.nuget.org/packages/NAudio/</a></p>\n<p>ところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．</p>\n<p><a href=\"https://markheath.net/post/naudio-mediafoundationencoder\">https://markheath.net/post/naudio-mediafoundationencoder</a></p>\n<p>自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．</p>\n<h2 id=\"NAudio-Lame\"><a href=\"#NAudio-Lame\" class=\"headerlink\" title=\"NAudio.Lame\"></a>NAudio.Lame</h2><p>他のライブラリを探してみたところ，NAudio.Lameというものを発見．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio.Lame/\">https://www.nuget.org/packages/NAudio.Lame/</a></p>\n<p>外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．</p>\n<h2 id=\"Expression-Encoder\"><a href=\"#Expression-Encoder\" class=\"headerlink\" title=\"Expression Encoder\"></a>Expression Encoder</h2><p>さらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？</p>\n<p><a href=\"https://www.nuget.org/packages/Microsoft.Expression.Encoder/\">https://www.nuget.org/packages/Microsoft.Expression.Encoder/</a></p>\n<p>しかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…</p>\n<h2 id=\"Media-Tool-Kit\"><a href=\"#Media-Tool-Kit\" class=\"headerlink\" title=\"Media Tool Kit\"></a>Media Tool Kit</h2><p>ffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．</p>\n<p><a href=\"https://www.nuget.org/packages/MediaToolkit/\">https://www.nuget.org/packages/MediaToolkit/</a></p>\n<p>パッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．</p>\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>"},{"title":"GCP無料枠でWordPressブログを運用する","date":"2019-10-13T06:17:11.000Z","_content":"\nこのブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。\n\n※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。\n\n<!-- more -->\n\n## なぜGCPなのか\n\n一言で言えば、無料で運用したいからですねw\n\n無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。\n\n自宅サーバは物理的に管理が大変なので却下。\n\n無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。\n\nとなるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…\n\nというわけでGCPを使うことにしました。\n\n## Compute Engine\n\nGCPには２種類の無料枠があります。\n\n- 12ヶ月の期限付きクレジットが300$分使える\n- サービスの一部をずっと使える\n\nブログは長く運用したいので後者だけで完結したいところですね。\nご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！\n\nhttps://cloud.google.com/free/?hl=ja\n\n## インスタンスの構築\n\nググってチュートリアル的なやつをやってくださいw\n以下のような流れになります。\n\n- （なければ）Googleアカウントを作る\n- GCPのプロジェクトを作る\n- 請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)\n- インスタンスを建てる(httpsを許可しておきましょう)\n\nちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。\n\nOSはUbuntu18のLTSなやつを選びました。\n\nあとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。\n\nインスタンスの編集画面で、以下の通りに設定します。\n\n- ネットワーク インターフェースを選択\n- 外部IPの選択ボックスを開き、「IPアドレスを作成」を選択\n- できあがったIPアドレスに設定して保存\n\nhttps://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\n\n## ミドルウェアのインストール\n\nよくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。\n\n### Webサーバのインストール\n\nnginxなりapacheなりH2Oなり、お好きなものをインストールしてください。\nWordPressは.htaccessを使うので、apacheが一番easyだと思います。\n一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。\n\nとりあえずapacheのインストールコマンドを貼っておきます。\n\n`sudo apt -y install apache2`\n\nこれでブラウザから外部IPでサーバにアクセスできるようになります。\n\n### DBMSのインストール・DBの作成\n\nMySQLかmariaDBをインストールします。基本的に以下でok。\n\n`sudo apt -y install mysql-server mysql-client`\n\nインストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。\n\n### PHPのインストール\n\nこれもググればたくさんでてきますが、とりあえず以下でよいかと\n\n`sudo apt -y install php7.2 php7.2-mysql`\n\n## WordPressのインストール\n\n今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。\n\n`wget https://ja.wordpress.org/latest-ja.zip`\n\nunzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。\n\n```\nunzip latest-ja.zip\nsudo mv [WordPressのディレクトリ] /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/[WordPressのディレクトリ]\n```\n\nhttps://ja.wordpress.org\n\n## ドメインの設定\n\nドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）\n管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。\n\n- お名前.com Naviにログインし、ドメイン設定のページを開く。\n- 「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。\n- ドメインを選択して次へ進む\n- またメニューが出てくるので、「DNSレコード設定を利用する」を選択\n- `TYPE`を`A`にして、`VALUE`の部分にインスタンスの「外部 IP」を入力\n- 確認画面へ進み、設定して完了\n\nこれでドメインからサイトを表示できるようになったはず。\n\n## SSL証明書の設定\n\nChromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。\n無料で利用可能なLet's Encryptを使います。\n\nhttps://letsencrypt.org/ja/\n\n## ブログの立ち上げ\n\nここからはブラウザ上で作業します。\nWordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。\n\nあとは好みのテーマをインストールすればサイト完成です。\n\n## おわりに\n\n書いていて思いましたが、意外とやることが多いですね…\n僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。\n\nレガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。\n\n今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。","source":"_posts/2019-10-13-GCP無料枠でWordPressブログを運用する.md","raw":"---\ntitle: GCP無料枠でWordPressブログを運用する\ndate: 2019-10-13 15:17:11\ncategory: ブログ運営\ntags:\n- GCP\n- WordPress\n---\n\nこのブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。\n\n※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。\n\n<!-- more -->\n\n## なぜGCPなのか\n\n一言で言えば、無料で運用したいからですねw\n\n無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。\n\n自宅サーバは物理的に管理が大変なので却下。\n\n無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。\n\nとなるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…\n\nというわけでGCPを使うことにしました。\n\n## Compute Engine\n\nGCPには２種類の無料枠があります。\n\n- 12ヶ月の期限付きクレジットが300$分使える\n- サービスの一部をずっと使える\n\nブログは長く運用したいので後者だけで完結したいところですね。\nご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！\n\nhttps://cloud.google.com/free/?hl=ja\n\n## インスタンスの構築\n\nググってチュートリアル的なやつをやってくださいw\n以下のような流れになります。\n\n- （なければ）Googleアカウントを作る\n- GCPのプロジェクトを作る\n- 請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)\n- インスタンスを建てる(httpsを許可しておきましょう)\n\nちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。\n\nOSはUbuntu18のLTSなやつを選びました。\n\nあとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。\n\nインスタンスの編集画面で、以下の通りに設定します。\n\n- ネットワーク インターフェースを選択\n- 外部IPの選択ボックスを開き、「IPアドレスを作成」を選択\n- できあがったIPアドレスに設定して保存\n\nhttps://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\n\n## ミドルウェアのインストール\n\nよくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。\n\n### Webサーバのインストール\n\nnginxなりapacheなりH2Oなり、お好きなものをインストールしてください。\nWordPressは.htaccessを使うので、apacheが一番easyだと思います。\n一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。\n\nとりあえずapacheのインストールコマンドを貼っておきます。\n\n`sudo apt -y install apache2`\n\nこれでブラウザから外部IPでサーバにアクセスできるようになります。\n\n### DBMSのインストール・DBの作成\n\nMySQLかmariaDBをインストールします。基本的に以下でok。\n\n`sudo apt -y install mysql-server mysql-client`\n\nインストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。\n\n### PHPのインストール\n\nこれもググればたくさんでてきますが、とりあえず以下でよいかと\n\n`sudo apt -y install php7.2 php7.2-mysql`\n\n## WordPressのインストール\n\n今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。\n\n`wget https://ja.wordpress.org/latest-ja.zip`\n\nunzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。\n\n```\nunzip latest-ja.zip\nsudo mv [WordPressのディレクトリ] /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/[WordPressのディレクトリ]\n```\n\nhttps://ja.wordpress.org\n\n## ドメインの設定\n\nドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）\n管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。\n\n- お名前.com Naviにログインし、ドメイン設定のページを開く。\n- 「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。\n- ドメインを選択して次へ進む\n- またメニューが出てくるので、「DNSレコード設定を利用する」を選択\n- `TYPE`を`A`にして、`VALUE`の部分にインスタンスの「外部 IP」を入力\n- 確認画面へ進み、設定して完了\n\nこれでドメインからサイトを表示できるようになったはず。\n\n## SSL証明書の設定\n\nChromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。\n無料で利用可能なLet's Encryptを使います。\n\nhttps://letsencrypt.org/ja/\n\n## ブログの立ち上げ\n\nここからはブラウザ上で作業します。\nWordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。\n\nあとは好みのテーマをインストールすればサイト完成です。\n\n## おわりに\n\n書いていて思いましたが、意外とやることが多いですね…\n僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。\n\nレガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。\n\n今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。","slug":"GCP無料枠でWordPressブログを運用する","published":1,"updated":"2020-05-10T04:12:30.421Z","_id":"ck9zeace20002vbtvfzkq36cs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>このブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。</p>\n<p>※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"なぜGCPなのか\"><a href=\"#なぜGCPなのか\" class=\"headerlink\" title=\"なぜGCPなのか\"></a>なぜGCPなのか</h2><p>一言で言えば、無料で運用したいからですねw</p>\n<p>無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。</p>\n<p>自宅サーバは物理的に管理が大変なので却下。</p>\n<p>無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。</p>\n<p>となるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…</p>\n<p>というわけでGCPを使うことにしました。</p>\n<h2 id=\"Compute-Engine\"><a href=\"#Compute-Engine\" class=\"headerlink\" title=\"Compute Engine\"></a>Compute Engine</h2><p>GCPには２種類の無料枠があります。</p>\n<ul>\n<li>12ヶ月の期限付きクレジットが300$分使える</li>\n<li>サービスの一部をずっと使える</li>\n</ul>\n<p>ブログは長く運用したいので後者だけで完結したいところですね。<br>ご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！</p>\n<p><a href=\"https://cloud.google.com/free/?hl=ja\">https://cloud.google.com/free/?hl=ja</a></p>\n<h2 id=\"インスタンスの構築\"><a href=\"#インスタンスの構築\" class=\"headerlink\" title=\"インスタンスの構築\"></a>インスタンスの構築</h2><p>ググってチュートリアル的なやつをやってくださいw<br>以下のような流れになります。</p>\n<ul>\n<li>（なければ）Googleアカウントを作る</li>\n<li>GCPのプロジェクトを作る</li>\n<li>請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)</li>\n<li>インスタンスを建てる(httpsを許可しておきましょう)</li>\n</ul>\n<p>ちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。</p>\n<p>OSはUbuntu18のLTSなやつを選びました。</p>\n<p>あとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。</p>\n<p>インスタンスの編集画面で、以下の通りに設定します。</p>\n<ul>\n<li>ネットワーク インターフェースを選択</li>\n<li>外部IPの選択ボックスを開き、「IPアドレスを作成」を選択</li>\n<li>できあがったIPアドレスに設定して保存</li>\n</ul>\n<p><a href=\"https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\">https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja</a></p>\n<h2 id=\"ミドルウェアのインストール\"><a href=\"#ミドルウェアのインストール\" class=\"headerlink\" title=\"ミドルウェアのインストール\"></a>ミドルウェアのインストール</h2><p>よくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。</p>\n<h3 id=\"Webサーバのインストール\"><a href=\"#Webサーバのインストール\" class=\"headerlink\" title=\"Webサーバのインストール\"></a>Webサーバのインストール</h3><p>nginxなりapacheなりH2Oなり、お好きなものをインストールしてください。<br>WordPressは.htaccessを使うので、apacheが一番easyだと思います。<br>一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。</p>\n<p>とりあえずapacheのインストールコマンドを貼っておきます。</p>\n<p><code>sudo apt -y install apache2</code></p>\n<p>これでブラウザから外部IPでサーバにアクセスできるようになります。</p>\n<h3 id=\"DBMSのインストール・DBの作成\"><a href=\"#DBMSのインストール・DBの作成\" class=\"headerlink\" title=\"DBMSのインストール・DBの作成\"></a>DBMSのインストール・DBの作成</h3><p>MySQLかmariaDBをインストールします。基本的に以下でok。</p>\n<p><code>sudo apt -y install mysql-server mysql-client</code></p>\n<p>インストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。</p>\n<h3 id=\"PHPのインストール\"><a href=\"#PHPのインストール\" class=\"headerlink\" title=\"PHPのインストール\"></a>PHPのインストール</h3><p>これもググればたくさんでてきますが、とりあえず以下でよいかと</p>\n<p><code>sudo apt -y install php7.2 php7.2-mysql</code></p>\n<h2 id=\"WordPressのインストール\"><a href=\"#WordPressのインストール\" class=\"headerlink\" title=\"WordPressのインストール\"></a>WordPressのインストール</h2><p>今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。</p>\n<p><code>wget https://ja.wordpress.org/latest-ja.zip</code></p>\n<p>unzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip latest-ja.zip</span><br><span class=\"line\">sudo mv [WordPressのディレクトリ] &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class=\"line\">sudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;html&#x2F;[WordPressのディレクトリ]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ja.wordpress.org\">https://ja.wordpress.org</a></p>\n<h2 id=\"ドメインの設定\"><a href=\"#ドメインの設定\" class=\"headerlink\" title=\"ドメインの設定\"></a>ドメインの設定</h2><p>ドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）<br>管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。</p>\n<ul>\n<li>お名前.com Naviにログインし、ドメイン設定のページを開く。</li>\n<li>「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。</li>\n<li>ドメインを選択して次へ進む</li>\n<li>またメニューが出てくるので、「DNSレコード設定を利用する」を選択</li>\n<li><code>TYPE</code>を<code>A</code>にして、<code>VALUE</code>の部分にインスタンスの「外部 IP」を入力</li>\n<li>確認画面へ進み、設定して完了</li>\n</ul>\n<p>これでドメインからサイトを表示できるようになったはず。</p>\n<h2 id=\"SSL証明書の設定\"><a href=\"#SSL証明書の設定\" class=\"headerlink\" title=\"SSL証明書の設定\"></a>SSL証明書の設定</h2><p>Chromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。<br>無料で利用可能なLet’s Encryptを使います。</p>\n<p><a href=\"https://letsencrypt.org/ja/\">https://letsencrypt.org/ja/</a></p>\n<h2 id=\"ブログの立ち上げ\"><a href=\"#ブログの立ち上げ\" class=\"headerlink\" title=\"ブログの立ち上げ\"></a>ブログの立ち上げ</h2><p>ここからはブラウザ上で作業します。<br>WordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。</p>\n<p>あとは好みのテーマをインストールすればサイト完成です。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>書いていて思いましたが、意外とやることが多いですね…<br>僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。</p>\n<p>レガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。</p>\n<p>今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。</p>\n","site":{"data":{}},"excerpt":"<p>このブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。</p>\n<p>※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。</p>","more":"<h2 id=\"なぜGCPなのか\"><a href=\"#なぜGCPなのか\" class=\"headerlink\" title=\"なぜGCPなのか\"></a>なぜGCPなのか</h2><p>一言で言えば、無料で運用したいからですねw</p>\n<p>無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。</p>\n<p>自宅サーバは物理的に管理が大変なので却下。</p>\n<p>無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。</p>\n<p>となるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…</p>\n<p>というわけでGCPを使うことにしました。</p>\n<h2 id=\"Compute-Engine\"><a href=\"#Compute-Engine\" class=\"headerlink\" title=\"Compute Engine\"></a>Compute Engine</h2><p>GCPには２種類の無料枠があります。</p>\n<ul>\n<li>12ヶ月の期限付きクレジットが300$分使える</li>\n<li>サービスの一部をずっと使える</li>\n</ul>\n<p>ブログは長く運用したいので後者だけで完結したいところですね。<br>ご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！</p>\n<p><a href=\"https://cloud.google.com/free/?hl=ja\">https://cloud.google.com/free/?hl=ja</a></p>\n<h2 id=\"インスタンスの構築\"><a href=\"#インスタンスの構築\" class=\"headerlink\" title=\"インスタンスの構築\"></a>インスタンスの構築</h2><p>ググってチュートリアル的なやつをやってくださいw<br>以下のような流れになります。</p>\n<ul>\n<li>（なければ）Googleアカウントを作る</li>\n<li>GCPのプロジェクトを作る</li>\n<li>請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)</li>\n<li>インスタンスを建てる(httpsを許可しておきましょう)</li>\n</ul>\n<p>ちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。</p>\n<p>OSはUbuntu18のLTSなやつを選びました。</p>\n<p>あとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。</p>\n<p>インスタンスの編集画面で、以下の通りに設定します。</p>\n<ul>\n<li>ネットワーク インターフェースを選択</li>\n<li>外部IPの選択ボックスを開き、「IPアドレスを作成」を選択</li>\n<li>できあがったIPアドレスに設定して保存</li>\n</ul>\n<p><a href=\"https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\">https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja</a></p>\n<h2 id=\"ミドルウェアのインストール\"><a href=\"#ミドルウェアのインストール\" class=\"headerlink\" title=\"ミドルウェアのインストール\"></a>ミドルウェアのインストール</h2><p>よくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。</p>\n<h3 id=\"Webサーバのインストール\"><a href=\"#Webサーバのインストール\" class=\"headerlink\" title=\"Webサーバのインストール\"></a>Webサーバのインストール</h3><p>nginxなりapacheなりH2Oなり、お好きなものをインストールしてください。<br>WordPressは.htaccessを使うので、apacheが一番easyだと思います。<br>一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。</p>\n<p>とりあえずapacheのインストールコマンドを貼っておきます。</p>\n<p><code>sudo apt -y install apache2</code></p>\n<p>これでブラウザから外部IPでサーバにアクセスできるようになります。</p>\n<h3 id=\"DBMSのインストール・DBの作成\"><a href=\"#DBMSのインストール・DBの作成\" class=\"headerlink\" title=\"DBMSのインストール・DBの作成\"></a>DBMSのインストール・DBの作成</h3><p>MySQLかmariaDBをインストールします。基本的に以下でok。</p>\n<p><code>sudo apt -y install mysql-server mysql-client</code></p>\n<p>インストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。</p>\n<h3 id=\"PHPのインストール\"><a href=\"#PHPのインストール\" class=\"headerlink\" title=\"PHPのインストール\"></a>PHPのインストール</h3><p>これもググればたくさんでてきますが、とりあえず以下でよいかと</p>\n<p><code>sudo apt -y install php7.2 php7.2-mysql</code></p>\n<h2 id=\"WordPressのインストール\"><a href=\"#WordPressのインストール\" class=\"headerlink\" title=\"WordPressのインストール\"></a>WordPressのインストール</h2><p>今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。</p>\n<p><code>wget https://ja.wordpress.org/latest-ja.zip</code></p>\n<p>unzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip latest-ja.zip</span><br><span class=\"line\">sudo mv [WordPressのディレクトリ] &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class=\"line\">sudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;html&#x2F;[WordPressのディレクトリ]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ja.wordpress.org\">https://ja.wordpress.org</a></p>\n<h2 id=\"ドメインの設定\"><a href=\"#ドメインの設定\" class=\"headerlink\" title=\"ドメインの設定\"></a>ドメインの設定</h2><p>ドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）<br>管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。</p>\n<ul>\n<li>お名前.com Naviにログインし、ドメイン設定のページを開く。</li>\n<li>「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。</li>\n<li>ドメインを選択して次へ進む</li>\n<li>またメニューが出てくるので、「DNSレコード設定を利用する」を選択</li>\n<li><code>TYPE</code>を<code>A</code>にして、<code>VALUE</code>の部分にインスタンスの「外部 IP」を入力</li>\n<li>確認画面へ進み、設定して完了</li>\n</ul>\n<p>これでドメインからサイトを表示できるようになったはず。</p>\n<h2 id=\"SSL証明書の設定\"><a href=\"#SSL証明書の設定\" class=\"headerlink\" title=\"SSL証明書の設定\"></a>SSL証明書の設定</h2><p>Chromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。<br>無料で利用可能なLet’s Encryptを使います。</p>\n<p><a href=\"https://letsencrypt.org/ja/\">https://letsencrypt.org/ja/</a></p>\n<h2 id=\"ブログの立ち上げ\"><a href=\"#ブログの立ち上げ\" class=\"headerlink\" title=\"ブログの立ち上げ\"></a>ブログの立ち上げ</h2><p>ここからはブラウザ上で作業します。<br>WordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。</p>\n<p>あとは好みのテーマをインストールすればサイト完成です。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>書いていて思いましたが、意外とやることが多いですね…<br>僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。</p>\n<p>レガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。</p>\n<p>今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。</p>"},{"title":"GTDを少しアレンジしたタスク管理","date":"2019-10-21T06:28:06.000Z","_content":"\n今回はタスク管理の話です。\nタスク管理というと[GTD](https://ja.wikipedia.org/wiki/Getting_Things_Done)が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。\n\n<!-- more -->\n\n## なぜタスクを管理するのか\n\n僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。\n\nしかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。\n\n実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。\n\n## タスク管理手法の紹介\n\n### 1.タスクを全て書き出す\n\nタスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。\n\nとにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。\n\n### 2.タスクを間引く\n\nタスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。\n\n- 2分以内に終わるものはすぐにやってしまう\n- 可能なものは他の人に任せてしまう\n\nこれでタスクリストを幾分か減らせればラッキーですね。\n\n### 3.タスクを分類する\n\n書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。\n\n#### Pending\n\nここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。\n\n#### Maybe\n\nここは「多分やると思うこと」リストです。\n優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。\n\n#### Project\n\nここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。\n\n例：\n\n- 英語を話せるようになる\n- 一人暮らしをはじめる\n\n#### Goal\n\nここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。\nなるべく定量的な目標が並ぶようにします。\n\n例：\n\n- 貯金を100万円ためる\n- TOEICで700点をとる\n\n#### Task\n\nここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。\nTaskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。\n\n例：\n\n- 月々の貯金額を決める\n- TOEICの過去問を解く\n\n#### Routine\n\nここでは習慣化したいことを管理します。\nタスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。\nこれらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。\n\n例：\n\n- 月に一度髪を切りに行く\n- 毎日20:00に腕立て伏せ15回\n\n### 4. 期限を設定する\n\nGoalとTaskにはそれぞれ期限を設定します。\n\nGoalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。\n\nTaskには実施予定の日時を期限として設定します。\nリストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。\n\n### 5.タスクを更新する\n\n3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。\n\n実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。\n\n以上が、タスク管理の全体像となります。\n\n## Q&amp;A\n\n想定される質問について簡単に回答しておきます。\n\n### Q. この手法の限界はなんですか？\n\nA. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。\nその場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。\n\nまた、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。\n\n### Q. この手法は目的ありきでタスクを管理するのですか？\n\nA. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。\n\n### Q. おすすめのタスク管理ツールを教えてください\n\nA. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。\n\n## おわりに\n\n僕が実践しているタスク管理手法について紹介しました。\n他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。\n","source":"_posts/2019-10-21-GTDを少しアレンジしたタスク管理.md","raw":"---\ntitle: GTDを少しアレンジしたタスク管理\ndate: 2019-10-21 15:28:06\ncategory: ライフハック\ntags: タスク管理\n---\n\n今回はタスク管理の話です。\nタスク管理というと[GTD](https://ja.wikipedia.org/wiki/Getting_Things_Done)が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。\n\n<!-- more -->\n\n## なぜタスクを管理するのか\n\n僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。\n\nしかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。\n\n実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。\n\n## タスク管理手法の紹介\n\n### 1.タスクを全て書き出す\n\nタスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。\n\nとにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。\n\n### 2.タスクを間引く\n\nタスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。\n\n- 2分以内に終わるものはすぐにやってしまう\n- 可能なものは他の人に任せてしまう\n\nこれでタスクリストを幾分か減らせればラッキーですね。\n\n### 3.タスクを分類する\n\n書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。\n\n#### Pending\n\nここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。\n\n#### Maybe\n\nここは「多分やると思うこと」リストです。\n優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。\n\n#### Project\n\nここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。\n\n例：\n\n- 英語を話せるようになる\n- 一人暮らしをはじめる\n\n#### Goal\n\nここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。\nなるべく定量的な目標が並ぶようにします。\n\n例：\n\n- 貯金を100万円ためる\n- TOEICで700点をとる\n\n#### Task\n\nここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。\nTaskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。\n\n例：\n\n- 月々の貯金額を決める\n- TOEICの過去問を解く\n\n#### Routine\n\nここでは習慣化したいことを管理します。\nタスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。\nこれらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。\n\n例：\n\n- 月に一度髪を切りに行く\n- 毎日20:00に腕立て伏せ15回\n\n### 4. 期限を設定する\n\nGoalとTaskにはそれぞれ期限を設定します。\n\nGoalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。\n\nTaskには実施予定の日時を期限として設定します。\nリストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。\n\n### 5.タスクを更新する\n\n3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。\n\n実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。\n\n以上が、タスク管理の全体像となります。\n\n## Q&amp;A\n\n想定される質問について簡単に回答しておきます。\n\n### Q. この手法の限界はなんですか？\n\nA. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。\nその場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。\n\nまた、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。\n\n### Q. この手法は目的ありきでタスクを管理するのですか？\n\nA. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。\n\n### Q. おすすめのタスク管理ツールを教えてください\n\nA. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。\n\n## おわりに\n\n僕が実践しているタスク管理手法について紹介しました。\n他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。\n","slug":"GTDを少しアレンジしたタスク管理","published":1,"updated":"2020-05-10T04:03:04.238Z","_id":"ck9zeajtf0003vbtv408cb6rq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今回はタスク管理の話です。<br>タスク管理というと<a href=\"https://ja.wikipedia.org/wiki/Getting_Things_Done\">GTD</a>が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"なぜタスクを管理するのか\"><a href=\"#なぜタスクを管理するのか\" class=\"headerlink\" title=\"なぜタスクを管理するのか\"></a>なぜタスクを管理するのか</h2><p>僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。</p>\n<p>しかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。</p>\n<p>実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。</p>\n<h2 id=\"タスク管理手法の紹介\"><a href=\"#タスク管理手法の紹介\" class=\"headerlink\" title=\"タスク管理手法の紹介\"></a>タスク管理手法の紹介</h2><h3 id=\"1-タスクを全て書き出す\"><a href=\"#1-タスクを全て書き出す\" class=\"headerlink\" title=\"1.タスクを全て書き出す\"></a>1.タスクを全て書き出す</h3><p>タスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。</p>\n<p>とにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。</p>\n<h3 id=\"2-タスクを間引く\"><a href=\"#2-タスクを間引く\" class=\"headerlink\" title=\"2.タスクを間引く\"></a>2.タスクを間引く</h3><p>タスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。</p>\n<ul>\n<li>2分以内に終わるものはすぐにやってしまう</li>\n<li>可能なものは他の人に任せてしまう</li>\n</ul>\n<p>これでタスクリストを幾分か減らせればラッキーですね。</p>\n<h3 id=\"3-タスクを分類する\"><a href=\"#3-タスクを分類する\" class=\"headerlink\" title=\"3.タスクを分類する\"></a>3.タスクを分類する</h3><p>書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。</p>\n<h4 id=\"Pending\"><a href=\"#Pending\" class=\"headerlink\" title=\"Pending\"></a>Pending</h4><p>ここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。</p>\n<h4 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h4><p>ここは「多分やると思うこと」リストです。<br>優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。</p>\n<h4 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h4><p>ここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。</p>\n<p>例：</p>\n<ul>\n<li>英語を話せるようになる</li>\n<li>一人暮らしをはじめる</li>\n</ul>\n<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>ここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。<br>なるべく定量的な目標が並ぶようにします。</p>\n<p>例：</p>\n<ul>\n<li>貯金を100万円ためる</li>\n<li>TOEICで700点をとる</li>\n</ul>\n<h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>ここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。<br>Taskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。</p>\n<p>例：</p>\n<ul>\n<li>月々の貯金額を決める</li>\n<li>TOEICの過去問を解く</li>\n</ul>\n<h4 id=\"Routine\"><a href=\"#Routine\" class=\"headerlink\" title=\"Routine\"></a>Routine</h4><p>ここでは習慣化したいことを管理します。<br>タスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。<br>これらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。</p>\n<p>例：</p>\n<ul>\n<li>月に一度髪を切りに行く</li>\n<li>毎日20:00に腕立て伏せ15回</li>\n</ul>\n<h3 id=\"4-期限を設定する\"><a href=\"#4-期限を設定する\" class=\"headerlink\" title=\"4. 期限を設定する\"></a>4. 期限を設定する</h3><p>GoalとTaskにはそれぞれ期限を設定します。</p>\n<p>Goalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。</p>\n<p>Taskには実施予定の日時を期限として設定します。<br>リストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。</p>\n<h3 id=\"5-タスクを更新する\"><a href=\"#5-タスクを更新する\" class=\"headerlink\" title=\"5.タスクを更新する\"></a>5.タスクを更新する</h3><p>3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。</p>\n<p>実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。</p>\n<p>以上が、タスク管理の全体像となります。</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>想定される質問について簡単に回答しておきます。</p>\n<h3 id=\"Q-この手法の限界はなんですか？\"><a href=\"#Q-この手法の限界はなんですか？\" class=\"headerlink\" title=\"Q. この手法の限界はなんですか？\"></a>Q. この手法の限界はなんですか？</h3><p>A. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。<br>その場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。</p>\n<p>また、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。</p>\n<h3 id=\"Q-この手法は目的ありきでタスクを管理するのですか？\"><a href=\"#Q-この手法は目的ありきでタスクを管理するのですか？\" class=\"headerlink\" title=\"Q. この手法は目的ありきでタスクを管理するのですか？\"></a>Q. この手法は目的ありきでタスクを管理するのですか？</h3><p>A. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。</p>\n<h3 id=\"Q-おすすめのタスク管理ツールを教えてください\"><a href=\"#Q-おすすめのタスク管理ツールを教えてください\" class=\"headerlink\" title=\"Q. おすすめのタスク管理ツールを教えてください\"></a>Q. おすすめのタスク管理ツールを教えてください</h3><p>A. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>僕が実践しているタスク管理手法について紹介しました。<br>他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。</p>\n","site":{"data":{}},"excerpt":"<p>今回はタスク管理の話です。<br>タスク管理というと<a href=\"https://ja.wikipedia.org/wiki/Getting_Things_Done\">GTD</a>が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。</p>","more":"<h2 id=\"なぜタスクを管理するのか\"><a href=\"#なぜタスクを管理するのか\" class=\"headerlink\" title=\"なぜタスクを管理するのか\"></a>なぜタスクを管理するのか</h2><p>僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。</p>\n<p>しかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。</p>\n<p>実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。</p>\n<h2 id=\"タスク管理手法の紹介\"><a href=\"#タスク管理手法の紹介\" class=\"headerlink\" title=\"タスク管理手法の紹介\"></a>タスク管理手法の紹介</h2><h3 id=\"1-タスクを全て書き出す\"><a href=\"#1-タスクを全て書き出す\" class=\"headerlink\" title=\"1.タスクを全て書き出す\"></a>1.タスクを全て書き出す</h3><p>タスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。</p>\n<p>とにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。</p>\n<h3 id=\"2-タスクを間引く\"><a href=\"#2-タスクを間引く\" class=\"headerlink\" title=\"2.タスクを間引く\"></a>2.タスクを間引く</h3><p>タスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。</p>\n<ul>\n<li>2分以内に終わるものはすぐにやってしまう</li>\n<li>可能なものは他の人に任せてしまう</li>\n</ul>\n<p>これでタスクリストを幾分か減らせればラッキーですね。</p>\n<h3 id=\"3-タスクを分類する\"><a href=\"#3-タスクを分類する\" class=\"headerlink\" title=\"3.タスクを分類する\"></a>3.タスクを分類する</h3><p>書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。</p>\n<h4 id=\"Pending\"><a href=\"#Pending\" class=\"headerlink\" title=\"Pending\"></a>Pending</h4><p>ここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。</p>\n<h4 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h4><p>ここは「多分やると思うこと」リストです。<br>優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。</p>\n<h4 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h4><p>ここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。</p>\n<p>例：</p>\n<ul>\n<li>英語を話せるようになる</li>\n<li>一人暮らしをはじめる</li>\n</ul>\n<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>ここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。<br>なるべく定量的な目標が並ぶようにします。</p>\n<p>例：</p>\n<ul>\n<li>貯金を100万円ためる</li>\n<li>TOEICで700点をとる</li>\n</ul>\n<h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>ここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。<br>Taskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。</p>\n<p>例：</p>\n<ul>\n<li>月々の貯金額を決める</li>\n<li>TOEICの過去問を解く</li>\n</ul>\n<h4 id=\"Routine\"><a href=\"#Routine\" class=\"headerlink\" title=\"Routine\"></a>Routine</h4><p>ここでは習慣化したいことを管理します。<br>タスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。<br>これらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。</p>\n<p>例：</p>\n<ul>\n<li>月に一度髪を切りに行く</li>\n<li>毎日20:00に腕立て伏せ15回</li>\n</ul>\n<h3 id=\"4-期限を設定する\"><a href=\"#4-期限を設定する\" class=\"headerlink\" title=\"4. 期限を設定する\"></a>4. 期限を設定する</h3><p>GoalとTaskにはそれぞれ期限を設定します。</p>\n<p>Goalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。</p>\n<p>Taskには実施予定の日時を期限として設定します。<br>リストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。</p>\n<h3 id=\"5-タスクを更新する\"><a href=\"#5-タスクを更新する\" class=\"headerlink\" title=\"5.タスクを更新する\"></a>5.タスクを更新する</h3><p>3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。</p>\n<p>実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。</p>\n<p>以上が、タスク管理の全体像となります。</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>想定される質問について簡単に回答しておきます。</p>\n<h3 id=\"Q-この手法の限界はなんですか？\"><a href=\"#Q-この手法の限界はなんですか？\" class=\"headerlink\" title=\"Q. この手法の限界はなんですか？\"></a>Q. この手法の限界はなんですか？</h3><p>A. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。<br>その場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。</p>\n<p>また、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。</p>\n<h3 id=\"Q-この手法は目的ありきでタスクを管理するのですか？\"><a href=\"#Q-この手法は目的ありきでタスクを管理するのですか？\" class=\"headerlink\" title=\"Q. この手法は目的ありきでタスクを管理するのですか？\"></a>Q. この手法は目的ありきでタスクを管理するのですか？</h3><p>A. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。</p>\n<h3 id=\"Q-おすすめのタスク管理ツールを教えてください\"><a href=\"#Q-おすすめのタスク管理ツールを教えてください\" class=\"headerlink\" title=\"Q. おすすめのタスク管理ツールを教えてください\"></a>Q. おすすめのタスク管理ツールを教えてください</h3><p>A. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>僕が実践しているタスク管理手法について紹介しました。<br>他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。</p>"},{"title":"WordPressにはてなスターを設置してデザインを良くする","date":"2019-10-31T07:18:44.000Z","_content":"このブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。\n\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nというわけで、はてなスターを設置することにしました。\n\n<!-- more -->\n\n## はてなスターの設置\n\nいままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。\n\nhttp://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\n\n参考記事の手順に沿ってはてなスターを設置します。\nwordpressの場合、トークン設定を`header.php`に記述して、`Hatena.Star.SiteConfig`は`single.php`に記述すると、記事のページのみに表示できます。\n\n## デザインを良くする\n\nめでたく設置されたスターを見ると、なんだか古いデザインになっています。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no)\n\nちょっとイケてないので、デザインを直してみます。\n\n`single.php`のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。\n\nそこに以下のcssを記述しましょう。\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\nこれによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no)\n\nいい感じですね！\nというわけで、イイねと思ったら押してくださいw\n","source":"_posts/2019-10-31-WordPressにはてなスターを設置してデザインを良くする.md","raw":"---\ntitle: WordPressにはてなスターを設置してデザインを良くする\ndate: 2019-10-31 16:18:44\ncategory: 技術ネタ\ntags:\n- はてなスター\n- WordPress\n---\nこのブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。\n\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nというわけで、はてなスターを設置することにしました。\n\n<!-- more -->\n\n## はてなスターの設置\n\nいままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。\n\nhttp://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\n\n参考記事の手順に沿ってはてなスターを設置します。\nwordpressの場合、トークン設定を`header.php`に記述して、`Hatena.Star.SiteConfig`は`single.php`に記述すると、記事のページのみに表示できます。\n\n## デザインを良くする\n\nめでたく設置されたスターを見ると、なんだか古いデザインになっています。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no)\n\nちょっとイケてないので、デザインを直してみます。\n\n`single.php`のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。\n\nそこに以下のcssを記述しましょう。\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\nこれによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no)\n\nいい感じですね！\nというわけで、イイねと思ったら押してくださいw\n","slug":"WordPressにはてなスターを設置してデザインを良くする","published":1,"updated":"2020-05-10T04:12:07.960Z","_id":"ck9zebm1b0008vbtv6s6521gl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>このブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>というわけで、はてなスターを設置することにしました。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"はてなスターの設置\"><a href=\"#はてなスターの設置\" class=\"headerlink\" title=\"はてなスターの設置\"></a>はてなスターの設置</h2><p>いままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。</p>\n<p><a href=\"http://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\">http://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs</a></p>\n<p>参考記事の手順に沿ってはてなスターを設置します。<br>wordpressの場合、トークン設定を<code>header.php</code>に記述して、<code>Hatena.Star.SiteConfig</code>は<code>single.php</code>に記述すると、記事のページのみに表示できます。</p>\n<h2 id=\"デザインを良くする\"><a href=\"#デザインを良くする\" class=\"headerlink\" title=\"デザインを良くする\"></a>デザインを良くする</h2><p>めでたく設置されたスターを見ると、なんだか古いデザインになっています。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no\" alt=\"\"></p>\n<p>ちょっとイケてないので、デザインを直してみます。</p>\n<p><code>single.php</code>のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。</p>\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n<p>続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。</p>\n<p>そこに以下のcssを記述しましょう。</p>\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\n<p>これによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no\" alt=\"\"></p>\n<p>いい感じですね！<br>というわけで、イイねと思ったら押してくださいw</p>\n","site":{"data":{}},"excerpt":"<p>このブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>というわけで、はてなスターを設置することにしました。</p>","more":"<h2 id=\"はてなスターの設置\"><a href=\"#はてなスターの設置\" class=\"headerlink\" title=\"はてなスターの設置\"></a>はてなスターの設置</h2><p>いままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。</p>\n<p><a href=\"http://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\">http://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs</a></p>\n<p>参考記事の手順に沿ってはてなスターを設置します。<br>wordpressの場合、トークン設定を<code>header.php</code>に記述して、<code>Hatena.Star.SiteConfig</code>は<code>single.php</code>に記述すると、記事のページのみに表示できます。</p>\n<h2 id=\"デザインを良くする\"><a href=\"#デザインを良くする\" class=\"headerlink\" title=\"デザインを良くする\"></a>デザインを良くする</h2><p>めでたく設置されたスターを見ると、なんだか古いデザインになっています。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no\" alt=\"\"></p>\n<p>ちょっとイケてないので、デザインを直してみます。</p>\n<p><code>single.php</code>のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。</p>\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n<p>続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。</p>\n<p>そこに以下のcssを記述しましょう。</p>\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\n<p>これによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no\" alt=\"\"></p>\n<p>いい感じですね！<br>というわけで、イイねと思ったら押してくださいw</p>"},{"title":"はとバス#0 はとバスツアーのすすめ","date":"2019-11-02T07:37:56.000Z","thumbnail":"https://salmoncode.com/thumbnails/hatobus.jpg","_content":"\n10月の中旬ごろに、はとバスツアーに行ってきました。\n\nツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。\n\nそれで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。\n\n<!-- more -->\n\n## はとバスツアーとは？\n\n株式会社はとバスが提供する国内観光サービスです。\n基本的に都内から出発して各地の名所を巡る内容となっています。\n\nhttps://www.hatobus.co.jp/dom/appeal/\n\nはとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。\n\nただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。\n\n## はとバスツアーのおすすめポイント\n\n<h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\nメインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。\n\nこれは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw\n\n自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\nお土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。\n\nバスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\nもちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。\n\n## ツアー参加の流れ\n\n<h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\nhttps://www.hatobus.co.jp/\n\n行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。\n\n人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。\n\n後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\nツアーを楽しんだら、出発したバス停に戻ってきて解散です！\n\n## おわりに\n\n別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.\nバスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。\n\n特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!","source":"_posts/2019-11-02-はとバス.md","raw":"---\ntitle: はとバス#0 はとバスツアーのすすめ\ndate: 2019-11-02 16:37:56\ncategory: イベント\ntags: はとバスツアー\nthumbnail: https://salmoncode.com/thumbnails/hatobus.jpg\n---\n\n10月の中旬ごろに、はとバスツアーに行ってきました。\n\nツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。\n\nそれで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。\n\n<!-- more -->\n\n## はとバスツアーとは？\n\n株式会社はとバスが提供する国内観光サービスです。\n基本的に都内から出発して各地の名所を巡る内容となっています。\n\nhttps://www.hatobus.co.jp/dom/appeal/\n\nはとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。\n\nただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。\n\n## はとバスツアーのおすすめポイント\n\n<h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\nメインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。\n\nこれは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw\n\n自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\nお土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。\n\nバスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\nもちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。\n\n## ツアー参加の流れ\n\n<h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\nhttps://www.hatobus.co.jp/\n\n行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。\n\n人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。\n\n後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\nツアーを楽しんだら、出発したバス停に戻ってきて解散です！\n\n## おわりに\n\n別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.\nバスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。\n\n特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!","slug":"はとバス","published":1,"updated":"2020-05-10T05:43:30.631Z","_id":"ck9zebsqo0009vbtv36477fo5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>10月の中旬ごろに、はとバスツアーに行ってきました。</p>\n<p>ツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。</p>\n<p>それで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"はとバスツアーとは？\"><a href=\"#はとバスツアーとは？\" class=\"headerlink\" title=\"はとバスツアーとは？\"></a>はとバスツアーとは？</h2><p>株式会社はとバスが提供する国内観光サービスです。<br>基本的に都内から出発して各地の名所を巡る内容となっています。</p>\n<p><a href=\"https://www.hatobus.co.jp/dom/appeal/\">https://www.hatobus.co.jp/dom/appeal/</a></p>\n<p>はとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。</p>\n<p>ただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。</p>\n<h2 id=\"はとバスツアーのおすすめポイント\"><a href=\"#はとバスツアーのおすすめポイント\" class=\"headerlink\" title=\"はとバスツアーのおすすめポイント\"></a>はとバスツアーのおすすめポイント</h2><h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\n<p>メインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。</p>\n<p>これは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw</p>\n<p>自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍</p>\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\n<p>お土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。</p>\n<p>バスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。</p>\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\n<p>もちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。</p>\n<h2 id=\"ツアー参加の流れ\"><a href=\"#ツアー参加の流れ\" class=\"headerlink\" title=\"ツアー参加の流れ\"></a>ツアー参加の流れ</h2><h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\n<p><a href=\"https://www.hatobus.co.jp/\">https://www.hatobus.co.jp/</a></p>\n<p>行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。</p>\n<p>人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。</p>\n<p>後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。</p>\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\n<p>ツアーを楽しんだら、出発したバス停に戻ってきて解散です！</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.<br>バスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。</p>\n<p>特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!</p>\n","site":{"data":{}},"excerpt":"<p>10月の中旬ごろに、はとバスツアーに行ってきました。</p>\n<p>ツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。</p>\n<p>それで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。</p>","more":"<h2 id=\"はとバスツアーとは？\"><a href=\"#はとバスツアーとは？\" class=\"headerlink\" title=\"はとバスツアーとは？\"></a>はとバスツアーとは？</h2><p>株式会社はとバスが提供する国内観光サービスです。<br>基本的に都内から出発して各地の名所を巡る内容となっています。</p>\n<p><a href=\"https://www.hatobus.co.jp/dom/appeal/\">https://www.hatobus.co.jp/dom/appeal/</a></p>\n<p>はとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。</p>\n<p>ただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。</p>\n<h2 id=\"はとバスツアーのおすすめポイント\"><a href=\"#はとバスツアーのおすすめポイント\" class=\"headerlink\" title=\"はとバスツアーのおすすめポイント\"></a>はとバスツアーのおすすめポイント</h2><h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\n<p>メインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。</p>\n<p>これは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw</p>\n<p>自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍</p>\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\n<p>お土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。</p>\n<p>バスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。</p>\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\n<p>もちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。</p>\n<h2 id=\"ツアー参加の流れ\"><a href=\"#ツアー参加の流れ\" class=\"headerlink\" title=\"ツアー参加の流れ\"></a>ツアー参加の流れ</h2><h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\n<p><a href=\"https://www.hatobus.co.jp/\">https://www.hatobus.co.jp/</a></p>\n<p>行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。</p>\n<p>人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。</p>\n<p>後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。</p>\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\n<p>ツアーを楽しんだら、出発したバス停に戻ってきて解散です！</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.<br>バスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。</p>\n<p>特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!</p>"},{"title":"ブログを開設しました","date":"2019-10-12T06:13:44.000Z","_content":"\n新たにブログを開設しました🎉\n過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw\n\n良い機会なので、ここに経緯や意気込みを記しておきたいと思います。\n\n<!-- more -->\n\n## ブログ再開の経緯\n\nまとまった文章を発信するプラットフォームが欲しいと思ったから。\n\n次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。\n\n## Qiitaじゃない理由\n\n技術的な話を書く場としてはQiitaが有名。\n\nしかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。\n\n## SNSを使わない理由\n\n普段はTwitterでたくさんつぶやいてます笑\n\nしかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。\n\nそれに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。\n\n## いろんなサービスを使い分けない理由\n\n使うサービスが増えると管理が大変だし、スイッチングコストもかかる。\n\nまた、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。\n\n## 無料ブログサービスを使わない理由\n\n無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。\n\nとはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。\n\nはてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。\n\nせっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。\n\n## その他\n\n実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。\n\n決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。\n\nまた、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。\n\n## 意気込み\n\n個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。\n\n- 技術の知見\n- イベントの参加記録\n- 映画の感想\n- 書評\n- ライフハック\n- ポエム\n\nよって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。\n\n## おわりに\n\n今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。","source":"_posts/2019-10-12-ブログを開設しました.md","raw":"---\ntitle: ブログを開設しました\ndate: 2019-10-12 15:13:44\ncategory: ブログ運営\ntags:\n---\n\n新たにブログを開設しました🎉\n過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw\n\n良い機会なので、ここに経緯や意気込みを記しておきたいと思います。\n\n<!-- more -->\n\n## ブログ再開の経緯\n\nまとまった文章を発信するプラットフォームが欲しいと思ったから。\n\n次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。\n\n## Qiitaじゃない理由\n\n技術的な話を書く場としてはQiitaが有名。\n\nしかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。\n\n## SNSを使わない理由\n\n普段はTwitterでたくさんつぶやいてます笑\n\nしかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。\n\nそれに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。\n\n## いろんなサービスを使い分けない理由\n\n使うサービスが増えると管理が大変だし、スイッチングコストもかかる。\n\nまた、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。\n\n## 無料ブログサービスを使わない理由\n\n無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。\n\nとはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。\n\nはてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。\n\nせっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。\n\n## その他\n\n実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。\n\n決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。\n\nまた、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。\n\n## 意気込み\n\n個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。\n\n- 技術の知見\n- イベントの参加記録\n- 映画の感想\n- 書評\n- ライフハック\n- ポエム\n\nよって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。\n\n## おわりに\n\n今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。","slug":"ブログを開設しました","published":1,"updated":"2020-05-10T04:13:28.761Z","_id":"ck9zec1rp000avbtvahcedn5y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>新たにブログを開設しました🎉<br>過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw</p>\n<p>良い機会なので、ここに経緯や意気込みを記しておきたいと思います。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"ブログ再開の経緯\"><a href=\"#ブログ再開の経緯\" class=\"headerlink\" title=\"ブログ再開の経緯\"></a>ブログ再開の経緯</h2><p>まとまった文章を発信するプラットフォームが欲しいと思ったから。</p>\n<p>次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。</p>\n<h2 id=\"Qiitaじゃない理由\"><a href=\"#Qiitaじゃない理由\" class=\"headerlink\" title=\"Qiitaじゃない理由\"></a>Qiitaじゃない理由</h2><p>技術的な話を書く場としてはQiitaが有名。</p>\n<p>しかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。</p>\n<h2 id=\"SNSを使わない理由\"><a href=\"#SNSを使わない理由\" class=\"headerlink\" title=\"SNSを使わない理由\"></a>SNSを使わない理由</h2><p>普段はTwitterでたくさんつぶやいてます笑</p>\n<p>しかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。</p>\n<p>それに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。</p>\n<h2 id=\"いろんなサービスを使い分けない理由\"><a href=\"#いろんなサービスを使い分けない理由\" class=\"headerlink\" title=\"いろんなサービスを使い分けない理由\"></a>いろんなサービスを使い分けない理由</h2><p>使うサービスが増えると管理が大変だし、スイッチングコストもかかる。</p>\n<p>また、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。</p>\n<h2 id=\"無料ブログサービスを使わない理由\"><a href=\"#無料ブログサービスを使わない理由\" class=\"headerlink\" title=\"無料ブログサービスを使わない理由\"></a>無料ブログサービスを使わない理由</h2><p>無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。</p>\n<p>とはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。</p>\n<p>はてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。</p>\n<p>せっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。</p>\n<h2 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h2><p>実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。</p>\n<p>決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。</p>\n<p>また、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。</p>\n<h2 id=\"意気込み\"><a href=\"#意気込み\" class=\"headerlink\" title=\"意気込み\"></a>意気込み</h2><p>個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。</p>\n<ul>\n<li>技術の知見</li>\n<li>イベントの参加記録</li>\n<li>映画の感想</li>\n<li>書評</li>\n<li>ライフハック</li>\n<li>ポエム</li>\n</ul>\n<p>よって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。</p>\n","site":{"data":{}},"excerpt":"<p>新たにブログを開設しました🎉<br>過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw</p>\n<p>良い機会なので、ここに経緯や意気込みを記しておきたいと思います。</p>","more":"<h2 id=\"ブログ再開の経緯\"><a href=\"#ブログ再開の経緯\" class=\"headerlink\" title=\"ブログ再開の経緯\"></a>ブログ再開の経緯</h2><p>まとまった文章を発信するプラットフォームが欲しいと思ったから。</p>\n<p>次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。</p>\n<h2 id=\"Qiitaじゃない理由\"><a href=\"#Qiitaじゃない理由\" class=\"headerlink\" title=\"Qiitaじゃない理由\"></a>Qiitaじゃない理由</h2><p>技術的な話を書く場としてはQiitaが有名。</p>\n<p>しかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。</p>\n<h2 id=\"SNSを使わない理由\"><a href=\"#SNSを使わない理由\" class=\"headerlink\" title=\"SNSを使わない理由\"></a>SNSを使わない理由</h2><p>普段はTwitterでたくさんつぶやいてます笑</p>\n<p>しかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。</p>\n<p>それに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。</p>\n<h2 id=\"いろんなサービスを使い分けない理由\"><a href=\"#いろんなサービスを使い分けない理由\" class=\"headerlink\" title=\"いろんなサービスを使い分けない理由\"></a>いろんなサービスを使い分けない理由</h2><p>使うサービスが増えると管理が大変だし、スイッチングコストもかかる。</p>\n<p>また、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。</p>\n<h2 id=\"無料ブログサービスを使わない理由\"><a href=\"#無料ブログサービスを使わない理由\" class=\"headerlink\" title=\"無料ブログサービスを使わない理由\"></a>無料ブログサービスを使わない理由</h2><p>無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。</p>\n<p>とはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。</p>\n<p>はてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。</p>\n<p>せっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。</p>\n<h2 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h2><p>実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。</p>\n<p>決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。</p>\n<p>また、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。</p>\n<h2 id=\"意気込み\"><a href=\"#意気込み\" class=\"headerlink\" title=\"意気込み\"></a>意気込み</h2><p>個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。</p>\n<ul>\n<li>技術の知見</li>\n<li>イベントの参加記録</li>\n<li>映画の感想</li>\n<li>書評</li>\n<li>ライフハック</li>\n<li>ポエム</li>\n</ul>\n<p>よって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。</p>"},{"title":"ProcessingでSQLiteを扱う","date":"2019-10-28T07:27:08.000Z","_content":"\n過去記事の再掲です。\n\nProcessingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。\n\n<!-- more -->\n\n## 準備\n\nまずはデータベース用のライブラリをスケッチに追加する。\n\nメニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。\n\nキーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。\n\n## SQLiteを扱ってみる\n\nSQLiteオブジェクトを作成してクエリーを投げればok\n\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\nSQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。\n\n### 追記 06/26\n\n返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる","source":"_posts/2019-10-28-ProcessingでSQLiteを扱う.md","raw":"---\ntitle: ProcessingでSQLiteを扱う\ndate: 2019-10-28 16:27:08\ncategory: 技術ネタ\ntags: Processing\n---\n\n過去記事の再掲です。\n\nProcessingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。\n\n<!-- more -->\n\n## 準備\n\nまずはデータベース用のライブラリをスケッチに追加する。\n\nメニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。\n\nキーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。\n\n## SQLiteを扱ってみる\n\nSQLiteオブジェクトを作成してクエリーを投げればok\n\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\nSQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。\n\n### 追記 06/26\n\n返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる","slug":"ProcessingでSQLiteを扱う","published":1,"updated":"2020-05-11T00:36:41.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka60a2g80000nttv3btybvaq","content":"<p>過去記事の再掲です。</p>\n<p>Processingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h2><p>まずはデータベース用のライブラリをスケッチに追加する。</p>\n<p>メニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。</p>\n<p>キーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。</p>\n<h2 id=\"SQLiteを扱ってみる\"><a href=\"#SQLiteを扱ってみる\" class=\"headerlink\" title=\"SQLiteを扱ってみる\"></a>SQLiteを扱ってみる</h2><p>SQLiteオブジェクトを作成してクエリーを投げればok</p>\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\n<p>SQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。</p>\n<h3 id=\"追記-06-26\"><a href=\"#追記-06-26\" class=\"headerlink\" title=\"追記 06/26\"></a>追記 06/26</h3><p>返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる</p>\n","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<p>Processingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。</p>","more":"<h2 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h2><p>まずはデータベース用のライブラリをスケッチに追加する。</p>\n<p>メニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。</p>\n<p>キーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。</p>\n<h2 id=\"SQLiteを扱ってみる\"><a href=\"#SQLiteを扱ってみる\" class=\"headerlink\" title=\"SQLiteを扱ってみる\"></a>SQLiteを扱ってみる</h2><p>SQLiteオブジェクトを作成してクエリーを投げればok</p>\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\n<p>SQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。</p>\n<h3 id=\"追記-06-26\"><a href=\"#追記-06-26\" class=\"headerlink\" title=\"追記 06/26\"></a>追記 06/26</h3><p>返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる</p>"},{"title":"Processingから外部プログラム・他のスケッチを起動する","date":"2019-10-30T07:35:50.000Z","_content":"\n過去記事の再掲です。\n\nProcessingから他のプログラムを起動する話。\n\n<!-- more -->\n\n## Proessingから外部プログラムを起動する\n\nProcessingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。\n\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n起動して何かキーを押すと「メモ帳」が立ち上がる。\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n## Processingをコマンドから起動する\n\nProcessingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>","source":"_posts/2019-10-30-Processingから外部プログラム・他のスケッチを起動する.md","raw":"---\ntitle: Processingから外部プログラム・他のスケッチを起動する\ndate: 2019-10-30 16:35:50\ncategory: 技術ネタ\ntags: Processing\n---\n\n過去記事の再掲です。\n\nProcessingから他のプログラムを起動する話。\n\n<!-- more -->\n\n## Proessingから外部プログラムを起動する\n\nProcessingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。\n\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n起動して何かキーを押すと「メモ帳」が立ち上がる。\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n## Processingをコマンドから起動する\n\nProcessingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>","slug":"Processingから外部プログラム・他のスケッチを起動する","published":1,"updated":"2020-05-11T00:37:01.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka60a2gf0001nttv6cqt1i48","content":"<p>過去記事の再掲です。</p>\n<p>Processingから他のプログラムを起動する話。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Proessingから外部プログラムを起動する\"><a href=\"#Proessingから外部プログラムを起動する\" class=\"headerlink\" title=\"Proessingから外部プログラムを起動する\"></a>Proessingから外部プログラムを起動する</h2><p>Processingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。</p>\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n<p>起動して何かキーを押すと「メモ帳」が立ち上がる。</p>\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n<h2 id=\"Processingをコマンドから起動する\"><a href=\"#Processingをコマンドから起動する\" class=\"headerlink\" title=\"Processingをコマンドから起動する\"></a>Processingをコマンドから起動する</h2><p>Processingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である</p>\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<p>Processingから他のプログラムを起動する話。</p>","more":"<h2 id=\"Proessingから外部プログラムを起動する\"><a href=\"#Proessingから外部プログラムを起動する\" class=\"headerlink\" title=\"Proessingから外部プログラムを起動する\"></a>Proessingから外部プログラムを起動する</h2><p>Processingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。</p>\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n<p>起動して何かキーを押すと「メモ帳」が立ち上がる。</p>\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n<h2 id=\"Processingをコマンドから起動する\"><a href=\"#Processingをコマンドから起動する\" class=\"headerlink\" title=\"Processingをコマンドから起動する\"></a>Processingをコマンドから起動する</h2><p>Processingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である</p>\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>"},{"title":"Win2Dでお絵かきプログラミング","date":"2019-10-29T07:36:29.000Z","_content":"\n過去記事の再掲です。\n\n## はじめに\n\n僕は普段、簡単なプログラミングにはProcessingを使っている。\njava使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。\nところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。\n\nさて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。\n新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。\nGUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。\n\nそんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。\n\n<!-- more -->\n\n## 導入\n\n「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n## Win2dの初期設定\n\n公式ドキュメントに使い方が載っている。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a>\n\nMainPage.xamlのPageタグの中に以下の文を書き込み、\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\nGridタグの中に以下の文を書き込めばよい。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\nMainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\nプロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。\n\n## 図形の描画\n\nargsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n実行するとこんな感じ\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\nそういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n## アニメーションをつくる\n\nIntroductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\nコードのほうも少し変える。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n## おわりに\n\n意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a>","source":"_posts/2019-10-29-Win2Dでお絵かきプログラミング.md","raw":"---\ntitle: Win2Dでお絵かきプログラミング\ndate: 2019-10-29 16:36:29\ncategory: 技術ネタ\ntags:\n- C#\n- Win2D\n---\n\n過去記事の再掲です。\n\n## はじめに\n\n僕は普段、簡単なプログラミングにはProcessingを使っている。\njava使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。\nところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。\n\nさて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。\n新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。\nGUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。\n\nそんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。\n\n<!-- more -->\n\n## 導入\n\n「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n## Win2dの初期設定\n\n公式ドキュメントに使い方が載っている。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a>\n\nMainPage.xamlのPageタグの中に以下の文を書き込み、\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\nGridタグの中に以下の文を書き込めばよい。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\nMainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\nプロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。\n\n## 図形の描画\n\nargsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n実行するとこんな感じ\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\nそういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n## アニメーションをつくる\n\nIntroductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\nコードのほうも少し変える。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n## おわりに\n\n意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a>","slug":"Win2Dでお絵かきプログラミング","published":1,"updated":"2020-05-11T00:36:52.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka60a2gh0003nttvdfi3ca8f","content":"<p>過去記事の再掲です。</p>\n<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>僕は普段、簡単なプログラミングにはProcessingを使っている。<br>java使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。<br>ところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。</p>\n<p>さて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。<br>新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。<br>GUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。</p>\n<p>そんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h2><p>「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n<p>新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n<h2 id=\"Win2dの初期設定\"><a href=\"#Win2dの初期設定\" class=\"headerlink\" title=\"Win2dの初期設定\"></a>Win2dの初期設定</h2><p>公式ドキュメントに使い方が載っている。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a></p>\n<p>MainPage.xamlのPageタグの中に以下の文を書き込み、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\n<p>Gridタグの中に以下の文を書き込めばよい。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\n<p>MainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\n<p>プロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。</p>\n<h2 id=\"図形の描画\"><a href=\"#図形の描画\" class=\"headerlink\" title=\"図形の描画\"></a>図形の描画</h2><p>argsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n<p>実行するとこんな感じ</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\n<p>そういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n<h2 id=\"アニメーションをつくる\"><a href=\"#アニメーションをつくる\" class=\"headerlink\" title=\"アニメーションをつくる\"></a>アニメーションをつくる</h2><p>Introductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\n<p>コードのほうも少し変える。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a></p>\n","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>僕は普段、簡単なプログラミングにはProcessingを使っている。<br>java使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。<br>ところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。</p>\n<p>さて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。<br>新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。<br>GUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。</p>\n<p>そんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。</p>","more":"<h2 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h2><p>「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n<p>新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n<h2 id=\"Win2dの初期設定\"><a href=\"#Win2dの初期設定\" class=\"headerlink\" title=\"Win2dの初期設定\"></a>Win2dの初期設定</h2><p>公式ドキュメントに使い方が載っている。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a></p>\n<p>MainPage.xamlのPageタグの中に以下の文を書き込み、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\n<p>Gridタグの中に以下の文を書き込めばよい。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\n<p>MainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\n<p>プロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。</p>\n<h2 id=\"図形の描画\"><a href=\"#図形の描画\" class=\"headerlink\" title=\"図形の描画\"></a>図形の描画</h2><p>argsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n<p>実行するとこんな感じ</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\n<p>そういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n<h2 id=\"アニメーションをつくる\"><a href=\"#アニメーションをつくる\" class=\"headerlink\" title=\"アニメーションをつくる\"></a>アニメーションをつくる</h2><p>Introductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\n<p>コードのほうも少し変える。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9zec1rp000avbtvahcedn5y","category_id":"cka0j21650000d7tvb3kjgu3z","_id":"cka0j21670001d7tv4tnffabz"},{"post_id":"ck9zeace20002vbtvfzkq36cs","category_id":"cka0j21650000d7tvb3kjgu3z","_id":"cka0j2uek0002d7tverks9zu6"},{"post_id":"ck9zeajtf0003vbtv408cb6rq","category_id":"cka0j33u30004d7tv4ua66qcp","_id":"cka0j33u30005d7tvdmgg45lk"},{"post_id":"ck9zea5dx0001vbtvcdva6ctk","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka0j4ccg000ed7tv6pni99pb"},{"post_id":"ck9zebsqo0009vbtv36477fo5","category_id":"cka0j4w92000id7tvewl1gjyj","_id":"cka0j4w92000jd7tvdw4fckln"},{"post_id":"ck9ze9y0t0000vbtv659vf9cl","category_id":"cka0j59hd000ld7tv1xy18hbg","_id":"cka0j59he000md7tvbtoh1a4r"},{"post_id":"ck9zebm1b0008vbtv6s6521gl","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka0j5hv4000nd7tv2kzm1h3u"},{"post_id":"cka60a2g80000nttv3btybvaq","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka60a2gi0005nttvdnvk2asq"},{"post_id":"cka60a2gf0001nttv6cqt1i48","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka60a2gj0007nttv6mlzbwd7"},{"post_id":"cka60a2gh0003nttvdfi3ca8f","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka60a2gj0009nttva3v763b8"}],"PostTag":[{"post_id":"ck9zea5dx0001vbtvcdva6ctk","tag_id":"cka0j4gmm000fd7tv58crepz4","_id":"cka0j4gmn000gd7tv13gy5fgq"},{"post_id":"ck9zebsqo0009vbtv36477fo5","tag_id":"cka0j7909000pd7tv1hjxa0oc","_id":"cka0j790a000qd7tv41ie3d8e"},{"post_id":"ck9zebm1b0008vbtv6s6521gl","tag_id":"cka0j7l5f000rd7tvemn746rs","_id":"cka0j7l5g000sd7tv9tzc8g43"},{"post_id":"ck9zeajtf0003vbtv408cb6rq","tag_id":"cka0j7uow000td7tv6s86cx9a","_id":"cka0j7uox000ud7tv2tpb5egk"},{"post_id":"ck9zeace20002vbtvfzkq36cs","tag_id":"cka0j85qe000vd7tvce317wp4","_id":"cka0j85qf000wd7tv9oyrbn2v"},{"post_id":"ck9zebm1b0008vbtv6s6521gl","tag_id":"cka0jjib80012d7tv0rvn5yz1","_id":"cka0jjib90013d7tv8ef00k1b"},{"post_id":"ck9zeace20002vbtvfzkq36cs","tag_id":"cka0jjib80012d7tv0rvn5yz1","_id":"cka0jjzn20014d7tv874s0m8d"},{"post_id":"cka60a2g80000nttv3btybvaq","tag_id":"cka0j3sba0009d7tvcflcake6","_id":"cka60a2gh0002nttvhe18gr81"},{"post_id":"cka60a2gf0001nttv6cqt1i48","tag_id":"cka0j3sba0009d7tvcflcake6","_id":"cka60a2gi0004nttv786n9w1h"},{"post_id":"cka60a2gh0003nttvdfi3ca8f","tag_id":"cka0j4gmm000fd7tv58crepz4","_id":"cka60a2gj0006nttv85s84sr4"},{"post_id":"cka60a2gh0003nttvdfi3ca8f","tag_id":"cka0j9diq000zd7tv7wiuh4yt","_id":"cka60a2gj0008nttvfk9ef5z4"}],"Tag":[{"name":"Processing","_id":"cka0j3sba0009d7tvcflcake6"},{"name":"C#","_id":"cka0j4gmm000fd7tv58crepz4"},{"name":"はとバスツアー","_id":"cka0j7909000pd7tv1hjxa0oc"},{"name":"はてなスター","_id":"cka0j7l5f000rd7tvemn746rs"},{"name":"タスク管理","_id":"cka0j7uow000td7tv6s86cx9a"},{"name":"GCP","_id":"cka0j85qe000vd7tvce317wp4"},{"name":"C#, Win2D","_id":"cka0j8drt000xd7tvbem58tdq"},{"name":"Win2D","_id":"cka0j9diq000zd7tv7wiuh4yt"},{"name":"WordPress","_id":"cka0jjib80012d7tv0rvn5yz1"}]}}