{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"source/thumbnails/hatobus.jpg","path":"thumbnails/hatobus.jpg","modified":0,"renderable":0},{"_id":"source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":0},{"_id":"source/img/og_image.JPG","path":"img/og_image.JPG","modified":1,"renderable":0},{"_id":"source/img/og_image.jpg","path":"img/og_image.jpg","modified":0,"renderable":0},{"_id":"source/thumbnails/2020-5-14.jpg","path":"thumbnails/2020-5-14.jpg","modified":0,"renderable":0},{"_id":"source/ads.txt","path":"ads.txt","modified":0,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1588998488530},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1588998488511},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1588998488511},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1588998488530},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1588998488530},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1588998488530},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1588998488510},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1588998488528},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1588998488528},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1588998488528},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1588998488529},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1588998488529},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1588998488528},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1588998488529},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1588998488530},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1588998488528},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1588998488529},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1588998488529},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1588998488529},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1588998488513},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1588998488512},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1588998488512},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1588998488513},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588998488517},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1588998488512},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1588998488513},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1588998488530},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1588998488517},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1588998488516},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1588998488517},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1588998488517},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1588998488518},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1588998488517},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1588998488527},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1588998488523},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1588998488526},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1588998488528},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588998488519},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588998488519},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1588998488519},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1588998488520},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1588998488519},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1588998488514},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1588998488515},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1588998488514},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1588998488525},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1588998488526},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1588998488524},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1588998488525},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1588998488523},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1588998488523},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1588998488527},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1588998488527},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1588998488527},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588998488521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588998488522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1588998488522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1588998488522},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588998488521},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1588998488522},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1588998488527},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1588998488526},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1588998488523},{"_id":"public/2020/05/09/hello-world/index.html","hash":"5701a841840de2cced86e314e3e84cce06a2efb3","modified":1588998592405},{"_id":"public/archives/index.html","hash":"c457efe7c42951ee3bd86063de800b26eb2f2fb2","modified":1589616291460},{"_id":"public/archives/2020/index.html","hash":"170fb4de88c1f9fce2f78ff73213ffcd45cd0748","modified":1589616291460},{"_id":"public/archives/2020/05/index.html","hash":"c5e9eb899299d485f3197fc702b5a76b196c11ab","modified":1589616291460},{"_id":"public/index.html","hash":"857f312f917b86df9442c0dd3f655f201ff534b8","modified":1589616291460},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1588998592405},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1588998592405},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1588998592405},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1588998592405},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1588998592405},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1588998592405},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1588998592405},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1588998592405},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1588998592405},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1588998592405},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1588998592405},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1588998592405},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1588998592405},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1588998592405},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1588998592405},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1588998592405},{"_id":"themes/light/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1589002475676},{"_id":"themes/light/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1589002475676},{"_id":"themes/light/README.md","hash":"42cce00e360ae6c8bd1019776ff3b0b974128fa1","modified":1589002475676},{"_id":"themes/light/_config.yml","hash":"54873f9af5e1d1c802fcd7c642c4187f1f04e6b9","modified":1589002475676},{"_id":"themes/light/languages/de.yml","hash":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1589002475676},{"_id":"themes/light/languages/default.yml","hash":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1589002475676},{"_id":"themes/light/languages/es.yml","hash":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1589002475676},{"_id":"themes/light/languages/ja.yml","hash":"1511143393fb86819a9d8685ee81c3bbf1e10b23","modified":1589002475676},{"_id":"themes/light/languages/lt.yml","hash":"8826ef5b3911e094f8a118d8db981532d0919bb6","modified":1589002475676},{"_id":"themes/light/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1589002475677},{"_id":"themes/light/languages/pl.yml","hash":"3f36d08e84a85651bf777cec0752193057c08430","modified":1589002475677},{"_id":"themes/light/languages/ru.yml","hash":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1589002475677},{"_id":"themes/light/languages/zh-CN.yml","hash":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1589002475677},{"_id":"themes/light/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1589002475677},{"_id":"themes/light/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1589002475679},{"_id":"themes/light/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1589002475680},{"_id":"themes/light/layout/index.ejs","hash":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1589002475680},{"_id":"themes/light/layout/layout.ejs","hash":"1b4ee853dcd80892ba971954641c0e283ddb2e6e","modified":1589002475680},{"_id":"themes/light/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589002475680},{"_id":"themes/light/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589002475680},{"_id":"themes/light/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1589002475680},{"_id":"themes/light/layout/_partial/after_footer.ejs","hash":"ac0876ae4ec09e2f16969fea196adc66a29ea3b3","modified":1589002475677},{"_id":"themes/light/layout/_partial/archive.ejs","hash":"7e4f7c2909b1b90241424ea2ff8e7b4761d8360f","modified":1589002475677},{"_id":"themes/light/layout/_partial/article.ejs","hash":"b4479954cdaa33420e06ffce6ea8e05f48da2928","modified":1589002475677},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","hash":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1589002475678},{"_id":"themes/light/layout/_partial/comment.ejs","hash":"be7d9849855f2bb31e626db88b49ac1d87446e21","modified":1589002475678},{"_id":"themes/light/layout/_partial/footer.ejs","hash":"1deac5914b2fc93b271732fd4d5cbd0a6f78875f","modified":1589002475678},{"_id":"themes/light/layout/_partial/google_analytics.ejs","hash":"7cf0d1f93051bda510d49dab7f684b9d7c6ba58f","modified":1589002475678},{"_id":"themes/light/layout/_partial/head.ejs","hash":"bdb65794b84b8242f0e4711059a2737f317587e9","modified":1589002475678},{"_id":"themes/light/layout/_partial/pagination.ejs","hash":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1589002475678},{"_id":"themes/light/layout/_partial/header.ejs","hash":"224ea7f0fccc29418583a5c59497a8ece0073301","modified":1589002475678},{"_id":"themes/light/layout/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1589002475679},{"_id":"themes/light/layout/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1589002475679},{"_id":"themes/light/layout/_widget/search.ejs","hash":"f3600ade452f70bd49cb8cf53f3b6e59015f2ce3","modified":1589002475679},{"_id":"themes/light/layout/_widget/recent_posts.ejs","hash":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1589002475679},{"_id":"themes/light/layout/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1589002475679},{"_id":"themes/light/layout/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1589002475679},{"_id":"themes/light/source/css/style.styl","hash":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1589002475683},{"_id":"themes/light/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589002475684},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589002475684},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1589002475684},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1589002475685},{"_id":"themes/light/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1589002475685},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1589002475685},{"_id":"themes/light/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589002475680},{"_id":"themes/light/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1589002475685},{"_id":"themes/light/layout/_partial/post/category.ejs","hash":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1589002475678},{"_id":"themes/light/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1589002475678},{"_id":"themes/light/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1589002475679},{"_id":"themes/light/layout/_partial/post/tag.ejs","hash":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1589002475679},{"_id":"themes/light/layout/_partial/post/title.ejs","hash":"ccc088edccd47a72caae9d162581bad9d2cb5da6","modified":1589002475679},{"_id":"themes/light/source/css/_base/layout.styl","hash":"1b58c21aa48a8f9f7f811af681ac182dd058e23d","modified":1589002475680},{"_id":"themes/light/source/css/_base/variable.styl","hash":"6f3ad13e49634dae8cd992bbd598f5ff0b39a816","modified":1589002475680},{"_id":"themes/light/source/css/_partial/archive.styl","hash":"072e9b8c5ee9acf95ac7cce9c34706d41e412229","modified":1589002475681},{"_id":"themes/light/source/css/_partial/article.styl","hash":"c40dea0a6035628dd299cee299d8a6d2abf20d8b","modified":1589002475681},{"_id":"themes/light/source/css/_partial/comment.styl","hash":"e7f8c085bfa8c26afc4b2fbc9f2092f4f07aef34","modified":1589002475681},{"_id":"themes/light/source/css/_partial/footer.styl","hash":"1757872dbdbd09295a625f13e356aa798a8bb308","modified":1589002475681},{"_id":"themes/light/source/css/_partial/header.styl","hash":"50d36fe0c803cbba69dd57493611466e4d72156e","modified":1589002475681},{"_id":"themes/light/source/css/_partial/index.styl","hash":"7a8c0ec6ab99a9f8e00c9687aca29d31752424a2","modified":1589002475681},{"_id":"themes/light/source/css/_partial/sidebar.styl","hash":"a8bf5237d7d2fba66988cfb85a3ae218be8709ae","modified":1589002475681},{"_id":"themes/light/source/css/_partial/syntax.styl","hash":"400335f01229ed02e62110ba90312adb78b84ff5","modified":1589002475681},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1589002475682},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1589002475683},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","hash":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1589002475682},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1589002475683},{"_id":"themes/hexo-theme-light/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1589003969140},{"_id":"themes/hexo-theme-light/README.md","hash":"42cce00e360ae6c8bd1019776ff3b0b974128fa1","modified":1589003969140},{"_id":"themes/hexo-theme-light/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1589003969140},{"_id":"themes/hexo-theme-light/_config.yml","hash":"54873f9af5e1d1c802fcd7c642c4187f1f04e6b9","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/de.yml","hash":"e076c7f2eb29ebcfb04d94861bf3063c4b08078c","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/default.yml","hash":"fd7397be7789b43c1c163ab4faf106318811c2a8","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/es.yml","hash":"de273af604b27812cfd4195e7b7f28ceff2734b3","modified":1589003969140},{"_id":"themes/hexo-theme-light/languages/ja.yml","hash":"1511143393fb86819a9d8685ee81c3bbf1e10b23","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/lt.yml","hash":"8826ef5b3911e094f8a118d8db981532d0919bb6","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/pl.yml","hash":"3f36d08e84a85651bf777cec0752193057c08430","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/ru.yml","hash":"35aadf8fdd28aaff8a1c8f50e80201dcf8ce0604","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/zh-CN.yml","hash":"ca0118e9081b54cc0fca8596660bd6acf4c0308f","modified":1589003969141},{"_id":"themes/hexo-theme-light/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1589003969141},{"_id":"themes/hexo-theme-light/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/layout.ejs","hash":"1b4ee853dcd80892ba971954641c0e283ddb2e6e","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/index.ejs","hash":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1589003969145},{"_id":"themes/hexo-theme-light/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1589003969145},{"_id":"themes/hexo-theme-light/layout/_partial/after_footer.ejs","hash":"ac0876ae4ec09e2f16969fea196adc66a29ea3b3","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/archive.ejs","hash":"7e4f7c2909b1b90241424ea2ff8e7b4761d8360f","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/article.ejs","hash":"b4479954cdaa33420e06ffce6ea8e05f48da2928","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/comment.ejs","hash":"be7d9849855f2bb31e626db88b49ac1d87446e21","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/facebook_comment.ejs","hash":"3fdc1d0ce9177825e7417635fbc545a35d528d04","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/footer.ejs","hash":"1deac5914b2fc93b271732fd4d5cbd0a6f78875f","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/google_analytics.ejs","hash":"7cf0d1f93051bda510d49dab7f684b9d7c6ba58f","modified":1589003969142},{"_id":"themes/hexo-theme-light/layout/_partial/head.ejs","hash":"bdb65794b84b8242f0e4711059a2737f317587e9","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/header.ejs","hash":"224ea7f0fccc29418583a5c59497a8ece0073301","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/pagination.ejs","hash":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/recent_posts.ejs","hash":"f17d2cb69034acabea4df54f301f80812e7b84a8","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/search.ejs","hash":"f3600ade452f70bd49cb8cf53f3b6e59015f2ce3","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1589003969144},{"_id":"themes/hexo-theme-light/layout/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1589003969144},{"_id":"themes/hexo-theme-light/source/css/style.styl","hash":"c03b2520e4a85b981e29516cadc0a365e6500e3d","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1589003969149},{"_id":"themes/hexo-theme-light/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1589003969150},{"_id":"themes/hexo-theme-light/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1589003969150},{"_id":"themes/hexo-theme-light/layout/_partial/post/category.ejs","hash":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/share.ejs","hash":"24c04b319f1b19e887c42db961b90a7e0ab26fdc","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/tag.ejs","hash":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1589003969143},{"_id":"themes/hexo-theme-light/layout/_partial/post/title.ejs","hash":"ccc088edccd47a72caae9d162581bad9d2cb5da6","modified":1589003969143},{"_id":"themes/hexo-theme-light/source/css/_partial/archive.styl","hash":"072e9b8c5ee9acf95ac7cce9c34706d41e412229","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/_partial/article.styl","hash":"c40dea0a6035628dd299cee299d8a6d2abf20d8b","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/_partial/comment.styl","hash":"e7f8c085bfa8c26afc4b2fbc9f2092f4f07aef34","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/footer.styl","hash":"1757872dbdbd09295a625f13e356aa798a8bb308","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/index.styl","hash":"7a8c0ec6ab99a9f8e00c9687aca29d31752424a2","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/header.styl","hash":"50d36fe0c803cbba69dd57493611466e4d72156e","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/syntax.styl","hash":"400335f01229ed02e62110ba90312adb78b84ff5","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_partial/sidebar.styl","hash":"a8bf5237d7d2fba66988cfb85a3ae218be8709ae","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/_base/layout.styl","hash":"1b58c21aa48a8f9f7f811af681ac182dd058e23d","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/_base/variable.styl","hash":"6f3ad13e49634dae8cd992bbd598f5ff0b39a816","modified":1589003969145},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1589003969146},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1589003969148},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1589003969147},{"_id":"themes/hexo-theme-light/source/css/font/fontawesome-webfont.svg","hash":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1589003969147},{"_id":"source/_posts/2020-05-09-1.md","hash":"cdc0f46dbda9c733981c1429d1eab59ed9d0ea60","modified":1589004957771},{"_id":"source/_posts/2020-05-09-2.md","hash":"898ddfdad18659eb431c173d311f274c2eb5bdf8","modified":1589005180704},{"_id":"source/_posts/ブログを開設しました.md","hash":"fb5c043509b1ca42dd9316d6bd6c511e51c9dfa1","modified":1589005494637},{"_id":"source/_posts/GCP無料枠でWordPressブログを運用する.md","hash":"82c9c4f2854a30499f3faa792adb7074868e3ed2","modified":1589005486082},{"_id":"source/_posts/C-で音声変換する.md","hash":"f56ffb957c5bbfd346baa5726a7f57ad7cd8ba78","modified":1589010080961},{"_id":"source/_posts/2019年の振り返り.md","hash":"0be25179ec4a75026f92719bf7fc38b391e2f5d1","modified":1589010080961},{"_id":"source/_posts/Processingから外部プログラム・他のスケッチを起動する.md","hash":"c3614e3664d73c56b00d0b95dcdceca32b0c282c","modified":1589010082441},{"_id":"source/_posts/Win2Dでお絵かきプログラミング.md","hash":"38af382b7e3ff2cde458651c42237c329d4decb9","modified":1589010336561},{"_id":"source/_posts/GTDを少しアレンジしたタスク管理.md","hash":"36848b33fae9aa2138f40972796f0b43cec48bff","modified":1589005871141},{"_id":"source/_posts/はとバス.md","hash":"bf49cd1cbb5f9475218a5364474f011862aeef72","modified":1589010080961},{"_id":"source/_posts/WordPressにはてなスターを設置してデザインを良くする.md","hash":"765dc544cc39b4167b9766016edf09789ef2159d","modified":1589009261258},{"_id":"source/_posts/ProcessingでSQLiteを扱う.md","hash":"f7ef12acddd4d41626cfad37ae9ad90f5843b6d7","modified":1589009289000},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1589011619473},{"_id":"themes/icarus/.eslintrc.json","hash":"43c7740158c8690242720b4ff7fa11426fc20c79","modified":1589011619473},{"_id":"themes/icarus/.gitignore","hash":"0ba474b25eb0ebad8ab5041b3990e27898069b49","modified":1589017655091},{"_id":"themes/icarus/.travis.yml","hash":"0a96b9f82de11bd524a74a3de9a32fd6cd6a6b47","modified":1589011619474},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"0a78b3eb68d41c22735df35447c392c0f3332ea5","modified":1589011619474},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1589011619474},{"_id":"themes/icarus/_config.yml","hash":"fa8644dcc98539ea658ebf928e99915568db7ed2","modified":1589620111689},{"_id":"themes/icarus/README.md","hash":"c948b354de7161e51f4f87e33393295051d7a7c3","modified":1589011619475},{"_id":"themes/icarus/package.json","hash":"9080de9f1223fe9906312a3f3b1096fe0eb82e38","modified":1589011619484},{"_id":"themes/icarus/.github/stale.yml","hash":"4771f82196ff95de48f9db4696ce316790f21865","modified":1589011619474},{"_id":"themes/icarus/include/config.js","hash":"13feb2c1ac64f5598f335985fb1ee4bc5e9389f1","modified":1589011619475},{"_id":"themes/icarus/include/dependency.js","hash":"3f84538fa2f528634a1f8254c49ab4c5ebfb19e7","modified":1589011619475},{"_id":"themes/icarus/include/register.js","hash":"90c55de6c114018e2ac517a2d469e2ea4cd193c5","modified":1589011619475},{"_id":"themes/icarus/languages/de.yml","hash":"79d769768780b9a72eb256ab61f217b8bdebf85b","modified":1589011619480},{"_id":"themes/icarus/languages/en.yml","hash":"792bc85571b0c16f591bb5455819793a02373017","modified":1589011619480},{"_id":"themes/icarus/languages/es.yml","hash":"2e59e579d393c881dcbb885516d93eeaf469cec2","modified":1589011619480},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1589011619480},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1589011619480},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1589011619480},{"_id":"themes/icarus/languages/ko.yml","hash":"e7ac736b604429adedd67f3ca6043201eff7b23b","modified":1589011619480},{"_id":"themes/icarus/languages/pl.yml","hash":"43f5447c38c9be2e1f5ce6181a0f97eeb437b059","modified":1589011619481},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1589011619481},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1589011619481},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1589011619481},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1589011619481},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"2f21370cb9aaa7bbe4f362618df450d7bc571a63","modified":1589011619481},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"9172121b0ec3d78861fa6ccdd6396cef90fabdc7","modified":1589011619481},{"_id":"themes/icarus/layout/archive.jsx","hash":"09c58b8e431445f1b40f2b19bc03ebc1a07a2a43","modified":1589011619481},{"_id":"themes/icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":1589011619481},{"_id":"themes/icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":1589011619481},{"_id":"themes/icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":1589011619483},{"_id":"themes/icarus/layout/layout.jsx","hash":"66c95ba388c7129b8fda7ccd8b15a43144ee07d0","modified":1589011619483},{"_id":"themes/icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1589011619483},{"_id":"themes/icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":1589011619484},{"_id":"themes/icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":1589011619484},{"_id":"themes/icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":1589011619484},{"_id":"themes/icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":1589011619485},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619482},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619483},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619483},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619484},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619484},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"e2426853cb623d500021011820bea4726341a3d2","modified":1589011619474},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"0cbf106d95bf9991d850671a9e804f74a1783caa","modified":1589011619474},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"001de87a96271fd7676fbf0fef090369369c2cc4","modified":1589011619474},{"_id":"themes/icarus/include/migration/head.js","hash":"cca7d3a828427cbdd5cbc6a93e501a4fea1c72fd","modified":1589011619475},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":1589011619475},{"_id":"themes/icarus/include/schema/config.json","hash":"f91dc103f4a95c870b4d6824dfe005289db5e309","modified":1589011619477},{"_id":"themes/icarus/include/style/article.styl","hash":"2dae2cbb64b2d8e85896a0223597049d79d8ca26","modified":1589084973333},{"_id":"themes/icarus/include/style/base.styl","hash":"ff0f72e17b9dda58f8c243a208fd1956d4d895fe","modified":1589414487205},{"_id":"themes/icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":1589011619479},{"_id":"themes/icarus/include/style/card.styl","hash":"86e307f8143649b3a6ad777ed1f01063e4de72fa","modified":1589086100706},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"44060ec764f12806bb67a6ae450e991c46adf7d0","modified":1589011619479},{"_id":"themes/icarus/include/style/donate.styl","hash":"acf06ddda9ae3f671f6237fbd059360f631a3ef7","modified":1589011619479},{"_id":"themes/icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":1589011619479},{"_id":"themes/icarus/include/style/helper.styl","hash":"f6fe487415914dc6eb1ce10f53b1ab64eeba07ed","modified":1589011619479},{"_id":"themes/icarus/include/style/navbar.styl","hash":"f56a6f524246ad2564ceec19dbba2ed04e347ba6","modified":1589085788970},{"_id":"themes/icarus/include/style/pagination.styl","hash":"748c4fa46a6e2ec73bda213bb966bb2ee840c095","modified":1589011619479},{"_id":"themes/icarus/include/style/plugin.styl","hash":"8c665dad9ad7ecd64a5f969eba244a73c66a03a9","modified":1589011619479},{"_id":"themes/icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":1589011619479},{"_id":"themes/icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":1589011619480},{"_id":"themes/icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":1589011619480},{"_id":"themes/icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":1589011619480},{"_id":"themes/icarus/layout/common/article.jsx","hash":"d1bd6fc9a46e336edd04be447a2d99d41ba924ad","modified":1589622867611},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":1589011619482},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":1589011619482},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"f0533a1767cbe11f47f96c0b07eb4b446f3374ce","modified":1589011619482},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"ada3968a846a3878009f1b5683346de09509297a","modified":1589011619482},{"_id":"themes/icarus/layout/common/head.jsx","hash":"96f528b30b4698536a82a754479cbcdd367c25e5","modified":1589621733551},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":1589011619482},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"677857a166ad8fd1fec74d869a056348bf2d6800","modified":1589011619482},{"_id":"themes/icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":1589011619483},{"_id":"themes/icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":1589011619483},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"689cf4a6b79337b11d1d56afa9dda09223a809a1","modified":1589011619483},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":1589011619483},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"54d5a7606e80f76f7492a690eb65d5b5e03b615a","modified":1589011619484},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"45d86813df61de5cc74932f07578033fe4b126f8","modified":1589086029006},{"_id":"themes/icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":1589011619485},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"4f67ae0b413c1b0286452d607ca646c4fe717f62","modified":1589011619485},{"_id":"themes/icarus/source/css/style.styl","hash":"be5d28ba5098e36483d21f94e4deb0bd2ec075e4","modified":1589011619485},{"_id":"themes/icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1589011619485},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1589011619485},{"_id":"themes/icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1589011619486},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1589011619486},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1589011619486},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"6bf0641cb69dffac97f69baea192d7fa3ab612cb","modified":1589011619487},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1589011619486},{"_id":"themes/icarus/source/img/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1589011619486},{"_id":"themes/icarus/source/js/animation.js","hash":"59a05568fd5718513792b0d48bcb4bcf7eaa20e8","modified":1589011619487},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"0f071e2331e39043529041322c4812bb13a3990d","modified":1589011619487},{"_id":"themes/icarus/source/js/main.js","hash":"9b8de03414c386a9933bbe4e9af2d1035938c872","modified":1589621886535},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619476},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619477},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619477},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619478},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1589011619478},{"_id":"themes/icarus/include/hexo/generator/category.js","hash":"d7e7779d5afd8d4e2b0cf9a15feed84c0ea42590","modified":1589011619475},{"_id":"themes/icarus/include/hexo/generator/insight.js","hash":"0af168e624af01c930b4c3aaecc3af2e2dc18871","modified":1589011619475},{"_id":"themes/icarus/include/schema/common/article.json","hash":"37704130789d44c313e03c9dacb809a57274c06f","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"bd30bd9ffc84e88e704384acdfcaab09019a744f","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"e6b655f5f4af8958efd23137e96de35426e01a77","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/head.json","hash":"49a2a8c0508bad9446868c3c05e7fa3250855af8","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"df708bc8a25d4eeec268969f014ad99f9e74ef7a","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"0217f2af8a4d6731652a3a49b5801bbfe0e73fff","modified":1589011619476},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":1589011619477},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"d000b4d1d09bdd64756265aa4cd2ea980ab7ddc7","modified":1589011619477},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":1589011619478},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":1589011619478},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":1589011619478},{"_id":"themes/icarus/source/.DS_Store","hash":"8983992a301632f377142eb0de9b7125c7a7c97a","modified":1589012233278},{"_id":"source/_posts/2019-10-12-ブログを開設しました.md","hash":"cfd7976a22b1fa1c37da159aec6f847fde9ce273","modified":1589084008761},{"_id":"source/_posts/2019-10-13-GCP無料枠でWordPressブログを運用する.md","hash":"7116d19edb94551bc82fe0b0dd0744ff9608734e","modified":1589083950421},{"_id":"source/_posts/2019-10-21-GTDを少しアレンジしたタスク管理.md","hash":"0cb9395ff7311c8eb10f1dfc174d1da50ec27179","modified":1589083384238},{"_id":"source/_posts/2019-10-30-ProcessingでSQLiteを扱う.md","hash":"5ee617047d873c6759a8433cbeacb3f87949461e","modified":1589084023511},{"_id":"source/_posts/2019-10-30-Win2Dでお絵かきプログラミング.md","hash":"f30c4c6a94ab4800820e77ff785b9c7ccdabc411","modified":1589083455199},{"_id":"source/_posts/2019-10-31-Processingから外部プログラム・他のスケッチを起動する.md","hash":"58b07eed2cf36514b612cf7c436a5ef7000e2510","modified":1589083207642},{"_id":"source/_posts/2019-10-31-WordPressにはてなスターを設置してデザインを良くする.md","hash":"26f7baa4d8b1c6e153cea7e6d1867513184c0101","modified":1589614866085},{"_id":"source/_posts/2019-11-01-C-で音声変換する.md","hash":"da5ab3680d477def615fcbc639620621b20365ce","modified":1589083226350},{"_id":"source/_posts/2019-11-02-はとバス.md","hash":"0b2a57ba83886cf17918628ef81c8733a16eaf30","modified":1589089410631},{"_id":"source/_posts/2020-01-01-2019年の振り返り.md","hash":"cca78a100ab81eab8f474ae5018c8ec3626112e1","modified":1589475470956},{"_id":"themes/icarus/include/schema/search/insight.json","hash":"943fc0d382532e63ced2a578ee3d7f5e0de53b2d","modified":1589017529103},{"_id":"themes/icarus/include/schema/search/algolia.json","hash":"48d6ebc40b90c4651eafa9bdc91962dc70e3faa3","modified":1589017529103},{"_id":"themes/icarus/include/hexo/filter/stylus.js","hash":"b06dfdf3b2fb36daa7ba4534574835da4ea6396f","modified":1589017529102},{"_id":"themes/icarus/source/img/favicon.png","hash":"3fae704298fc089e9c5e719aabb9bf609891ec0c","modified":1589086367665},{"_id":"source/thumbnails/hatobas.jpg","hash":"ca1346c61bd8a97dcf910b548016ef7f8c50bd97","modified":1589087173818},{"_id":"source/thumbnails/hatobus.jpg","hash":"ca1346c61bd8a97dcf910b548016ef7f8c50bd97","modified":1589087188498},{"_id":"source/img/favicon.png","hash":"3fae704298fc089e9c5e719aabb9bf609891ec0c","modified":1589095386416},{"_id":"source/img/og_image.jpg","hash":"5f28dad9e0c12444e214017cfbdd8d9c14ad53a8","modified":1589095445671},{"_id":"source/_posts/2019-10-28-ProcessingでSQLiteを扱う.md","hash":"5e5e656b2b0a80e7749d86b6a2179f73c38020a3","modified":1589157401659},{"_id":"source/_posts/2019-10-30-Processingから外部プログラム・他のスケッチを起動する.md","hash":"2e036008e55875a6bad1ba1c1724fb3a29d5d5c9","modified":1589157421226},{"_id":"source/_posts/2019-10-29-Win2Dでお絵かきプログラミング.md","hash":"ab25e080b83639e6ed214fa38b302471a9829e24","modified":1589157412401},{"_id":"source/_posts/2020-05-14-2020年度上半期の目標（エンジニア編）.md","hash":"ae8e580d7c4bf1b037508f83b9f4460a31a38879","modified":1589478299062},{"_id":"public/js/algolia.js","hash":"cbfc4355b23d84d2f0dc622e069b3f06c0d10f70","modified":1589415498744},{"_id":"public/js/google_cse.js","hash":"55e7250f4a12bf15220ba5d1d49c91fda5fbd3b4","modified":1589415498744},{"_id":"public/js/insight.js","hash":"78b74ae77f1e854089ccabd871d581dc391fcc29","modified":1589415498744},{"_id":"public/content.json","hash":"6426e04cbaa84afc83196144ec5580e9874b5b08","modified":1589615948954},{"_id":"public/archives/2019/11/index.html","hash":"fb828aa2f4937997ddb68b96f2b1cd690d788cb9","modified":1589616291460},{"_id":"public/archives/2020/01/index.html","hash":"4c8a469f17d63c54e790b8733f6478e07ce9fbf9","modified":1589616291460},{"_id":"public/categories/ブログ運営/index.html","hash":"6127529998feb19efaa7d22c64c53d9250a80420","modified":1589616291460},{"_id":"public/categories/ライフハック/index.html","hash":"d70faafdda6fecb8d3c9af70ddbaf41b1527eaa8","modified":1589616291460},{"_id":"public/categories/ポエム/index.html","hash":"91abf7da87ea0840bbb50cf5a0e7af64ba5964f5","modified":1589415498744},{"_id":"public/categories/イベント/index.html","hash":"c10fe302e3473cf42caf038d973925d7c91da5f5","modified":1589616291460},{"_id":"public/tags/Processing/index.html","hash":"92e49b83fd23f30db8082ac084787393519adc6f","modified":1589616291460},{"_id":"public/tags/はてなスター/index.html","hash":"78634e66764d5f0f346cfca159cd4cab8dfe3e6f","modified":1589616291460},{"_id":"public/tags/はとバスツアー/index.html","hash":"1cfc0fc7da87b16aa02d47d3dc7e735088f4ca3c","modified":1589616291460},{"_id":"public/tags/タスク管理/index.html","hash":"b84f3df08dec518b23bb4b38109e478363594e8e","modified":1589616291460},{"_id":"public/tags/GCP/index.html","hash":"5647712a24a0b5d532397f1dde41aabc034adf76","modified":1589616291460},{"_id":"public/tags/Win2D/index.html","hash":"f49905cf97c6f2688b559492b4f9e8be455e38c1","modified":1589616291460},{"_id":"public/categories/index.html","hash":"8bf221872b512dd3e4de6ff7af29dbb02a706931","modified":1589616291460},{"_id":"public/blog/2020/01/01/index.html","hash":"d2ba98cdf61d4e2b3892ae232c7ade2047e3f139","modified":1589616291460},{"_id":"public/blog/2019/11/02/index.html","hash":"3cab1efe7e4ccf6ae910172f4f42e4513b2be14f","modified":1589616291460},{"_id":"public/blog/2019/11/01/index.html","hash":"57209cfca0183ec343d4f892d00cb6078155a659","modified":1589616291460},{"_id":"public/blog/2019/10/31/index.html","hash":"9e744523b0c3506e7d505d21b6381ad21c2eb9be","modified":1589616291460},{"_id":"public/blog/2019/10/30/index.html","hash":"86bff0c39af664e3d13fa7481427ac74a0300278","modified":1589616291460},{"_id":"public/blog/2019/10/21/index.html","hash":"2cdfa153d5a90df4e8cf3f1897b585f54487c9d2","modified":1589616291460},{"_id":"public/blog/2019/10/13/index.html","hash":"c94aafeeec55c89e3ab98bd5d28362e8bdf625ee","modified":1589616291460},{"_id":"public/blog/2019/10/12/index.html","hash":"1aec4bae11e6d5ee6170c5c76148d28b8bad2622","modified":1589616291460},{"_id":"public/archives/2019/index.html","hash":"b2dd64a896ee3fd3ec1161551c05fee7b7903924","modified":1589616291460},{"_id":"public/archives/2019/10/index.html","hash":"d5b18aea6cb85b5bfdd1b4d8c6cb554c3e0a816d","modified":1589616291460},{"_id":"public/categories/技術ネタ/index.html","hash":"47509eeaa090d4aa940a6a1bc7d72e5b03d92d96","modified":1589616291460},{"_id":"public/tags/C/index.html","hash":"aeaa618a3f059973b40b715a26be500b97f810dc","modified":1589616291460},{"_id":"public/tags/WordPress/index.html","hash":"f5a2eea48781fff9133c254b7a1b220640af7af8","modified":1589616291460},{"_id":"public/archives/page/2/index.html","hash":"350049e65bdf5b780006bfba94a8b646afe9abd2","modified":1589616291460},{"_id":"public/page/2/index.html","hash":"d246bd9fdf37336b24dd8fc730e42390fc5b5ccc","modified":1589616291460},{"_id":"public/tags/index.html","hash":"e59f15daa0cdbd7e8ccc5996afd57dee00a80a3e","modified":1589616291460},{"_id":"public/blog/2020/05/14/index.html","hash":"a422a8decb6469d064453ca48a3732b9ba7a83c1","modified":1589616291460},{"_id":"public/blog/2019/10/29/index.html","hash":"5d4852414fef704537eb34d6590267adc3e306c9","modified":1589616291460},{"_id":"public/blog/2019/10/28/index.html","hash":"d9e91230f979f675932b75eee98028b69b260bde","modified":1589616291460},{"_id":"public/img/og_image.JPG","hash":"5f28dad9e0c12444e214017cfbdd8d9c14ad53a8","modified":1589415498744},{"_id":"source/.DS_Store","hash":"ffe77e181968566b7427396375a37d3e22d139c2","modified":1589614710996},{"_id":"source/_posts/2020-05-16-正規表現でテキストファイルを分割する.md","hash":"9683bdb3b97cdb8eff098127120975e94118da1d","modified":1589609198924},{"_id":"source/thumbnails/2020-5-14.jpg","hash":"b23ab34ec406dc6df9108971ea0937c301e05b96","modified":1589478272903},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1589614270681},{"_id":"source/_posts/2013-12-22-テストにかえて.md","hash":"06a7e70ef0e48591319faa73c8d12c6f7596bb4a","modified":1589614377418},{"_id":"source/_posts/2013-12-23-Processingのすゝめ.md","hash":"d96f50e0d7f2f40db65ad092ac4bb0e56502686f","modified":1589614380516},{"_id":"source/_posts/2013-12-24-Processingをはじめてみる.md","hash":"631bb3f69cfba405185ea8031abb13b6f5211548","modified":1589614866085},{"_id":"source/_posts/2013-12-25-Processingでスケッチ.md","hash":"5c53f0815cb04687598297a58ffed739be2c4fb9","modified":1589614866085},{"_id":"source/_posts/2013-12-26-Processingでスケッチ（２）.md","hash":"6666b16de93f7279e7c5c3f37a7232ca4d9b36fd","modified":1589614866083},{"_id":"source/_posts/2013-12-27-Processingでスケッチ（３）.md","hash":"38e30a24624379d22d6d0ea7cbdd11a7262d5ffe","modified":1589614866084},{"_id":"source/_posts/2013-12-28-Processing setup,draw とマウス.md","hash":"9e17bb788ca49ae43afa62203514921b6c290e88","modified":1589614866085},{"_id":"source/_posts/2013-12-29-変数とは.md","hash":"55d76b3a5d7da45f22b94be43a7741327b6682bc","modified":1589614563717},{"_id":"source/_posts/2013-12-30-プログラミングにおける演算・条件・繰り返し.md","hash":"956b4227737f4c2cf65a6a421e931dd478dcc89d","modified":1589614402646},{"_id":"source/_posts/2013-12-31-Processingで動きのあるスケッチ.md","hash":"62bb6a4deedf99e3e604e74d20dc6966679ab732","modified":1589614866085},{"_id":"source/_posts/2014-01-01-配列とは.md","hash":"dfc666f17232ed27b55c5a336a510fdd38a0a3b9","modified":1589614407342},{"_id":"source/_posts/2014-01-02-Processing mousePressedとkeyPressed.md","hash":"30c5c10781a28bf472afe019fa5b8d2d71a28593","modified":1589614409441},{"_id":"source/_posts/2014-01-04-Processing 便利な機能を使う.md","hash":"669f5f463cd367e939370d79b20b87400ec3321a","modified":1589614866085},{"_id":"source/_posts/2014-01-03-Processing　関数をつくる.md","hash":"57a44ac5d96c55190d400aa65ae58febaa35012b","modified":1589614413496},{"_id":"source/_posts/2014-02-24-三角関数とは.md","hash":"5d419e12ba547a8255dc26115aec3846f12f2644","modified":1589614420783},{"_id":"source/_posts/2014-01-26-Processing 3Dを使ってみる.md","hash":"b39f22cbf3ea27edce71ff5eabac877129c8ef12","modified":1589614418714},{"_id":"source/_posts/2014-07-12-創造的生活者シンポジウムを見に行った.md","hash":"8046527c73ba6d535d33f75be880c17964d41f4c","modified":1589614866083},{"_id":"source/_posts/2014-07-07-生存報告.md","hash":"b69a8f0b60a66735b377357145177a661cb3e213","modified":1589614423811},{"_id":"source/_posts/2014-07-13-Processingで複数のwebカメラを扱う.md","hash":"0eee1273d6e693b8103b88f2206ed5ccad8cc161","modified":1589614428049},{"_id":"source/_posts/2014-07-15-Processingでmidiを扱う.md","hash":"948aaf94cc648983c690e8a6533f1977b81d7ba8","modified":1589614866083},{"_id":"source/_posts/2014-07-16-Processingで画像処理をする.md","hash":"8ce797bebbf6781eae311833a1fd78d0a448388e","modified":1589614866085},{"_id":"source/_posts/2014-08-19-ケルト音楽勉強中.md","hash":"3d09cc017b0a2c470d2dd9788a5850a6d31bf605","modified":1589614439071},{"_id":"source/_posts/2014-08-31-Processingで画像処理をする - クロスプロセス.md","hash":"00d68644d43fe537b984edab716f70d3ffe3d9be","modified":1589614866085},{"_id":"source/_posts/2014-09-20-Hack Uに参加してきた.md","hash":"59c91725f37a1b0d479264b16872a92147f46ff4","modified":1589614443321},{"_id":"source/_posts/2014-12-18-ProcessingでHSLを扱う.md","hash":"457bd175efa359579406cf9d6f9d6359e3be2be9","modified":1589614445188},{"_id":"source/_posts/2014-12-21-Genymotionを起動するとエラーが出る.md","hash":"55b4362b3701cd382d679ca51a5ec655e9769495","modified":1589614866085},{"_id":"source/_posts/2014-12-27-2014年を振り返って.md","hash":"d8e70e9c19a4c22ab379777d185c20accc218c72","modified":1589614449125},{"_id":"source/_posts/2015-03-29-本配属が決まったので.md","hash":"f2e4a5af0e785ac829b418fcb24cc5bfca525c08","modified":1589614450968},{"_id":"source/_posts/2015-03-30-Wordpressのパーマリンク変更でリンク切れになった.md","hash":"3f178c6c9fd8efbdcda9dce38379262e506f3206","modified":1589614866085},{"_id":"source/_posts/2015-04-29-ICEcoderを導入したら便利だった.md","hash":"4b8d29f5a39afa6b109e7cfea40501992f360525","modified":1589614866083},{"_id":"source/_posts/2015-04-30-ニコニコ超会議に参加してきた.md","hash":"80b82c94af6fa29c13e8b31d392150573ed4da2e","modified":1589614866085},{"_id":"source/_posts/2015-05-19-日記をはじめた.md","hash":"d951145ce4a22c766afc1145daadeb53dcc192aa","modified":1589614460720},{"_id":"source/_posts/2015-05-21-PHP用にcurlをインストールする.md","hash":"438cdd59a3a246dcf66e6ad1891790f87c8bd089","modified":1589614866083},{"_id":"source/_posts/2015-05-22-Ubuntu 14.04にownCloudをインストールする.md","hash":"3f744cd85301aa731ae429c2c9fcbd71fcb80add","modified":1589614548893},{"_id":"source/_posts/2015-05-23-突然何もしてないのにインターネットに繋がらなくなった.md","hash":"1ec499f5a215a202929adc05128282c3ba1a61f7","modified":1589614470000},{"_id":"source/_posts/2015-05-24相関図作成ツールが便利で簡単だった.md","hash":"e1f8b30c82b44064c2076ea6baf706586e2e6765","modified":1589614866085},{"_id":"source/_posts/2015-08-04-近況.md","hash":"9622c6514dfe01ee5ae4b21e0981f4c489c6495f","modified":1589614866085},{"_id":"source/_posts/2015-08-11-「動きのカガク展」に行ってきた.md","hash":"70895ce2d353c6b3845f2eaf99675fd4998493be","modified":1589614866085},{"_id":"source/_posts/2015-10-01-ownCloud8.1.3の更新時にエラーが出る.md","hash":"424162739672751b3fb8e50413f22ea6ef55f30c","modified":1589614479285},{"_id":"source/_posts/2015-11-01-WordPressからはてなブログにお引越しした.md","hash":"682723a7fa43a3f71b06b003fb23e451885c4b2e","modified":1589614481459},{"_id":"source/_posts/2015-11-03-Texを使ってみた.md","hash":"78804c98b3b637d14b9e37d03b9c1a3183f16a74","modified":1589614866085},{"_id":"source/_posts/2015-11-04-Windows10でdockerやろうとしてハマった.md","hash":"25e1411cdc4043ee94366707a2640bb31fdd7de8","modified":1589614866083},{"_id":"source/_posts/2016-02-29-気が付いたらクラウド依存になっていた.md","hash":"92b971d1ef7e5caf7ffb4e2fdf8e186198877177","modified":1589614487958},{"_id":"source/_posts/2016-03-27-iPhone+SoftbankからAndroid+OCNに変えた.md","hash":"305759146fbe847fd1da95c50453d3cde1fb4624","modified":1589614866083},{"_id":"source/_posts/2016-03-31-2015年度を振り返って.md","hash":"4592aca2a33f401946f73d237046735dbf8181c9","modified":1589614492377},{"_id":"source/_posts/2016-07-10-W32TeXとTeXstudioでWindowsにTeX環境を構築する.md","hash":"def9a599dc253faf3967db038552e02f294c4def","modified":1589614866083},{"_id":"source/_posts/2016-08-05-MinecraftサーバのログをSlackに流す.md","hash":"604646d3d5298155848e958d4b3750bd25f78115","modified":1589614866083},{"_id":"source/_posts/2016-08-12-Evernoteからの移行先について考えた.md","hash":"3e06c9d8a05c0dfab1fb303c759cfff616bb61ac","modified":1589614500519},{"_id":"source/_posts/2016-08-21-シン・ゴジラを見てきた.md","hash":"460ebd2b5d1ac4e346cf0965b5acaa68831d04db","modified":1589614866085},{"_id":"source/_posts/2019-11-01-C#で音声変換する.md","hash":"da5ab3680d477def615fcbc639620621b20365ce","modified":1589083226350},{"_id":"source/_posts/2020-05-16-500日-のサマー感想.md","hash":"790e51be1c88097b168faa75dd4515bddb01ceb1","modified":1589615424567},{"_id":"public/tag-sitemap.xml","hash":"2464d9754367487d9ded29d3471e972b456a596d","modified":1589615948954},{"_id":"public/sitemap.xml","hash":"63a04ad4d570fb9ac7c2e92c8c4567e612ca0af9","modified":1589615948954},{"_id":"public/post-sitemap.xml","hash":"81023bff92707d7fabc4388812624984e9da7667","modified":1589615948954},{"_id":"public/category-sitemap.xml","hash":"219688cdbb37d244763b4cfe65d260507b00e33d","modified":1589615948954},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1589615948954},{"_id":"public/blog/2020/05/16/index.html","hash":"cfc67e0e281bdd1011efb793b887ff52e0c5261b","modified":1589616291460},{"_id":"public/blog/2016/08/21/index.html","hash":"259fe954d8a0a3a2d3e08d8d0e502a4a7c4d6652","modified":1589616291460},{"_id":"public/blog/2016/08/12/index.html","hash":"0ad7f97ca62f2e3ce1c72d43df401411ded98290","modified":1589616291460},{"_id":"public/blog/2016/08/05/index.html","hash":"d764ff94ee647cc6bdc43f8728e84fe7171ac45b","modified":1589616291460},{"_id":"public/blog/2016/07/10/index.html","hash":"31bbb430b36878e8869b66454e0ed786697517b4","modified":1589616291460},{"_id":"public/blog/2016/03/27/index.html","hash":"95846b542abd67f156dbd67d1756dad53777f717","modified":1589616291460},{"_id":"public/blog/2016/03/31/index.html","hash":"19245798c922de1b1d3a6e4888da884d06c6efcf","modified":1589616291460},{"_id":"public/blog/2016/02/29/index.html","hash":"c042fcc2a30dd30273a700aa0ed0827ba3211527","modified":1589616291460},{"_id":"public/blog/2015/11/03/index.html","hash":"a120c226291e0a3bf6a7b992f10817d973e9650c","modified":1589616291460},{"_id":"public/blog/2015/11/04/index.html","hash":"e875a95591ae5b6f839a6afaf2458df2d9ae5421","modified":1589616291460},{"_id":"public/blog/2015/11/01/index.html","hash":"d36f5b7f27720d0d9276849f457fef0ecc44761c","modified":1589616291460},{"_id":"public/blog/2015/08/04/index.html","hash":"c06753f3df26f02720a233f927db9e719cbbc901","modified":1589616291460},{"_id":"public/blog/2015/08/11/index.html","hash":"43ac3180d2da1b6c7bf8242bdf1b112035da6c19","modified":1589616291460},{"_id":"public/blog/2015/10/01/index.html","hash":"441f2e75212927afadea08b0bd799f26a3fa3d3e","modified":1589616291460},{"_id":"public/blog/2015/05/23/index.html","hash":"1fb6453a1afdcf636917bcb4d0e63100e66013f7","modified":1589616291460},{"_id":"public/blog/2015/05/24/index.html","hash":"5a9d4dd8856d9b94ffdaa1c76545b2dc1cd22d2f","modified":1589616291460},{"_id":"public/blog/2015/05/22/index.html","hash":"ad7acdb831871d3db972aff09ce009005f26dc0b","modified":1589616291460},{"_id":"public/blog/2015/05/21/index.html","hash":"20693ba3a8b6c5b5ee47140cee0b87ed33dda96a","modified":1589616291460},{"_id":"public/blog/2015/05/19/index.html","hash":"c14e29f477a8487d489cc82baa0e6b2796b04c5a","modified":1589616291460},{"_id":"public/blog/2015/04/30/index.html","hash":"b0aabfd5d8eef81b7638851a69e7a41aac9dcc5c","modified":1589616291460},{"_id":"public/blog/2015/04/29/index.html","hash":"13878feb21c1c8ea4450cafb6563ed990c17f508","modified":1589616291460},{"_id":"public/blog/2015/03/30/index.html","hash":"bf57736f110265a464a62ce80218742f7d7667ed","modified":1589616291460},{"_id":"public/blog/2015/03/29/index.html","hash":"7ce9318736f0994c92da81036f942d0879a01aff","modified":1589616291460},{"_id":"public/blog/2014/12/27/index.html","hash":"9e4cc4cfadde17b3f3bbfbe7dd7d2cf804619996","modified":1589616291460},{"_id":"public/blog/2014/12/18/index.html","hash":"65456ebc25128e7d7afa12782eeb428657729f7b","modified":1589616291460},{"_id":"public/blog/2014/12/21/index.html","hash":"5d5dc7139742ca312e22681e8f764ad4c3488fe4","modified":1589616291460},{"_id":"public/blog/2014/09/20/index.html","hash":"0beea62029a74d0f660b0502ee33cd421b2a4635","modified":1589616291460},{"_id":"public/blog/2014/08/31/index.html","hash":"8a3c24cc7ace6e77487b679f3ee931db870b4438","modified":1589616291460},{"_id":"public/blog/2014/08/19/index.html","hash":"be1ecf0f2045af3fab33d77da827876b61742feb","modified":1589616291460},{"_id":"public/blog/2014/07/16/index.html","hash":"8d386e1501e08ef04a38cdc7d611a7162e217810","modified":1589616291460},{"_id":"public/blog/2014/07/15/index.html","hash":"eb2ce95715b4367f3b4152c04b67e6080a321d93","modified":1589616291460},{"_id":"public/blog/2014/07/13/index.html","hash":"01a1414d855bc8b3a7f66d9fdd3cf08200c63b9a","modified":1589616291460},{"_id":"public/blog/2014/07/12/index.html","hash":"9f436e5a347e7a30b7e289b8a5589137fd4dd867","modified":1589616291460},{"_id":"public/blog/2014/07/07/index.html","hash":"0d1f0d7bdb2f4c3d0a6a401f898b6826d20746a1","modified":1589616291460},{"_id":"public/blog/2014/02/24/index.html","hash":"558906e7ea13bbaace9556e6c2869d6886625455","modified":1589616291460},{"_id":"public/blog/2014/01/26/index.html","hash":"733ef15809781ebf5f9c524d3706f46f76aaed88","modified":1589616291460},{"_id":"public/blog/2014/01/03/index.html","hash":"fbe645c064ccd5a9284be6b6d86bd2d0f516bcc9","modified":1589616291460},{"_id":"public/blog/2014/01/02/index.html","hash":"40a66e5b10d1b79f0268670970405a30a498dcfd","modified":1589616291460},{"_id":"public/blog/2014/01/01/index.html","hash":"2a9e188ae8a4b645a367ff5456c5dbba531549f1","modified":1589616291460},{"_id":"public/blog/2013/12/31/index.html","hash":"ffa6e11f83138eafd5f28992452175a96dfec1aa","modified":1589616291460},{"_id":"public/blog/2013/12/30/index.html","hash":"5168dbf14f449037d479792bda87f3cbb871caaa","modified":1589616291460},{"_id":"public/blog/2013/12/29/index.html","hash":"63f9b7ad7a14fcac90792cc6ae132a523ac03bfb","modified":1589616291460},{"_id":"public/blog/2013/12/28/index.html","hash":"f2545efb94ace129a423baf8fbb3d0bd75bf5e35","modified":1589616291460},{"_id":"public/blog/2013/12/27/index.html","hash":"50873b4b901e1380875292525c48cf54e58ca848","modified":1589616291460},{"_id":"public/blog/2013/12/26/index.html","hash":"da9a55914dafc821f51fff97222b32ed9c10b0d2","modified":1589616291460},{"_id":"public/blog/2013/12/25/index.html","hash":"1a880a6f3d55b4fb50f2cf3f248c6d1f69e42ac5","modified":1589616291460},{"_id":"public/blog/2013/12/24/index.html","hash":"369de5bb7561adda06eb6513fe745272eaaa7b2e","modified":1589616291460},{"_id":"public/blog/2013/12/23/index.html","hash":"0a779e9bba90e55ddb570989f7a68eedba91261e","modified":1589616291460},{"_id":"public/blog/2013/12/22/index.html","hash":"a36005f558186c980ec96a0d4b10c1ee5130a6b0","modified":1589616291460},{"_id":"public/categories/日記/index.html","hash":"83d0a51bb619c719ecbfe274c2746b62560773c6","modified":1589616291460},{"_id":"public/categories/日記/page/2/index.html","hash":"bdf80479f9c50dbf73003679dc1541c12ccb4a64","modified":1589616291460},{"_id":"public/categories/自己紹介/index.html","hash":"7a9d107afee3c646b60c7abadc0699ddcef8cf3b","modified":1589616291460},{"_id":"public/categories/Processing/index.html","hash":"1face263902e059c24da3e39649617e7a7f7f097","modified":1589616291460},{"_id":"public/categories/Processing/page/2/index.html","hash":"5d7b71c101a76c776f6a200b321fe9bf910be101","modified":1589616291460},{"_id":"public/categories/プログラミング一般/index.html","hash":"f664ceea5abcce9017cbbec9196f3718f240aedc","modified":1589616291460},{"_id":"public/categories/Music/index.html","hash":"466ac3ee259a3ef6342d62f9b76a3d25c009cc64","modified":1589616291460},{"_id":"public/categories/Android/index.html","hash":"e23562df20ce5dc94f60280bceb706830e2cdf9d","modified":1589616291460},{"_id":"public/categories/Wordpress/index.html","hash":"0a0ddae8cb8d2fe68d89c75295109dd73d8e2074","modified":1589616291460},{"_id":"public/categories/OSS/index.html","hash":"f0c2367cd6b3e352ab684e2b1105492d0e5fd9d5","modified":1589616291460},{"_id":"public/categories/PHP/index.html","hash":"522fdab16de4360592a4821c10a80a8317c438d5","modified":1589616291460},{"_id":"public/categories/ownCloud/index.html","hash":"1c7208fc478e909cedbb4bb8db7213fe3d50aa54","modified":1589616291460},{"_id":"public/categories/Tex/index.html","hash":"75f1e74f63f5736b81de1c8db125f8e711c19fd7","modified":1589616291460},{"_id":"public/categories/数学/index.html","hash":"7e562470b6cd10c6f68c4d617e7e4f71372e9040","modified":1589616291460},{"_id":"public/archives/page/3/index.html","hash":"235b46fc10fb06e37e7e6fcb0fccee0876e7ca4f","modified":1589616291460},{"_id":"public/archives/page/4/index.html","hash":"a13be38f9351dafec49bf0bde0e1015b791482ac","modified":1589616291460},{"_id":"public/archives/page/5/index.html","hash":"9c809b4ab8aa7e9752c7d35d5458534c558eca93","modified":1589616291460},{"_id":"public/archives/page/6/index.html","hash":"183ee6ffd8d4187f569f438f1b77d851eefec650","modified":1589616291460},{"_id":"public/archives/page/7/index.html","hash":"45fe537f088cdeb41636299618d03ae72986bbf4","modified":1589616291460},{"_id":"public/archives/2013/index.html","hash":"f1377cb902f12bfba994d70008e5b1ea91b1b79e","modified":1589616291460},{"_id":"public/archives/2013/12/index.html","hash":"046254218977ef3cdfb2bf6dda2248202899eb26","modified":1589616291460},{"_id":"public/archives/2014/index.html","hash":"258d55b2fd3e396c181b8b22ffdb03e14f5dcb43","modified":1589616291460},{"_id":"public/archives/2014/page/2/index.html","hash":"deb029432cef8eef716612d32645fa21b57beb23","modified":1589616291460},{"_id":"public/archives/2014/01/index.html","hash":"6dec7627abab84baa432e109318db6f6c314c682","modified":1589616291460},{"_id":"public/archives/2014/02/index.html","hash":"3aabe1e2b98ae3eb15d30bb75e0a6219f909420f","modified":1589616291460},{"_id":"public/archives/2014/07/index.html","hash":"3359b4a343e8f6782ddd2895389ab63995945a9e","modified":1589616291460},{"_id":"public/archives/2014/08/index.html","hash":"d4c7e4cb355e9ee4f4012f76da1cf4362bd13885","modified":1589616291460},{"_id":"public/archives/2014/09/index.html","hash":"0a532cd537c41421ab530bd13cb9ad953c2defa9","modified":1589616291460},{"_id":"public/archives/2014/12/index.html","hash":"6d815401e18fca9c343a2ee700e394e8b264fd7d","modified":1589616291460},{"_id":"public/archives/2015/index.html","hash":"fd5ce77d19889d1772f38e952b6c634a917e9bbb","modified":1589616291460},{"_id":"public/archives/2015/page/2/index.html","hash":"aa20bc41bb370c3d7af200f662ebf912ff56e5fc","modified":1589616291460},{"_id":"public/archives/2015/03/index.html","hash":"bccee9f560db603535e7b8efb83a91713b0f58b5","modified":1589616291460},{"_id":"public/archives/2015/04/index.html","hash":"7d2b3368e83c2baa8b25c7a35f5dafff264fd360","modified":1589616291460},{"_id":"public/archives/2015/05/index.html","hash":"80fe16d4ab54321362aaa5bbf0341652ce80de89","modified":1589616291460},{"_id":"public/archives/2015/08/index.html","hash":"a4106c1dd4cc1f1bd0cd4ac1ac80963587d905b7","modified":1589616291460},{"_id":"public/archives/2015/10/index.html","hash":"e4cef54fa93840eb9bd6552caab85bc3c2f1a744","modified":1589616291460},{"_id":"public/archives/2015/11/index.html","hash":"cde2aa4d7eea1e7464e2a3faaa0169435b6ea5df","modified":1589616291460},{"_id":"public/archives/2016/index.html","hash":"ccfbc5440f9566468d4e31386c19d6d256af70d9","modified":1589616291460},{"_id":"public/archives/2016/02/index.html","hash":"4288992f48b75ccc82be391d8c91e77d601d611a","modified":1589616291460},{"_id":"public/archives/2016/03/index.html","hash":"50029a01a5c4b3b845761cc05cfe319133af46e7","modified":1589616291460},{"_id":"public/archives/2016/07/index.html","hash":"e7c4925456b979ec039c64721fc5859e18827f2a","modified":1589616291460},{"_id":"public/archives/2016/08/index.html","hash":"d862d8c69813a34c62412089bd3190c0afb9bc39","modified":1589616291460},{"_id":"public/page/3/index.html","hash":"22fe66959b845f091a126206d8a66c188de0a2d7","modified":1589616291460},{"_id":"public/page/4/index.html","hash":"48a9d7ff0c639351efc768496a961e403670a2b2","modified":1589616291460},{"_id":"public/page/5/index.html","hash":"c4c897848c200af4cffdb0d23cfdbff752cac8e8","modified":1589616291460},{"_id":"public/page/7/index.html","hash":"a94c154785aa25414841a7e55245764b37f8d7fd","modified":1589616291460},{"_id":"public/page/6/index.html","hash":"b559e6261b91b784e16d7cdaf8b173988ec99855","modified":1589616291460},{"_id":"public/tags/ownCloud/index.html","hash":"b288ee908a393ca7c172132950ac3a9dd52f35fd","modified":1589616291460},{"_id":"public/tags/プログラミング一般/index.html","hash":"c5c5a11efd22e9a38d080ad7308f9bdcd82cb4e9","modified":1589616291460},{"_id":"public/blog/2019/04/18/index.html","hash":"3b3c0309b65223291b103e8d2b68a1c0e41768cf","modified":1589616291460},{"_id":"public/categories/映画/index.html","hash":"71274746a2abb06d0d88d439b4765df54d906a4d","modified":1589616291460},{"_id":"public/blog/2014/01/04/index.html","hash":"032d059c830d86f05bfc794f75c4f8ffc18c234f","modified":1589616291460},{"_id":"public/archives/2019/04/index.html","hash":"ccf8233f8c62efbcaab84c51fbc8f2fe9513956b","modified":1589616291460},{"_id":"source/ads.txt","hash":"44199e7b6c93a8f8d1b39658c6cf7057b5dbc091","modified":1589616284940},{"_id":"public/ads.txt","hash":"44199e7b6c93a8f8d1b39658c6cf7057b5dbc091","modified":1589616291460},{"_id":"source/css/style.css","hash":"66220913e289cf48167d155f432eb2077b215c66","modified":1589622310917}],"Category":[{"name":"ブログ運営","_id":"cka0j21650000d7tvb3kjgu3z"},{"name":"ライフハック","_id":"cka0j33u30004d7tv4ua66qcp"},{"name":"技術ネタ","_id":"cka0j3k0d0007d7tva4m0cfuz"},{"name":"イベント","_id":"cka0j4w92000id7tvewl1gjyj"},{"name":"ポエム","_id":"cka0j59hd000ld7tv1xy18hbg"},{"name":"日記","_id":"cka614rg200035qtv5yhh3gxv"},{"name":"自己紹介","_id":"cka9bcvqf0005xgtv4p2d3ec5"},{"name":"Processing","_id":"cka9bcy0r0008xgtv2y1egifm"},{"name":"プログラミング一般","_id":"cka9bdf1f000lxgtv6eukfq30"},{"name":"Music","_id":"cka9be77u0016xgtv1scgdkxe"},{"name":"Android","_id":"cka9bedi8001fxgtvdra4dbem"},{"name":"Wordpress","_id":"cka9bei8l001mxgtv04u553pv"},{"name":"OSS","_id":"cka9bekg3001pxgtv5fkv1xaj"},{"name":"PHP","_id":"cka9bepfv001wxgtv53fhg58z"},{"name":"ownCloud","_id":"cka9bf2910027xgtv01vd6rmg"},{"name":"Tex","_id":"cka9bf5ea002cxgtvgo4acda1"},{"name":"数学","_id":"cka9bgvc2002sxgtv0dq20lww"},{"name":"映画","_id":"cka9cakye0001k0tvasfu6a34"}],"Data":[],"Page":[{"_content":".share-buttons {\n    margin: 1rem 0;\n}\n\n.hatena-star-add-button {\n  height:20px;\n}\n\n.hatena-big-star-star-container {\n  display: inline-block;\n  position: relative;\n  margin: 2px;\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.hatena-big-star-star-container>.hatena-star-star {\n  position: absolute;\n  bottom: 0;\n  background: hsla(0,0%,100%,.8);\n  border-top-right-radius: 3px;\n}\n\n.hatena-big-star-star-container>.hatena-star-user {\n  position: absolute;\n  max-width: 100%;\n  width:100%;\n}\n\n.hatena-star-comment-container {\n  display: none;\n}","source":"css/style.css","raw":".share-buttons {\n    margin: 1rem 0;\n}\n\n.hatena-star-add-button {\n  height:20px;\n}\n\n.hatena-big-star-star-container {\n  display: inline-block;\n  position: relative;\n  margin: 2px;\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.hatena-big-star-star-container>.hatena-star-star {\n  position: absolute;\n  bottom: 0;\n  background: hsla(0,0%,100%,.8);\n  border-top-right-radius: 3px;\n}\n\n.hatena-big-star-star-container>.hatena-star-user {\n  position: absolute;\n  max-width: 100%;\n  width:100%;\n}\n\n.hatena-star-comment-container {\n  display: none;\n}","date":"2020-05-16T09:45:10.917Z","updated":"2020-05-16T09:45:10.917Z","path":"css/style.css","layout":"false","_id":"cka9dplk5000048tvggdocjjh","title":"","comments":1,"content":".share-buttons {\n    margin: 1rem 0;\n}\n\n.hatena-star-add-button {\n  height:20px;\n}\n\n.hatena-big-star-star-container {\n  display: inline-block;\n  position: relative;\n  margin: 2px;\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.hatena-big-star-star-container>.hatena-star-star {\n  position: absolute;\n  bottom: 0;\n  background: hsla(0,0%,100%,.8);\n  border-top-right-radius: 3px;\n}\n\n.hatena-big-star-star-container>.hatena-star-user {\n  position: absolute;\n  max-width: 100%;\n  width:100%;\n}\n\n.hatena-star-comment-container {\n  display: none;\n}","site":{"data":{}},"excerpt":"","more":".share-buttons {\n    margin: 1rem 0;\n}\n\n.hatena-star-add-button {\n  height:20px;\n}\n\n.hatena-big-star-star-container {\n  display: inline-block;\n  position: relative;\n  margin: 2px;\n  width: 20px;\n  height: 20px;\n  vertical-align: middle;\n  border-radius: 3px;\n  overflow: hidden;\n}\n\n.hatena-big-star-star-container>.hatena-star-star {\n  position: absolute;\n  bottom: 0;\n  background: hsla(0,0%,100%,.8);\n  border-top-right-radius: 3px;\n}\n\n.hatena-big-star-star-container>.hatena-star-user {\n  position: absolute;\n  max-width: 100%;\n  width:100%;\n}\n\n.hatena-star-comment-container {\n  display: none;\n}"}],"Post":[{"title":"2019年の振り返り","date":"2020-01-01T07:40:02.000Z","_content":"\n恒例の振り返り記事です。\n\n<!-- more -->\n\n## 経歴編\n\n### 大学院を卒業した\n\n修士論文を提出し、卒業することができました。\n正直なところ年始の記憶はあまりありませんw\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n## 資格編\n\n<h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n## 生活編\n\n<h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n## まとめ\n\n思い出せる限りでまとめました。\n2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。\n\n2020年の抱負については別記事に書きます。","source":"_posts/2020-01-01-2019年の振り返り.md","raw":"---\ntitle: 2019年の振り返り\ndate: 2020-01-01 16:40:02\ncategory: 日記\ntags:\n---\n\n恒例の振り返り記事です。\n\n<!-- more -->\n\n## 経歴編\n\n### 大学院を卒業した\n\n修士論文を提出し、卒業することができました。\n正直なところ年始の記憶はあまりありませんw\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n## 資格編\n\n<h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n## 生活編\n\n<h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n## まとめ\n\n思い出せる限りでまとめました。\n2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。\n\n2020年の抱負については別記事に書きます。","slug":"2019年の振り返り","published":1,"updated":"2020-05-14T16:57:50.956Z","_id":"ck9ze9y0t0000vbtv659vf9cl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>恒例の振り返り記事です。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"経歴編\"><a href=\"#経歴編\" class=\"headerlink\" title=\"経歴編\"></a>経歴編</h2><h3 id=\"大学院を卒業した\"><a href=\"#大学院を卒業した\" class=\"headerlink\" title=\"大学院を卒業した\"></a>大学院を卒業した</h3><p>修士論文を提出し、卒業することができました。<br>正直なところ年始の記憶はあまりありませんw</p>\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n<h2 id=\"資格編\"><a href=\"#資格編\" class=\"headerlink\" title=\"資格編\"></a>資格編</h2><h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n<h2 id=\"生活編\"><a href=\"#生活編\" class=\"headerlink\" title=\"生活編\"></a>生活編</h2><h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>思い出せる限りでまとめました。<br>2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。</p>\n<p>2020年の抱負については別記事に書きます。</p>\n","site":{"data":{}},"excerpt":"<p>恒例の振り返り記事です。</p>","more":"<h2 id=\"経歴編\"><a href=\"#経歴編\" class=\"headerlink\" title=\"経歴編\"></a>経歴編</h2><h3 id=\"大学院を卒業した\"><a href=\"#大学院を卒業した\" class=\"headerlink\" title=\"大学院を卒業した\"></a>大学院を卒業した</h3><p>修士論文を提出し、卒業することができました。<br>正直なところ年始の記憶はあまりありませんw</p>\n<h3>ソフトウェアエンジニアになった</h3>\n通信系企業に開発職として入社しました。第一志望です。\n勤務地は都内でフレックス&amp;リモート可と、とても快適な労働環境です。\n<h3>副業を始めた</h3>\nアルバイトの縁から、webサイトの受託開発を始めました。\n<h3>自動作曲サービスの保守・運用のお手伝いを始めた</h3>\norpheusという自動作曲サービスのサーバを管理することになりました。\n動作環境がかなり古いシステムでしたが、なんとか年内にアップデートすることができました。\n\n<h2 id=\"資格編\"><a href=\"#資格編\" class=\"headerlink\" title=\"資格編\"></a>資格編</h2><h3>CSDを取得した</h3>\nCSD（認定スクラムデベロッパー）の講習を受けて認定されました。\nスクラムだけでなく、開発者としての良い習慣についても学べ、大変有意義でした。\n\n<h2 id=\"生活編\"><a href=\"#生活編\" class=\"headerlink\" title=\"生活編\"></a>生活編</h2><h3>初めての出張に行った</h3>\nTPACのお手伝いのため福岡に1週間ほど出張しました。\n馬刺しかモツであたってしまうというトラブルもありましたが、ホテル暮らしは意外と悪くなかったです。\n<h3>中・高・大の友達に会った</h3>\nしばらく連絡を取っていない人とも会ってみました。\nみんな元気にやっているようで安心しました。\n<h3>資産運用を始めた</h3>\nといってもほぼ自動的にですがw\n今後のことを考えて、勉強することにしました。\n<h3>趣味編</h3>\n<h3>amazarashiのファンクラブに入った</h3>\n高校の時から聴いているamazarashiのファンクラブに入りました。\n<h3>はとバスツアーに参加した</h3>\nまだ参加記事を書けていないのですが…\n2回ほど行ってみて満足度が高かったので、趣味にしようと思います。\n\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>思い出せる限りでまとめました。<br>2019年は卒業することと社会人生活に慣れることを目標としていましたが、振り返ってみるとそれ以上の収穫があったと思います。</p>\n<p>2020年の抱負については別記事に書きます。</p>"},{"title":"GCP無料枠でWordPressブログを運用する","date":"2019-10-13T06:17:11.000Z","_content":"\nこのブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。\n\n※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。\n\n<!-- more -->\n\n## なぜGCPなのか\n\n一言で言えば、無料で運用したいからですねw\n\n無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。\n\n自宅サーバは物理的に管理が大変なので却下。\n\n無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。\n\nとなるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…\n\nというわけでGCPを使うことにしました。\n\n## Compute Engine\n\nGCPには２種類の無料枠があります。\n\n- 12ヶ月の期限付きクレジットが300$分使える\n- サービスの一部をずっと使える\n\nブログは長く運用したいので後者だけで完結したいところですね。\nご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！\n\nhttps://cloud.google.com/free/?hl=ja\n\n## インスタンスの構築\n\nググってチュートリアル的なやつをやってくださいw\n以下のような流れになります。\n\n- （なければ）Googleアカウントを作る\n- GCPのプロジェクトを作る\n- 請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)\n- インスタンスを建てる(httpsを許可しておきましょう)\n\nちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。\n\nOSはUbuntu18のLTSなやつを選びました。\n\nあとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。\n\nインスタンスの編集画面で、以下の通りに設定します。\n\n- ネットワーク インターフェースを選択\n- 外部IPの選択ボックスを開き、「IPアドレスを作成」を選択\n- できあがったIPアドレスに設定して保存\n\nhttps://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\n\n## ミドルウェアのインストール\n\nよくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。\n\n### Webサーバのインストール\n\nnginxなりapacheなりH2Oなり、お好きなものをインストールしてください。\nWordPressは.htaccessを使うので、apacheが一番easyだと思います。\n一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。\n\nとりあえずapacheのインストールコマンドを貼っておきます。\n\n`sudo apt -y install apache2`\n\nこれでブラウザから外部IPでサーバにアクセスできるようになります。\n\n### DBMSのインストール・DBの作成\n\nMySQLかmariaDBをインストールします。基本的に以下でok。\n\n`sudo apt -y install mysql-server mysql-client`\n\nインストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。\n\n### PHPのインストール\n\nこれもググればたくさんでてきますが、とりあえず以下でよいかと\n\n`sudo apt -y install php7.2 php7.2-mysql`\n\n## WordPressのインストール\n\n今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。\n\n`wget https://ja.wordpress.org/latest-ja.zip`\n\nunzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。\n\n```\nunzip latest-ja.zip\nsudo mv [WordPressのディレクトリ] /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/[WordPressのディレクトリ]\n```\n\nhttps://ja.wordpress.org\n\n## ドメインの設定\n\nドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）\n管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。\n\n- お名前.com Naviにログインし、ドメイン設定のページを開く。\n- 「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。\n- ドメインを選択して次へ進む\n- またメニューが出てくるので、「DNSレコード設定を利用する」を選択\n- `TYPE`を`A`にして、`VALUE`の部分にインスタンスの「外部 IP」を入力\n- 確認画面へ進み、設定して完了\n\nこれでドメインからサイトを表示できるようになったはず。\n\n## SSL証明書の設定\n\nChromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。\n無料で利用可能なLet's Encryptを使います。\n\nhttps://letsencrypt.org/ja/\n\n## ブログの立ち上げ\n\nここからはブラウザ上で作業します。\nWordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。\n\nあとは好みのテーマをインストールすればサイト完成です。\n\n## おわりに\n\n書いていて思いましたが、意外とやることが多いですね…\n僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。\n\nレガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。\n\n今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。","source":"_posts/2019-10-13-GCP無料枠でWordPressブログを運用する.md","raw":"---\ntitle: GCP無料枠でWordPressブログを運用する\ndate: 2019-10-13 15:17:11\ncategory: ブログ運営\ntags:\n- GCP\n- WordPress\n---\n\nこのブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。\n\n※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。\n\n<!-- more -->\n\n## なぜGCPなのか\n\n一言で言えば、無料で運用したいからですねw\n\n無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。\n\n自宅サーバは物理的に管理が大変なので却下。\n\n無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。\n\nとなるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…\n\nというわけでGCPを使うことにしました。\n\n## Compute Engine\n\nGCPには２種類の無料枠があります。\n\n- 12ヶ月の期限付きクレジットが300$分使える\n- サービスの一部をずっと使える\n\nブログは長く運用したいので後者だけで完結したいところですね。\nご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！\n\nhttps://cloud.google.com/free/?hl=ja\n\n## インスタンスの構築\n\nググってチュートリアル的なやつをやってくださいw\n以下のような流れになります。\n\n- （なければ）Googleアカウントを作る\n- GCPのプロジェクトを作る\n- 請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)\n- インスタンスを建てる(httpsを許可しておきましょう)\n\nちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。\n\nOSはUbuntu18のLTSなやつを選びました。\n\nあとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。\n\nインスタンスの編集画面で、以下の通りに設定します。\n\n- ネットワーク インターフェースを選択\n- 外部IPの選択ボックスを開き、「IPアドレスを作成」を選択\n- できあがったIPアドレスに設定して保存\n\nhttps://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\n\n## ミドルウェアのインストール\n\nよくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。\n\n### Webサーバのインストール\n\nnginxなりapacheなりH2Oなり、お好きなものをインストールしてください。\nWordPressは.htaccessを使うので、apacheが一番easyだと思います。\n一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。\n\nとりあえずapacheのインストールコマンドを貼っておきます。\n\n`sudo apt -y install apache2`\n\nこれでブラウザから外部IPでサーバにアクセスできるようになります。\n\n### DBMSのインストール・DBの作成\n\nMySQLかmariaDBをインストールします。基本的に以下でok。\n\n`sudo apt -y install mysql-server mysql-client`\n\nインストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。\n\n### PHPのインストール\n\nこれもググればたくさんでてきますが、とりあえず以下でよいかと\n\n`sudo apt -y install php7.2 php7.2-mysql`\n\n## WordPressのインストール\n\n今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。\n\n`wget https://ja.wordpress.org/latest-ja.zip`\n\nunzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。\n\n```\nunzip latest-ja.zip\nsudo mv [WordPressのディレクトリ] /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/[WordPressのディレクトリ]\n```\n\nhttps://ja.wordpress.org\n\n## ドメインの設定\n\nドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）\n管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。\n\n- お名前.com Naviにログインし、ドメイン設定のページを開く。\n- 「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。\n- ドメインを選択して次へ進む\n- またメニューが出てくるので、「DNSレコード設定を利用する」を選択\n- `TYPE`を`A`にして、`VALUE`の部分にインスタンスの「外部 IP」を入力\n- 確認画面へ進み、設定して完了\n\nこれでドメインからサイトを表示できるようになったはず。\n\n## SSL証明書の設定\n\nChromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。\n無料で利用可能なLet's Encryptを使います。\n\nhttps://letsencrypt.org/ja/\n\n## ブログの立ち上げ\n\nここからはブラウザ上で作業します。\nWordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。\n\nあとは好みのテーマをインストールすればサイト完成です。\n\n## おわりに\n\n書いていて思いましたが、意外とやることが多いですね…\n僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。\n\nレガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。\n\n今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。","slug":"GCP無料枠でWordPressブログを運用する","published":1,"updated":"2020-05-10T04:12:30.421Z","_id":"ck9zeace20002vbtvfzkq36cs","comments":1,"layout":"post","photos":[],"link":"","content":"<p>このブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。</p>\n<p>※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"なぜGCPなのか\"><a href=\"#なぜGCPなのか\" class=\"headerlink\" title=\"なぜGCPなのか\"></a>なぜGCPなのか</h2><p>一言で言えば、無料で運用したいからですねw</p>\n<p>無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。</p>\n<p>自宅サーバは物理的に管理が大変なので却下。</p>\n<p>無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。</p>\n<p>となるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…</p>\n<p>というわけでGCPを使うことにしました。</p>\n<h2 id=\"Compute-Engine\"><a href=\"#Compute-Engine\" class=\"headerlink\" title=\"Compute Engine\"></a>Compute Engine</h2><p>GCPには２種類の無料枠があります。</p>\n<ul>\n<li>12ヶ月の期限付きクレジットが300$分使える</li>\n<li>サービスの一部をずっと使える</li>\n</ul>\n<p>ブログは長く運用したいので後者だけで完結したいところですね。<br>ご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！</p>\n<p><a href=\"https://cloud.google.com/free/?hl=ja\">https://cloud.google.com/free/?hl=ja</a></p>\n<h2 id=\"インスタンスの構築\"><a href=\"#インスタンスの構築\" class=\"headerlink\" title=\"インスタンスの構築\"></a>インスタンスの構築</h2><p>ググってチュートリアル的なやつをやってくださいw<br>以下のような流れになります。</p>\n<ul>\n<li>（なければ）Googleアカウントを作る</li>\n<li>GCPのプロジェクトを作る</li>\n<li>請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)</li>\n<li>インスタンスを建てる(httpsを許可しておきましょう)</li>\n</ul>\n<p>ちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。</p>\n<p>OSはUbuntu18のLTSなやつを選びました。</p>\n<p>あとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。</p>\n<p>インスタンスの編集画面で、以下の通りに設定します。</p>\n<ul>\n<li>ネットワーク インターフェースを選択</li>\n<li>外部IPの選択ボックスを開き、「IPアドレスを作成」を選択</li>\n<li>できあがったIPアドレスに設定して保存</li>\n</ul>\n<p><a href=\"https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\">https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja</a></p>\n<h2 id=\"ミドルウェアのインストール\"><a href=\"#ミドルウェアのインストール\" class=\"headerlink\" title=\"ミドルウェアのインストール\"></a>ミドルウェアのインストール</h2><p>よくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。</p>\n<h3 id=\"Webサーバのインストール\"><a href=\"#Webサーバのインストール\" class=\"headerlink\" title=\"Webサーバのインストール\"></a>Webサーバのインストール</h3><p>nginxなりapacheなりH2Oなり、お好きなものをインストールしてください。<br>WordPressは.htaccessを使うので、apacheが一番easyだと思います。<br>一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。</p>\n<p>とりあえずapacheのインストールコマンドを貼っておきます。</p>\n<p><code>sudo apt -y install apache2</code></p>\n<p>これでブラウザから外部IPでサーバにアクセスできるようになります。</p>\n<h3 id=\"DBMSのインストール・DBの作成\"><a href=\"#DBMSのインストール・DBの作成\" class=\"headerlink\" title=\"DBMSのインストール・DBの作成\"></a>DBMSのインストール・DBの作成</h3><p>MySQLかmariaDBをインストールします。基本的に以下でok。</p>\n<p><code>sudo apt -y install mysql-server mysql-client</code></p>\n<p>インストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。</p>\n<h3 id=\"PHPのインストール\"><a href=\"#PHPのインストール\" class=\"headerlink\" title=\"PHPのインストール\"></a>PHPのインストール</h3><p>これもググればたくさんでてきますが、とりあえず以下でよいかと</p>\n<p><code>sudo apt -y install php7.2 php7.2-mysql</code></p>\n<h2 id=\"WordPressのインストール\"><a href=\"#WordPressのインストール\" class=\"headerlink\" title=\"WordPressのインストール\"></a>WordPressのインストール</h2><p>今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。</p>\n<p><code>wget https://ja.wordpress.org/latest-ja.zip</code></p>\n<p>unzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip latest-ja.zip</span><br><span class=\"line\">sudo mv [WordPressのディレクトリ] &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class=\"line\">sudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;html&#x2F;[WordPressのディレクトリ]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ja.wordpress.org\">https://ja.wordpress.org</a></p>\n<h2 id=\"ドメインの設定\"><a href=\"#ドメインの設定\" class=\"headerlink\" title=\"ドメインの設定\"></a>ドメインの設定</h2><p>ドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）<br>管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。</p>\n<ul>\n<li>お名前.com Naviにログインし、ドメイン設定のページを開く。</li>\n<li>「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。</li>\n<li>ドメインを選択して次へ進む</li>\n<li>またメニューが出てくるので、「DNSレコード設定を利用する」を選択</li>\n<li><code>TYPE</code>を<code>A</code>にして、<code>VALUE</code>の部分にインスタンスの「外部 IP」を入力</li>\n<li>確認画面へ進み、設定して完了</li>\n</ul>\n<p>これでドメインからサイトを表示できるようになったはず。</p>\n<h2 id=\"SSL証明書の設定\"><a href=\"#SSL証明書の設定\" class=\"headerlink\" title=\"SSL証明書の設定\"></a>SSL証明書の設定</h2><p>Chromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。<br>無料で利用可能なLet’s Encryptを使います。</p>\n<p><a href=\"https://letsencrypt.org/ja/\">https://letsencrypt.org/ja/</a></p>\n<h2 id=\"ブログの立ち上げ\"><a href=\"#ブログの立ち上げ\" class=\"headerlink\" title=\"ブログの立ち上げ\"></a>ブログの立ち上げ</h2><p>ここからはブラウザ上で作業します。<br>WordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。</p>\n<p>あとは好みのテーマをインストールすればサイト完成です。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>書いていて思いましたが、意外とやることが多いですね…<br>僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。</p>\n<p>レガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。</p>\n<p>今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。</p>\n","site":{"data":{}},"excerpt":"<p>このブログはGoogle Cloud Platform(GCP)の無料枠で利用できるCompute Engineのインスタンスを使って運用しています。今回はその方法を説明します。</p>\n<p>※詳しい手順を説明しようと思ったのですが、スクリーンショットを撮るのが面倒だったので雑に書いてます。詳細は後々書き足すかも。</p>","more":"<h2 id=\"なぜGCPなのか\"><a href=\"#なぜGCPなのか\" class=\"headerlink\" title=\"なぜGCPなのか\"></a>なぜGCPなのか</h2><p>一言で言えば、無料で運用したいからですねw</p>\n<p>無料でWordPressを立ち上げる場合の候補としては、自宅サーバ、GCPやAWSなどのクラウドサービスの無料枠、無料レンタルサーバが挙げられます。</p>\n<p>自宅サーバは物理的に管理が大変なので却下。</p>\n<p>無料レンタルサーバは管理業者による広告が表示されたり、独自ドメインに対応していなかったりするのでこれも見送り。</p>\n<p>となるとクラウドサービスの無料枠を使うことになるのですが、AWSやAzureの無料枠では残念ながら恒久的に無料とはいかず…</p>\n<p>というわけでGCPを使うことにしました。</p>\n<h2 id=\"Compute-Engine\"><a href=\"#Compute-Engine\" class=\"headerlink\" title=\"Compute Engine\"></a>Compute Engine</h2><p>GCPには２種類の無料枠があります。</p>\n<ul>\n<li>12ヶ月の期限付きクレジットが300$分使える</li>\n<li>サービスの一部をずっと使える</li>\n</ul>\n<p>ブログは長く運用したいので後者だけで完結したいところですね。<br>ご安心ください。ありがたいことにCompute engineが含まれているので、これでWordPressを動かすことができます！</p>\n<p><a href=\"https://cloud.google.com/free/?hl=ja\">https://cloud.google.com/free/?hl=ja</a></p>\n<h2 id=\"インスタンスの構築\"><a href=\"#インスタンスの構築\" class=\"headerlink\" title=\"インスタンスの構築\"></a>インスタンスの構築</h2><p>ググってチュートリアル的なやつをやってくださいw<br>以下のような流れになります。</p>\n<ul>\n<li>（なければ）Googleアカウントを作る</li>\n<li>GCPのプロジェクトを作る</li>\n<li>請求先アカウントを作って紐付け(要クレカ。支払いは発生しない)</li>\n<li>インスタンスを建てる(httpsを許可しておきましょう)</li>\n</ul>\n<p>ちなみに、f1-microが使えるリージョンの中で日本に一番近いのがes-westだそうです。</p>\n<p>OSはUbuntu18のLTSなやつを選びました。</p>\n<p>あとこれは忘れがちなのですが、IPアドレスを固定しておくことをおすすめします。そうしないとインスタンスを再起動するたびにIPアドレスが変わってしまい、ドメインの向き先を変えないといけなくなってしまいます。</p>\n<p>インスタンスの編集画面で、以下の通りに設定します。</p>\n<ul>\n<li>ネットワーク インターフェースを選択</li>\n<li>外部IPの選択ボックスを開き、「IPアドレスを作成」を選択</li>\n<li>できあがったIPアドレスに設定して保存</li>\n</ul>\n<p><a href=\"https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja\">https://cloud.google.com/compute/docs/ip-addresses/reserve-static-external-ip-address?hl=ja</a></p>\n<h2 id=\"ミドルウェアのインストール\"><a href=\"#ミドルウェアのインストール\" class=\"headerlink\" title=\"ミドルウェアのインストール\"></a>ミドルウェアのインストール</h2><p>よくある3点セット(Webサーバ、DBMS、プログラミング環境)をインストールして、いわゆるLAMP環境を構築します。</p>\n<h3 id=\"Webサーバのインストール\"><a href=\"#Webサーバのインストール\" class=\"headerlink\" title=\"Webサーバのインストール\"></a>Webサーバのインストール</h3><p>nginxなりapacheなりH2Oなり、お好きなものをインストールしてください。<br>WordPressは.htaccessを使うので、apacheが一番easyだと思います。<br>一方で、弱小サーバなので少しでも負荷を減らすために他のミドルウェアを選択するのもアリですね。</p>\n<p>とりあえずapacheのインストールコマンドを貼っておきます。</p>\n<p><code>sudo apt -y install apache2</code></p>\n<p>これでブラウザから外部IPでサーバにアクセスできるようになります。</p>\n<h3 id=\"DBMSのインストール・DBの作成\"><a href=\"#DBMSのインストール・DBの作成\" class=\"headerlink\" title=\"DBMSのインストール・DBの作成\"></a>DBMSのインストール・DBの作成</h3><p>MySQLかmariaDBをインストールします。基本的に以下でok。</p>\n<p><code>sudo apt -y install mysql-server mysql-client</code></p>\n<p>インストールしたら、WordPressのデータを保存するためのDBを一つ作っておきましょう。</p>\n<h3 id=\"PHPのインストール\"><a href=\"#PHPのインストール\" class=\"headerlink\" title=\"PHPのインストール\"></a>PHPのインストール</h3><p>これもググればたくさんでてきますが、とりあえず以下でよいかと</p>\n<p><code>sudo apt -y install php7.2 php7.2-mysql</code></p>\n<h2 id=\"WordPressのインストール\"><a href=\"#WordPressのインストール\" class=\"headerlink\" title=\"WordPressのインストール\"></a>WordPressのインストール</h2><p>今時FTPであげるのも面倒なので、インスタンスでダウンロードしちゃいます。</p>\n<p><code>wget https://ja.wordpress.org/latest-ja.zip</code></p>\n<p>unzipで解凍してドキュメントルートへ移動し、以下のコマンドで所有者をwebサーバの実行ユーザにします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip latest-ja.zip</span><br><span class=\"line\">sudo mv [WordPressのディレクトリ] &#x2F;var&#x2F;www&#x2F;html&#x2F;</span><br><span class=\"line\">sudo chown -R www-data:www-data &#x2F;var&#x2F;www&#x2F;html&#x2F;[WordPressのディレクトリ]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://ja.wordpress.org\">https://ja.wordpress.org</a></p>\n<h2 id=\"ドメインの設定\"><a href=\"#ドメインの設定\" class=\"headerlink\" title=\"ドメインの設定\"></a>ドメインの設定</h2><p>ドメインはお名前ドットコムで取得しました。（ここだけお金かかってます。年1500円くらい。）<br>管理画面がわかりにくくてレコードの設定に時間がかかってしまったので、設定方法をここにメモしておきます。</p>\n<ul>\n<li>お名前.com Naviにログインし、ドメイン設定のページを開く。</li>\n<li>「ネームサーバーの設定」にある「DNS設定/転送設定」を選択。</li>\n<li>ドメインを選択して次へ進む</li>\n<li>またメニューが出てくるので、「DNSレコード設定を利用する」を選択</li>\n<li><code>TYPE</code>を<code>A</code>にして、<code>VALUE</code>の部分にインスタンスの「外部 IP」を入力</li>\n<li>確認画面へ進み、設定して完了</li>\n</ul>\n<p>これでドメインからサイトを表示できるようになったはず。</p>\n<h2 id=\"SSL証明書の設定\"><a href=\"#SSL証明書の設定\" class=\"headerlink\" title=\"SSL証明書の設定\"></a>SSL証明書の設定</h2><p>Chromeなんかはデフォルトでhttpsでアクセスしてくるので、SSL証明書を設定する必要があります。<br>無料で利用可能なLet’s Encryptを使います。</p>\n<p><a href=\"https://letsencrypt.org/ja/\">https://letsencrypt.org/ja/</a></p>\n<h2 id=\"ブログの立ち上げ\"><a href=\"#ブログの立ち上げ\" class=\"headerlink\" title=\"ブログの立ち上げ\"></a>ブログの立ち上げ</h2><p>ここからはブラウザ上で作業します。<br>WordPressをインストールしたURLにアクセスすると、ブログの設定を行うためのガイドが出てくるので、それにしたがってインストールしてください。</p>\n<p>あとは好みのテーマをインストールすればサイト完成です。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>書いていて思いましたが、意外とやることが多いですね…<br>僕はWebサーバのインストールで手戻りがあったので、全体でだいたい2~3時間くらいかかりました。</p>\n<p>レガシーな運用方法ですが、プライベートでGCPを軽く触るには良い題材だと思います。プロジェクトなどの概念がわかってきたら、各種サービスを試していきたいですね。</p>\n<p>今回はサイトの立ち上げまでを書きましたが、運用にあたってWordPressプラグインをいくつか利用しているので、それについてもまた書きたいと思います。</p>"},{"title":"GTDを少しアレンジしたタスク管理","date":"2019-10-21T06:28:06.000Z","_content":"\n今回はタスク管理の話です。\nタスク管理というと[GTD](https://ja.wikipedia.org/wiki/Getting_Things_Done)が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。\n\n<!-- more -->\n\n## なぜタスクを管理するのか\n\n僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。\n\nしかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。\n\n実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。\n\n## タスク管理手法の紹介\n\n### 1.タスクを全て書き出す\n\nタスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。\n\nとにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。\n\n### 2.タスクを間引く\n\nタスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。\n\n- 2分以内に終わるものはすぐにやってしまう\n- 可能なものは他の人に任せてしまう\n\nこれでタスクリストを幾分か減らせればラッキーですね。\n\n### 3.タスクを分類する\n\n書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。\n\n#### Pending\n\nここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。\n\n#### Maybe\n\nここは「多分やると思うこと」リストです。\n優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。\n\n#### Project\n\nここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。\n\n例：\n\n- 英語を話せるようになる\n- 一人暮らしをはじめる\n\n#### Goal\n\nここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。\nなるべく定量的な目標が並ぶようにします。\n\n例：\n\n- 貯金を100万円ためる\n- TOEICで700点をとる\n\n#### Task\n\nここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。\nTaskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。\n\n例：\n\n- 月々の貯金額を決める\n- TOEICの過去問を解く\n\n#### Routine\n\nここでは習慣化したいことを管理します。\nタスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。\nこれらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。\n\n例：\n\n- 月に一度髪を切りに行く\n- 毎日20:00に腕立て伏せ15回\n\n### 4. 期限を設定する\n\nGoalとTaskにはそれぞれ期限を設定します。\n\nGoalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。\n\nTaskには実施予定の日時を期限として設定します。\nリストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。\n\n### 5.タスクを更新する\n\n3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。\n\n実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。\n\n以上が、タスク管理の全体像となります。\n\n## Q&amp;A\n\n想定される質問について簡単に回答しておきます。\n\n### Q. この手法の限界はなんですか？\n\nA. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。\nその場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。\n\nまた、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。\n\n### Q. この手法は目的ありきでタスクを管理するのですか？\n\nA. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。\n\n### Q. おすすめのタスク管理ツールを教えてください\n\nA. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。\n\n## おわりに\n\n僕が実践しているタスク管理手法について紹介しました。\n他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。\n","source":"_posts/2019-10-21-GTDを少しアレンジしたタスク管理.md","raw":"---\ntitle: GTDを少しアレンジしたタスク管理\ndate: 2019-10-21 15:28:06\ncategory: ライフハック\ntags: タスク管理\n---\n\n今回はタスク管理の話です。\nタスク管理というと[GTD](https://ja.wikipedia.org/wiki/Getting_Things_Done)が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。\n\n<!-- more -->\n\n## なぜタスクを管理するのか\n\n僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。\n\nしかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。\n\n実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。\n\n## タスク管理手法の紹介\n\n### 1.タスクを全て書き出す\n\nタスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。\n\nとにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。\n\n### 2.タスクを間引く\n\nタスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。\n\n- 2分以内に終わるものはすぐにやってしまう\n- 可能なものは他の人に任せてしまう\n\nこれでタスクリストを幾分か減らせればラッキーですね。\n\n### 3.タスクを分類する\n\n書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。\n\n#### Pending\n\nここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。\n\n#### Maybe\n\nここは「多分やると思うこと」リストです。\n優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。\n\n#### Project\n\nここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。\n\n例：\n\n- 英語を話せるようになる\n- 一人暮らしをはじめる\n\n#### Goal\n\nここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。\nなるべく定量的な目標が並ぶようにします。\n\n例：\n\n- 貯金を100万円ためる\n- TOEICで700点をとる\n\n#### Task\n\nここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。\nTaskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。\n\n例：\n\n- 月々の貯金額を決める\n- TOEICの過去問を解く\n\n#### Routine\n\nここでは習慣化したいことを管理します。\nタスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。\nこれらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。\n\n例：\n\n- 月に一度髪を切りに行く\n- 毎日20:00に腕立て伏せ15回\n\n### 4. 期限を設定する\n\nGoalとTaskにはそれぞれ期限を設定します。\n\nGoalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。\n\nTaskには実施予定の日時を期限として設定します。\nリストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。\n\n### 5.タスクを更新する\n\n3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。\n\n実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。\n\n以上が、タスク管理の全体像となります。\n\n## Q&amp;A\n\n想定される質問について簡単に回答しておきます。\n\n### Q. この手法の限界はなんですか？\n\nA. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。\nその場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。\n\nまた、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。\n\n### Q. この手法は目的ありきでタスクを管理するのですか？\n\nA. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。\n\n### Q. おすすめのタスク管理ツールを教えてください\n\nA. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。\n\n## おわりに\n\n僕が実践しているタスク管理手法について紹介しました。\n他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。\n","slug":"GTDを少しアレンジしたタスク管理","published":1,"updated":"2020-05-10T04:03:04.238Z","_id":"ck9zeajtf0003vbtv408cb6rq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今回はタスク管理の話です。<br>タスク管理というと<a href=\"https://ja.wikipedia.org/wiki/Getting_Things_Done\">GTD</a>が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"なぜタスクを管理するのか\"><a href=\"#なぜタスクを管理するのか\" class=\"headerlink\" title=\"なぜタスクを管理するのか\"></a>なぜタスクを管理するのか</h2><p>僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。</p>\n<p>しかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。</p>\n<p>実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。</p>\n<h2 id=\"タスク管理手法の紹介\"><a href=\"#タスク管理手法の紹介\" class=\"headerlink\" title=\"タスク管理手法の紹介\"></a>タスク管理手法の紹介</h2><h3 id=\"1-タスクを全て書き出す\"><a href=\"#1-タスクを全て書き出す\" class=\"headerlink\" title=\"1.タスクを全て書き出す\"></a>1.タスクを全て書き出す</h3><p>タスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。</p>\n<p>とにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。</p>\n<h3 id=\"2-タスクを間引く\"><a href=\"#2-タスクを間引く\" class=\"headerlink\" title=\"2.タスクを間引く\"></a>2.タスクを間引く</h3><p>タスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。</p>\n<ul>\n<li>2分以内に終わるものはすぐにやってしまう</li>\n<li>可能なものは他の人に任せてしまう</li>\n</ul>\n<p>これでタスクリストを幾分か減らせればラッキーですね。</p>\n<h3 id=\"3-タスクを分類する\"><a href=\"#3-タスクを分類する\" class=\"headerlink\" title=\"3.タスクを分類する\"></a>3.タスクを分類する</h3><p>書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。</p>\n<h4 id=\"Pending\"><a href=\"#Pending\" class=\"headerlink\" title=\"Pending\"></a>Pending</h4><p>ここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。</p>\n<h4 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h4><p>ここは「多分やると思うこと」リストです。<br>優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。</p>\n<h4 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h4><p>ここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。</p>\n<p>例：</p>\n<ul>\n<li>英語を話せるようになる</li>\n<li>一人暮らしをはじめる</li>\n</ul>\n<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>ここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。<br>なるべく定量的な目標が並ぶようにします。</p>\n<p>例：</p>\n<ul>\n<li>貯金を100万円ためる</li>\n<li>TOEICで700点をとる</li>\n</ul>\n<h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>ここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。<br>Taskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。</p>\n<p>例：</p>\n<ul>\n<li>月々の貯金額を決める</li>\n<li>TOEICの過去問を解く</li>\n</ul>\n<h4 id=\"Routine\"><a href=\"#Routine\" class=\"headerlink\" title=\"Routine\"></a>Routine</h4><p>ここでは習慣化したいことを管理します。<br>タスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。<br>これらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。</p>\n<p>例：</p>\n<ul>\n<li>月に一度髪を切りに行く</li>\n<li>毎日20:00に腕立て伏せ15回</li>\n</ul>\n<h3 id=\"4-期限を設定する\"><a href=\"#4-期限を設定する\" class=\"headerlink\" title=\"4. 期限を設定する\"></a>4. 期限を設定する</h3><p>GoalとTaskにはそれぞれ期限を設定します。</p>\n<p>Goalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。</p>\n<p>Taskには実施予定の日時を期限として設定します。<br>リストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。</p>\n<h3 id=\"5-タスクを更新する\"><a href=\"#5-タスクを更新する\" class=\"headerlink\" title=\"5.タスクを更新する\"></a>5.タスクを更新する</h3><p>3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。</p>\n<p>実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。</p>\n<p>以上が、タスク管理の全体像となります。</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>想定される質問について簡単に回答しておきます。</p>\n<h3 id=\"Q-この手法の限界はなんですか？\"><a href=\"#Q-この手法の限界はなんですか？\" class=\"headerlink\" title=\"Q. この手法の限界はなんですか？\"></a>Q. この手法の限界はなんですか？</h3><p>A. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。<br>その場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。</p>\n<p>また、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。</p>\n<h3 id=\"Q-この手法は目的ありきでタスクを管理するのですか？\"><a href=\"#Q-この手法は目的ありきでタスクを管理するのですか？\" class=\"headerlink\" title=\"Q. この手法は目的ありきでタスクを管理するのですか？\"></a>Q. この手法は目的ありきでタスクを管理するのですか？</h3><p>A. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。</p>\n<h3 id=\"Q-おすすめのタスク管理ツールを教えてください\"><a href=\"#Q-おすすめのタスク管理ツールを教えてください\" class=\"headerlink\" title=\"Q. おすすめのタスク管理ツールを教えてください\"></a>Q. おすすめのタスク管理ツールを教えてください</h3><p>A. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>僕が実践しているタスク管理手法について紹介しました。<br>他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。</p>\n","site":{"data":{}},"excerpt":"<p>今回はタスク管理の話です。<br>タスク管理というと<a href=\"https://ja.wikipedia.org/wiki/Getting_Things_Done\">GTD</a>が有名ですが、全部実践しようとすると大変です。なので僕は必要な部分だけ抜き出しつつ、足りない仕組みをちょっと付け足して運用しています。今回はそれをまとめて紹介したいと思います。</p>","more":"<h2 id=\"なぜタスクを管理するのか\"><a href=\"#なぜタスクを管理するのか\" class=\"headerlink\" title=\"なぜタスクを管理するのか\"></a>なぜタスクを管理するのか</h2><p>僕たちのタスクはいろんな経路で追加されます。自分の目標を達成するためだったり、他人から頼まれたり。僕たちはその中から次に取り組むタスクを選択しては消化しているわけです。</p>\n<p>しかしこの営みがうまくいかないと、タスクを忘れてしまうことや締め切りに間に合わないことが起きてしまいます。そういったことを防ぐために、タスクは管理しておいたほうが良さそうです。</p>\n<p>実際にタスク管理を行なってみると他にもメリットがあることに気づきますが、それはまた別の記事で書こうと思います。</p>\n<h2 id=\"タスク管理手法の紹介\"><a href=\"#タスク管理手法の紹介\" class=\"headerlink\" title=\"タスク管理手法の紹介\"></a>タスク管理手法の紹介</h2><h3 id=\"1-タスクを全て書き出す\"><a href=\"#1-タスクを全て書き出す\" class=\"headerlink\" title=\"1.タスクを全て書き出す\"></a>1.タスクを全て書き出す</h3><p>タスク管理ツールには大抵、単にタスクを登録するためのリストが一つ用意されています。そこに「新しいスマホが欲しい」、「英語が話せるようになりたい」、「メールに返信する」など、タスクをどんどん追加していきます。</p>\n<p>とにかく思いつくものをすべて書き出して、頭の中をスッキリさせましょう。もちろん、数が少ないからといって無理に絞り出す必要はありません。</p>\n<h3 id=\"2-タスクを間引く\"><a href=\"#2-タスクを間引く\" class=\"headerlink\" title=\"2.タスクを間引く\"></a>2.タスクを間引く</h3><p>タスクを書き出したら、GTDにおける以下の二つのノウハウを実践してみます。</p>\n<ul>\n<li>2分以内に終わるものはすぐにやってしまう</li>\n<li>可能なものは他の人に任せてしまう</li>\n</ul>\n<p>これでタスクリストを幾分か減らせればラッキーですね。</p>\n<h3 id=\"3-タスクを分類する\"><a href=\"#3-タスクを分類する\" class=\"headerlink\" title=\"3.タスクを分類する\"></a>3.タスクを分類する</h3><p>書き出したタスクたちを分類します。それぞれツール上で新たなリストを作り、移動させましょう。</p>\n<h4 id=\"Pending\"><a href=\"#Pending\" class=\"headerlink\" title=\"Pending\"></a>Pending</h4><p>ここでは他の人へ依頼をするなどして待機状態になっているタスクを管理します。機械的に振り分けましょう。</p>\n<h4 id=\"Maybe\"><a href=\"#Maybe\" class=\"headerlink\" title=\"Maybe\"></a>Maybe</h4><p>ここは「多分やると思うこと」リストです。<br>優先順位が低いためにしばらくやりそうにないタスクや、やろうと思っているが具体的な行動が思いつかないタスクはこのリストに置きましょう。</p>\n<h4 id=\"Project\"><a href=\"#Project\" class=\"headerlink\" title=\"Project\"></a>Project</h4><p>ここでは大きな目的を管理します。これらの目的を達成するために行動するわけです。</p>\n<p>例：</p>\n<ul>\n<li>英語を話せるようになる</li>\n<li>一人暮らしをはじめる</li>\n</ul>\n<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>ここでは各Projectにおける目標を管理します。1つのProjectに対して最低1つのGoalを設定しましょう。<br>なるべく定量的な目標が並ぶようにします。</p>\n<p>例：</p>\n<ul>\n<li>貯金を100万円ためる</li>\n<li>TOEICで700点をとる</li>\n</ul>\n<h4 id=\"Task\"><a href=\"#Task\" class=\"headerlink\" title=\"Task\"></a>Task</h4><p>ここでは具体的な行動を管理します。優先度が高い順に並べます。1つのGoalに対して最低1つのTaskを設定します。一方で、紐づけるGoalがないmisc的なTaskはあっても大丈夫です。<br>Taskは速やかに終わる粒度が良く、時間がかかりすぎるものは分割を検討します。</p>\n<p>例：</p>\n<ul>\n<li>月々の貯金額を決める</li>\n<li>TOEICの過去問を解く</li>\n</ul>\n<h4 id=\"Routine\"><a href=\"#Routine\" class=\"headerlink\" title=\"Routine\"></a>Routine</h4><p>ここでは習慣化したいことを管理します。<br>タスクの中には定期的に発生するものや、繰り返し行わないと効果が出ないものがあります。<br>これらはツールの繰り返し機能で管理してもらいましょう。通知を設定しておくと便利です。</p>\n<p>例：</p>\n<ul>\n<li>月に一度髪を切りに行く</li>\n<li>毎日20:00に腕立て伏せ15回</li>\n</ul>\n<h3 id=\"4-期限を設定する\"><a href=\"#4-期限を設定する\" class=\"headerlink\" title=\"4. 期限を設定する\"></a>4. 期限を設定する</h3><p>GoalとTaskにはそれぞれ期限を設定します。</p>\n<p>Goalにはいつまでに達成したいのかを期限として設定します。思い浮かばない場合は、とりあえず1ヶ月とするか、Maybeに移動させることを検討します。</p>\n<p>Taskには実施予定の日時を期限として設定します。<br>リストの下の方は予測が難しいので、期限が決まっているものはそれを設定し、他のものは設定しなくてもよいです。</p>\n<h3 id=\"5-タスクを更新する\"><a href=\"#5-タスクを更新する\" class=\"headerlink\" title=\"5.タスクを更新する\"></a>5.タスクを更新する</h3><p>3まででリストは完成です。各リストはいつでも更新でき、僕はタスク完了時と毎朝起床時にチェックを行うようにしています。</p>\n<p>実際にTask,Routineを元に行動し、完了したり行動する必要がなくなった場合は更新します。Goalに紐づいたタスクを完了した場合は、そのGoalが達成されたかを確認し、Goalを達成した場合は、さらにそれが属するProjectが達成されたかを確認します。</p>\n<p>以上が、タスク管理の全体像となります。</p>\n<h2 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h2><p>想定される質問について簡単に回答しておきます。</p>\n<h3 id=\"Q-この手法の限界はなんですか？\"><a href=\"#Q-この手法の限界はなんですか？\" class=\"headerlink\" title=\"Q. この手法の限界はなんですか？\"></a>Q. この手法の限界はなんですか？</h3><p>A. 僕の手法では複数のProjectを同時に扱います。そのため、Projectが短期的かつ大規模の場合にTaskリストを増大させてしまうことが考えられます。<br>その場合はプロジェクト管理ツールに移行したほうがよいかもしれません。この手法は日常的なタスク管理向けです。</p>\n<p>また、僕の手法はゲーミフィケーションやベロシティの分析といった付加価値の追及をしていません。</p>\n<h3 id=\"Q-この手法は目的ありきでタスクを管理するのですか？\"><a href=\"#Q-この手法は目的ありきでタスクを管理するのですか？\" class=\"headerlink\" title=\"Q. この手法は目的ありきでタスクを管理するのですか？\"></a>Q. この手法は目的ありきでタスクを管理するのですか？</h3><p>A. いいえ。手順では5種類のリストを作成していますが、Projectが空になったり、それによってGoalも空になることがあると思います。それでも問題ありません。</p>\n<h3 id=\"Q-おすすめのタスク管理ツールを教えてください\"><a href=\"#Q-おすすめのタスク管理ツールを教えてください\" class=\"headerlink\" title=\"Q. おすすめのタスク管理ツールを教えてください\"></a>Q. おすすめのタスク管理ツールを教えてください</h3><p>A. Microsoft To Doです。期限設定、通知、繰り返しといった基本的な機能が全て揃っています。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>僕が実践しているタスク管理手法について紹介しました。<br>他にオススメのノウハウなどがあればコメントに書いてもらえると嬉しいです。</p>"},{"title":"WordPressにはてなスターを設置してデザインを良くする","date":"2019-10-31T07:18:44.000Z","_content":"このブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。\n\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nというわけで、はてなスターを設置することにしました。\n\n<!-- more -->\n\n## はてなスターの設置\n\nいままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。\n\nhttps://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\n\n参考記事の手順に沿ってはてなスターを設置します。\nwordpressの場合、トークン設定を`header.php`に記述して、`Hatena.Star.SiteConfig`は`single.php`に記述すると、記事のページのみに表示できます。\n\n## デザインを良くする\n\nめでたく設置されたスターを見ると、なんだか古いデザインになっています。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no)\n\nちょっとイケてないので、デザインを直してみます。\n\n`single.php`のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。\n\nそこに以下のcssを記述しましょう。\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\nこれによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no)\n\nいい感じですね！\nというわけで、イイねと思ったら押してくださいw\n","source":"_posts/2019-10-31-WordPressにはてなスターを設置してデザインを良くする.md","raw":"---\ntitle: WordPressにはてなスターを設置してデザインを良くする\ndate: 2019-10-31 16:18:44\ncategory: 技術ネタ\ntags:\n- はてなスター\n- WordPress\n---\nこのブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。\n\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\nというわけで、はてなスターを設置することにしました。\n\n<!-- more -->\n\n## はてなスターの設置\n\nいままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。\n\nhttps://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\n\n参考記事の手順に沿ってはてなスターを設置します。\nwordpressの場合、トークン設定を`header.php`に記述して、`Hatena.Star.SiteConfig`は`single.php`に記述すると、記事のページのみに表示できます。\n\n## デザインを良くする\n\nめでたく設置されたスターを見ると、なんだか古いデザインになっています。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no)\n\nちょっとイケてないので、デザインを直してみます。\n\n`single.php`のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。\n\nそこに以下のcssを記述しましょう。\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\nこれによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。\nこんな感じ↓\n\n![](https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no)\n\nいい感じですね！\nというわけで、イイねと思ったら押してくださいw\n","slug":"WordPressにはてなスターを設置してデザインを良くする","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"ck9zebm1b0008vbtv6s6521gl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>このブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>というわけで、はてなスターを設置することにしました。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"はてなスターの設置\"><a href=\"#はてなスターの設置\" class=\"headerlink\" title=\"はてなスターの設置\"></a>はてなスターの設置</h2><p>いままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。</p>\n<p><a href=\"https://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\">https://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs</a></p>\n<p>参考記事の手順に沿ってはてなスターを設置します。<br>wordpressの場合、トークン設定を<code>header.php</code>に記述して、<code>Hatena.Star.SiteConfig</code>は<code>single.php</code>に記述すると、記事のページのみに表示できます。</p>\n<h2 id=\"デザインを良くする\"><a href=\"#デザインを良くする\" class=\"headerlink\" title=\"デザインを良くする\"></a>デザインを良くする</h2><p>めでたく設置されたスターを見ると、なんだか古いデザインになっています。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no\" alt=\"\"></p>\n<p>ちょっとイケてないので、デザインを直してみます。</p>\n<p><code>single.php</code>のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。</p>\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n<p>続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。</p>\n<p>そこに以下のcssを記述しましょう。</p>\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\n<p>これによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no\" alt=\"\"></p>\n<p>いい感じですね！<br>というわけで、イイねと思ったら押してくださいw</p>\n","site":{"data":{}},"excerpt":"<p>このブログは更新するたびにTwitterで流すようにしてるのですが、ある日こんなことを言われました。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">記事にいいねがつけたい！</p>&mdash; pvcresin (@pvcresin) <a href=\"https://twitter.com/pvcresin/status/1184079040056938497?ref_src=twsrc%5Etfw\">October 15, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<p>というわけで、はてなスターを設置することにしました。</p>","more":"<h2 id=\"はてなスターの設置\"><a href=\"#はてなスターの設置\" class=\"headerlink\" title=\"はてなスターの設置\"></a>はてなスターの設置</h2><p>いままで「はてなスター」は「はてなブログ」限定の機能だと思っていたのですが、どうやら外部のブログにも貼り付けることができるようです。</p>\n<p><a href=\"https://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs\">https://developer.hatena.ne.jp/ja/documents/star/misc/hatenastarjs</a></p>\n<p>参考記事の手順に沿ってはてなスターを設置します。<br>wordpressの場合、トークン設定を<code>header.php</code>に記述して、<code>Hatena.Star.SiteConfig</code>は<code>single.php</code>に記述すると、記事のページのみに表示できます。</p>\n<h2 id=\"デザインを良くする\"><a href=\"#デザインを良くする\" class=\"headerlink\" title=\"デザインを良くする\"></a>デザインを良くする</h2><p>めでたく設置されたスターを見ると、なんだか古いデザインになっています。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/lhTwIvyXVMSJGyDsMc9aXAOJoDy8Z3rRLbdlkrx9qIJEvURD-K_ZRIAZ-TGb6VxKefenxybjvGcy5pWOPf2ZQKeBweQEB4ys8AlBDrNA0_r1YgUK_WJbDC8ZrjAOfcu8k9YXCzRFQj68rFqaKaVqglIdQBNWPA2FHsOeIQizp-VD76825kI9OCP84BYUxlPA7Hk55NbnKcYhjUrx4Y0HKrs_AkpclIAo8i_ubIcb4C5jhMUqyd9OW1by1nUCP7XfYIGMCLtm4hNpBCz3eG6VQmU4BSm8qAf2FhXBVHdJfCHZJwT-v0fSJoz1IB-5dexsY53IwnD5mBkH_kwOAPbLY-Jf6uQbSgyD4Hqlnxy4JNsYSGjxCAscrk-44e6wtB1nvAPRXxSx53Ae0-kti1QHcKJVg2g-Mkd2HZPv2Xr6j5Mq91P_gWX4DMt12Hh6z9P9iaaUa83W-F5ovE9mrjDr0uCpfu64riN5iDV7sY2B_zDVGJ2O3dZJil0U46vJKKl3aMzY23O3IWzH2k6gAQIOHGIK_8KQy75OootT7JvMUmYj9eU5copYVNQoxIFG4rE5As6TSLmToJ-vG5SSYTmd0wFSLbOlA7vVmGQP3xEvis_S9QqrnS1bPK18Ryr7jp_b0YEJS5EMfNtrkLurX-rXZP2GXx2GSSy8QzloCipKqDSUd0IXJnd0h8EXTp2F4y-YR2dmE7q3oqRVox7XhISYW-xSnyMRHVX1y2NjWEn2f-meJFQ=w64-h40-no\" alt=\"\"></p>\n<p>ちょっとイケてないので、デザインを直してみます。</p>\n<p><code>single.php</code>のどこかに、以下のスクリプトをscriptタグで挿入します。WordPressの管理画面から「外観」-&gt;「テーマエディタ」と進むと、各テーマのPHPファイルを編集できます。</p>\n<script src=\"https://gist.github.com/salmoncode/08dde225da03ccbc1b7aea5cc152554d.js\"></script>\n\n<p>続いて、WordPressの管理画面から「外観」-&gt;「カスタマイズ」と進み、「追加CSS」を選択します。</p>\n<p>そこに以下のcssを記述しましょう。</p>\n<script src=\"https://gist.github.com/salmoncode/dcbc88cc4641578c71cee33e4e846662.js\"></script>\n\n<p>これによって、ボタンが今のはてなブログっぽくなり、スターの背景にユーザアイコンが出るようになります。<br>こんな感じ↓</p>\n<p><img src=\"https://lh3.googleusercontent.com/YLPTDt6rncD_zDVC2dRuUZE8PWP61Lktf3WVFvp1DMjfL8mf-3vp2MXlh_rixR7rkH6_Uli-zV8vUXV5q0gextSWL4ilUxJXoq1we0t126ywRLqJMtF1HxhewaB4YIccwJCC0JkHz8ZdlUFI3ZUV8633t-kwHUMuiTRkWxoqmiN28Jky1YxjY18DImK_4kFupC2Axu8DaNGbTvrHULrvgtbggK-Dy4Fh8fxeQLkarxaLpk4txtadi0YKq4wdN1T_7tJBr6sxYAIkqNWeRq-t4IFJ7TDcaZWMEdLpP-6N0nflmHIfuNgY3ohxCEnF-Dd812DPsDhIT4rBQx8QDCsQinFZqiyr3kWUyB-lOqHMhLleBrLysq229Z_3ZFrS6EpNS0ey-6Z5tI9EjDuMmSqNBP0ZNVz5LIXHP8DO9U1bpJw5io0MDQkb3_MaS4kMVmPVV4Sz0J09nT3bfCqZzssbHb5XgPlq5fuqx83sPKGwXIjcbTRefXoGjhKyo5ruJWPyg3EhipzxYBKT0ZOeBDYOQW0lYPuEvO4JUdvAzkHS4YgU8aWsR3RNuoeiG5_w7wA4--QkBtQG_IpNabSmmOxvcT0jpLlHrzX9uNXwipPaKWIw-i2adYcWIVI2uD26fAspwUQPWl2PNDDD7msdbDFCLbtevHVRHP5fXsUTWqozkorkTTTJO5-vjO9WRS3EhCZQLFrefSM2sVQD6iWxR97dxQv55THAIdSjefTtLRxxX8o7jBA=w104-h43-no\" alt=\"\"></p>\n<p>いい感じですね！<br>というわけで、イイねと思ったら押してくださいw</p>"},{"title":"はとバス#0 はとバスツアーのすすめ","date":"2019-11-02T07:37:56.000Z","thumbnail":"https://salmoncode.com/thumbnails/hatobus.jpg","_content":"\n10月の中旬ごろに、はとバスツアーに行ってきました。\n\nツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。\n\nそれで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。\n\n<!-- more -->\n\n## はとバスツアーとは？\n\n株式会社はとバスが提供する国内観光サービスです。\n基本的に都内から出発して各地の名所を巡る内容となっています。\n\nhttps://www.hatobus.co.jp/dom/appeal/\n\nはとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。\n\nただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。\n\n## はとバスツアーのおすすめポイント\n\n<h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\nメインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。\n\nこれは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw\n\n自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\nお土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。\n\nバスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\nもちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。\n\n## ツアー参加の流れ\n\n<h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\nhttps://www.hatobus.co.jp/\n\n行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。\n\n人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。\n\n後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\nツアーを楽しんだら、出発したバス停に戻ってきて解散です！\n\n## おわりに\n\n別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.\nバスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。\n\n特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!","source":"_posts/2019-11-02-はとバス.md","raw":"---\ntitle: はとバス#0 はとバスツアーのすすめ\ndate: 2019-11-02 16:37:56\ncategory: イベント\ntags: はとバスツアー\nthumbnail: https://salmoncode.com/thumbnails/hatobus.jpg\n---\n\n10月の中旬ごろに、はとバスツアーに行ってきました。\n\nツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。\n\nそれで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。\n\n<!-- more -->\n\n## はとバスツアーとは？\n\n株式会社はとバスが提供する国内観光サービスです。\n基本的に都内から出発して各地の名所を巡る内容となっています。\n\nhttps://www.hatobus.co.jp/dom/appeal/\n\nはとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。\n\nただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。\n\n## はとバスツアーのおすすめポイント\n\n<h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\nメインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。\n\nこれは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw\n\n自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\nお土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。\n\nバスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\nもちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。\n\n## ツアー参加の流れ\n\n<h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\nhttps://www.hatobus.co.jp/\n\n行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。\n\n人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。\n\n後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\nツアーを楽しんだら、出発したバス停に戻ってきて解散です！\n\n## おわりに\n\n別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.\nバスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。\n\n特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!","slug":"はとバス","published":1,"updated":"2020-05-10T05:43:30.631Z","_id":"ck9zebsqo0009vbtv36477fo5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>10月の中旬ごろに、はとバスツアーに行ってきました。</p>\n<p>ツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。</p>\n<p>それで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"はとバスツアーとは？\"><a href=\"#はとバスツアーとは？\" class=\"headerlink\" title=\"はとバスツアーとは？\"></a>はとバスツアーとは？</h2><p>株式会社はとバスが提供する国内観光サービスです。<br>基本的に都内から出発して各地の名所を巡る内容となっています。</p>\n<p><a href=\"https://www.hatobus.co.jp/dom/appeal/\">https://www.hatobus.co.jp/dom/appeal/</a></p>\n<p>はとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。</p>\n<p>ただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。</p>\n<h2 id=\"はとバスツアーのおすすめポイント\"><a href=\"#はとバスツアーのおすすめポイント\" class=\"headerlink\" title=\"はとバスツアーのおすすめポイント\"></a>はとバスツアーのおすすめポイント</h2><h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\n<p>メインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。</p>\n<p>これは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw</p>\n<p>自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍</p>\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\n<p>お土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。</p>\n<p>バスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。</p>\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\n<p>もちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。</p>\n<h2 id=\"ツアー参加の流れ\"><a href=\"#ツアー参加の流れ\" class=\"headerlink\" title=\"ツアー参加の流れ\"></a>ツアー参加の流れ</h2><h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\n<p><a href=\"https://www.hatobus.co.jp/\">https://www.hatobus.co.jp/</a></p>\n<p>行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。</p>\n<p>人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。</p>\n<p>後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。</p>\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\n<p>ツアーを楽しんだら、出発したバス停に戻ってきて解散です！</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.<br>バスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。</p>\n<p>特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!</p>\n","site":{"data":{}},"excerpt":"<p>10月の中旬ごろに、はとバスツアーに行ってきました。</p>\n<p>ツアーへの参加は今回で2度目です。お盆にも一度参加しており、そのときに大変楽しかったので定期的に行くことにしたという経緯があります。</p>\n<p>それで今回からレポートを書こうと思ったのですが、そもそも「はとバスツアーってどんなのよ？」と聴かれることが多かったので、まずはそこから紹介したいと思います。</p>","more":"<h2 id=\"はとバスツアーとは？\"><a href=\"#はとバスツアーとは？\" class=\"headerlink\" title=\"はとバスツアーとは？\"></a>はとバスツアーとは？</h2><p>株式会社はとバスが提供する国内観光サービスです。<br>基本的に都内から出発して各地の名所を巡る内容となっています。</p>\n<p><a href=\"https://www.hatobus.co.jp/dom/appeal/\">https://www.hatobus.co.jp/dom/appeal/</a></p>\n<p>はとバスの歴史は長く(1950年頃から！)、そのせいか「黄色いバス」のイメージで有名です（そういう空気はあったのですが、記事を書くにあたって改めて知りました）。</p>\n<p>ただ、近年のツアーでは申し込み口が同じでも実施するのは協賛会社だったりするので、必ずしも黄色いバスに乗るわけではないようです。</p>\n<h2 id=\"はとバスツアーのおすすめポイント\"><a href=\"#はとバスツアーのおすすめポイント\" class=\"headerlink\" title=\"はとバスツアーのおすすめポイント\"></a>はとバスツアーのおすすめポイント</h2><h3>日帰りのおでかけプランを楽しめる</h3>\nツアーということで、当日のスケジュールが用意されています。朝に集合して夕方（遅くても19時くらい）には解散するという、とても健康的な仕様。\n\n<p>メインで訪れる場所以外にもいくつかの場所に寄るようになっていて、お土産を買えるように配慮もされています。</p>\n<p>これは実際に参加して感じたことですが、参加者の年齢層が幅広いせいか、どなたにも体力的にきつくないくらいの内容になっています。スケジュールに「ハイキング」とあったときはちょっと身構えたのですが、軽い散策程度だったので安心しましたw</p>\n<p>自分でこうしたプランを考えようと思ったら、位置関係や移動時間も含めて考えないといけないので大変です。その手間が省けるのはよいですね👍</p>\n<h3>全てバスに乗ったまま移動できる</h3>\nバスツアーの最大の特徴ですが、ツアー中の移動は常にバス（指定席）で行います。長距離歩く必要がないですし、帰りに疲れて寝ちゃっても大丈夫。というか僕は毎回寝ていますw\n\n<p>お土産を買って荷物が増えたとしてもバスに置いておけるので、ずっと身軽に行動できます。</p>\n<p>バスで移動するメリットはもう一つあって、移動中にガイドのお姉さんが解説をしてくれます。自分で行ったら調べなかったであろう豆知識が披露されて、しかも意外と面白かったりします。</p>\n<h3>料金がどのコースも同じくらいでリーズナブル</h3>\n日帰りツアーの場合、どのコースもだいたい1万円くらいで参加できます。このキリのいい感じが個人的に好きですw\n\n<p>もちろん内容を見ると、自費で行くよりも安くてお得（特に交通費）です。追加料金が多くかかることもありません。</p>\n<h2 id=\"ツアー参加の流れ\"><a href=\"#ツアー参加の流れ\" class=\"headerlink\" title=\"ツアー参加の流れ\"></a>ツアー参加の流れ</h2><h3>参加申し込み</h3>\n参加申し込みは公式サイトから行うことができます。\n\n<p><a href=\"https://www.hatobus.co.jp/\">https://www.hatobus.co.jp/</a></p>\n<p>行きたい場所やジャンルでプランを選ぶことができます。季節ごとに特集が変わるので、僕は3~4ヶ月に1度は行きたいなと考えています。</p>\n<p>人数と日付を決めて申し込みましょう。このタイミングでクレジットで先払いします。</p>\n<p>後日、ツアー実施決定のメールが送られてきます。基本的には申し込み人数が少なくても実施されるようです。</p>\n<h3>当日</h3>\n当日の朝はツアーごとに指定された場所に集合します。バスがたくさん並んでいるのとスタッフの方が立っているので、申し込んだ名前を伝えて指示に従います。\n\n<p>ツアーを楽しんだら、出発したバス停に戻ってきて解散です！</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>別に回し者ではないのですが、僕みたいな引きこもり気味の方にはとてもオススメです.<br>バスに乗ってる間は自由に過ごせますし、現地でも自由行動な時間が多いためせかせかしてる感じはありません。</p>\n<p>特にメインのプランが日帰りと大変お手軽なので、次の日も休める土曜日などに行ってみるとよいと思います!</p>"},{"title":"ブログを開設しました","date":"2019-10-12T06:13:44.000Z","_content":"\n新たにブログを開設しました🎉\n過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw\n\n良い機会なので、ここに経緯や意気込みを記しておきたいと思います。\n\n<!-- more -->\n\n## ブログ再開の経緯\n\nまとまった文章を発信するプラットフォームが欲しいと思ったから。\n\n次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。\n\n## Qiitaじゃない理由\n\n技術的な話を書く場としてはQiitaが有名。\n\nしかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。\n\n## SNSを使わない理由\n\n普段はTwitterでたくさんつぶやいてます笑\n\nしかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。\n\nそれに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。\n\n## いろんなサービスを使い分けない理由\n\n使うサービスが増えると管理が大変だし、スイッチングコストもかかる。\n\nまた、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。\n\n## 無料ブログサービスを使わない理由\n\n無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。\n\nとはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。\n\nはてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。\n\nせっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。\n\n## その他\n\n実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。\n\n決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。\n\nまた、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。\n\n## 意気込み\n\n個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。\n\n- 技術の知見\n- イベントの参加記録\n- 映画の感想\n- 書評\n- ライフハック\n- ポエム\n\nよって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。\n\n## おわりに\n\n今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。","source":"_posts/2019-10-12-ブログを開設しました.md","raw":"---\ntitle: ブログを開設しました\ndate: 2019-10-12 15:13:44\ncategory: ブログ運営\ntags:\n---\n\n新たにブログを開設しました🎉\n過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw\n\n良い機会なので、ここに経緯や意気込みを記しておきたいと思います。\n\n<!-- more -->\n\n## ブログ再開の経緯\n\nまとまった文章を発信するプラットフォームが欲しいと思ったから。\n\n次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。\n\n## Qiitaじゃない理由\n\n技術的な話を書く場としてはQiitaが有名。\n\nしかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。\n\n## SNSを使わない理由\n\n普段はTwitterでたくさんつぶやいてます笑\n\nしかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。\n\nそれに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。\n\n## いろんなサービスを使い分けない理由\n\n使うサービスが増えると管理が大変だし、スイッチングコストもかかる。\n\nまた、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。\n\n## 無料ブログサービスを使わない理由\n\n無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。\n\nとはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。\n\nはてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。\n\nせっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。\n\n## その他\n\n実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。\n\n決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。\n\nまた、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。\n\n## 意気込み\n\n個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。\n\n- 技術の知見\n- イベントの参加記録\n- 映画の感想\n- 書評\n- ライフハック\n- ポエム\n\nよって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。\n\n## おわりに\n\n今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。","slug":"ブログを開設しました","published":1,"updated":"2020-05-10T04:13:28.761Z","_id":"ck9zec1rp000avbtvahcedn5y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>新たにブログを開設しました🎉<br>過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw</p>\n<p>良い機会なので、ここに経緯や意気込みを記しておきたいと思います。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"ブログ再開の経緯\"><a href=\"#ブログ再開の経緯\" class=\"headerlink\" title=\"ブログ再開の経緯\"></a>ブログ再開の経緯</h2><p>まとまった文章を発信するプラットフォームが欲しいと思ったから。</p>\n<p>次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。</p>\n<h2 id=\"Qiitaじゃない理由\"><a href=\"#Qiitaじゃない理由\" class=\"headerlink\" title=\"Qiitaじゃない理由\"></a>Qiitaじゃない理由</h2><p>技術的な話を書く場としてはQiitaが有名。</p>\n<p>しかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。</p>\n<h2 id=\"SNSを使わない理由\"><a href=\"#SNSを使わない理由\" class=\"headerlink\" title=\"SNSを使わない理由\"></a>SNSを使わない理由</h2><p>普段はTwitterでたくさんつぶやいてます笑</p>\n<p>しかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。</p>\n<p>それに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。</p>\n<h2 id=\"いろんなサービスを使い分けない理由\"><a href=\"#いろんなサービスを使い分けない理由\" class=\"headerlink\" title=\"いろんなサービスを使い分けない理由\"></a>いろんなサービスを使い分けない理由</h2><p>使うサービスが増えると管理が大変だし、スイッチングコストもかかる。</p>\n<p>また、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。</p>\n<h2 id=\"無料ブログサービスを使わない理由\"><a href=\"#無料ブログサービスを使わない理由\" class=\"headerlink\" title=\"無料ブログサービスを使わない理由\"></a>無料ブログサービスを使わない理由</h2><p>無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。</p>\n<p>とはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。</p>\n<p>はてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。</p>\n<p>せっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。</p>\n<h2 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h2><p>実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。</p>\n<p>決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。</p>\n<p>また、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。</p>\n<h2 id=\"意気込み\"><a href=\"#意気込み\" class=\"headerlink\" title=\"意気込み\"></a>意気込み</h2><p>個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。</p>\n<ul>\n<li>技術の知見</li>\n<li>イベントの参加記録</li>\n<li>映画の感想</li>\n<li>書評</li>\n<li>ライフハック</li>\n<li>ポエム</li>\n</ul>\n<p>よって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。</p>\n","site":{"data":{}},"excerpt":"<p>新たにブログを開設しました🎉<br>過去記事を徐々に移行するため、数日後には新鮮味がなくなってると思いますがw</p>\n<p>良い機会なので、ここに経緯や意気込みを記しておきたいと思います。</p>","more":"<h2 id=\"ブログ再開の経緯\"><a href=\"#ブログ再開の経緯\" class=\"headerlink\" title=\"ブログ再開の経緯\"></a>ブログ再開の経緯</h2><p>まとまった文章を発信するプラットフォームが欲しいと思ったから。</p>\n<p>次の章以降の様々な方法を検討して、最終的にwordpressでブログを構築することに決めた。</p>\n<h2 id=\"Qiitaじゃない理由\"><a href=\"#Qiitaじゃない理由\" class=\"headerlink\" title=\"Qiitaじゃない理由\"></a>Qiitaじゃない理由</h2><p>技術的な話を書く場としてはQiitaが有名。</p>\n<p>しかし、僕の場合はライフハックな話とか個人的な考えも書ける場所が欲しい。そういったことをQiitaに書いて炎上とかは本意ではない。</p>\n<h2 id=\"SNSを使わない理由\"><a href=\"#SNSを使わない理由\" class=\"headerlink\" title=\"SNSを使わない理由\"></a>SNSを使わない理由</h2><p>普段はTwitterでたくさんつぶやいてます笑</p>\n<p>しかし、文字数制限があったりソースコードをいい感じに貼れなかったりといった実用的な問題がある。</p>\n<p>それに、皆がざっと眺めるTLに投下するよりも、見たい人だけじっくり見れるような場所に書きたい。後からのアクセス性も欲しい。</p>\n<h2 id=\"いろんなサービスを使い分けない理由\"><a href=\"#いろんなサービスを使い分けない理由\" class=\"headerlink\" title=\"いろんなサービスを使い分けない理由\"></a>いろんなサービスを使い分けない理由</h2><p>使うサービスが増えると管理が大変だし、スイッチングコストもかかる。</p>\n<p>また、webサービスは無料アカウントの扱いがよく変わる。なので、乗り換えながら使う必要があるという点でもスイッチングコストがかかる。</p>\n<h2 id=\"無料ブログサービスを使わない理由\"><a href=\"#無料ブログサービスを使わない理由\" class=\"headerlink\" title=\"無料ブログサービスを使わない理由\"></a>無料ブログサービスを使わない理由</h2><p>無料のブログサービスにも良いものはある。僕も今までAmeba Owndを使ってた。</p>\n<p>とはいえこれらは一長一短。Ameba OwndはやはりMarkdownで書けないのと記事のエクスポートができないのが辛い。</p>\n<p>はてなも候補として考えたけど、有料プランじゃないと独自ドメインを設定できないのが唯一の欠点。</p>\n<p>せっかく自分で書いたコンテンツだし、自分のドメイン管理下に置きたかった。そういうこだわりがない人は、はてなブログを使うのが良いと思う。</p>\n<h2 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h2><p>実はGitHub Pagesと静的ジェネレータを使ったブログ運用が気になって、最後までそっちと悩んだ。</p>\n<p>決め手は、執筆して公開するまでのスピード感。wordpressは管理画面から簡単に投稿できるのに対し、GitHub Pagesを利用する場合はhugoなどの環境をクライアント側で用意する必要がある。</p>\n<p>また、エディタで書いてpushして…というプロセスがちょっと面倒。gitなのでデータ上の記事の管理はやりやすいけどね。</p>\n<h2 id=\"意気込み\"><a href=\"#意気込み\" class=\"headerlink\" title=\"意気込み\"></a>意気込み</h2><p>個人ブログとして思いっきり趣味に寄せるため、以下のような投稿がメインになると思われる。</p>\n<ul>\n<li>技術の知見</li>\n<li>イベントの参加記録</li>\n<li>映画の感想</li>\n<li>書評</li>\n<li>ライフハック</li>\n<li>ポエム</li>\n</ul>\n<p>よって、最低でも月1以上で書きたいことがあれば書くというスタンスでいきたいと思う。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今回はブログへのお気持ちを書いたが、別の機会に運用方法についても書きたい。</p>"},{"title":"ProcessingでSQLiteを扱う","date":"2019-10-28T07:27:08.000Z","_content":"\n過去記事の再掲です。\n\nProcessingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。\n\n<!-- more -->\n\n## 準備\n\nまずはデータベース用のライブラリをスケッチに追加する。\n\nメニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。\n\nキーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。\n\n## SQLiteを扱ってみる\n\nSQLiteオブジェクトを作成してクエリーを投げればok\n\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\nSQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。\n\n### 追記 06/26\n\n返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる","source":"_posts/2019-10-28-ProcessingでSQLiteを扱う.md","raw":"---\ntitle: ProcessingでSQLiteを扱う\ndate: 2019-10-28 16:27:08\ncategory: 技術ネタ\ntags: Processing\n---\n\n過去記事の再掲です。\n\nProcessingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。\n\n<!-- more -->\n\n## 準備\n\nまずはデータベース用のライブラリをスケッチに追加する。\n\nメニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。\n\nキーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。\n\n## SQLiteを扱ってみる\n\nSQLiteオブジェクトを作成してクエリーを投げればok\n\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\nSQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。\n\n### 追記 06/26\n\n返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる","slug":"ProcessingでSQLiteを扱う","published":1,"updated":"2020-05-11T00:36:41.659Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka60a2g80000nttv3btybvaq","content":"<p>過去記事の再掲です。</p>\n<p>Processingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h2><p>まずはデータベース用のライブラリをスケッチに追加する。</p>\n<p>メニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。</p>\n<p>キーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。</p>\n<h2 id=\"SQLiteを扱ってみる\"><a href=\"#SQLiteを扱ってみる\" class=\"headerlink\" title=\"SQLiteを扱ってみる\"></a>SQLiteを扱ってみる</h2><p>SQLiteオブジェクトを作成してクエリーを投げればok</p>\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\n<p>SQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。</p>\n<h3 id=\"追記-06-26\"><a href=\"#追記-06-26\" class=\"headerlink\" title=\"追記 06/26\"></a>追記 06/26</h3><p>返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる</p>\n","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<p>Processingでデータベースを扱うライブラリを使い、SQLiteにアクセスしてみる。</p>","more":"<h2 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h2><p>まずはデータベース用のライブラリをスケッチに追加する。</p>\n<p>メニューバーの「Sketch」→「Import Library」→「Add Library」と進み、ライブラリ検索画面を出す。</p>\n<p>キーワードに「sql」と入力すれば一番上に「BezierSQLib」と出てくるのでそれをインストールしよう。 再びメニューバーから「Sketch」→「Import Library」と進むと先ほどインストールした「BezierSQLib」が追加されているので、これを選択すれば準備は完了である。</p>\n<h2 id=\"SQLiteを扱ってみる\"><a href=\"#SQLiteを扱ってみる\" class=\"headerlink\" title=\"SQLiteを扱ってみる\"></a>SQLiteを扱ってみる</h2><p>SQLiteオブジェクトを作成してクエリーを投げればok</p>\n<script src=\"https://gist.github.com/salmoncode/706d03ecf6b2858d537b.js\"></script>\n\n<p>SQL文の中のクォーテーションマークはちゃんとエスケープしなければならないことに注意。</p>\n<h3 id=\"追記-06-26\"><a href=\"#追記-06-26\" class=\"headerlink\" title=\"追記 06/26\"></a>追記 06/26</h3><p>返り値の取得の仕方が分からない場合や、数値の場合、13行目あたりで db.getColumnNames()を出力してやると、返り値のカラムが一覧で見れる</p>"},{"title":"Processingから外部プログラム・他のスケッチを起動する","date":"2019-10-30T07:35:50.000Z","_content":"\n過去記事の再掲です。\n\nProcessingから他のプログラムを起動する話。\n\n<!-- more -->\n\n## Proessingから外部プログラムを起動する\n\nProcessingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。\n\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n起動して何かキーを押すと「メモ帳」が立ち上がる。\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n## Processingをコマンドから起動する\n\nProcessingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>","source":"_posts/2019-10-30-Processingから外部プログラム・他のスケッチを起動する.md","raw":"---\ntitle: Processingから外部プログラム・他のスケッチを起動する\ndate: 2019-10-30 16:35:50\ncategory: 技術ネタ\ntags: Processing\n---\n\n過去記事の再掲です。\n\nProcessingから他のプログラムを起動する話。\n\n<!-- more -->\n\n## Proessingから外部プログラムを起動する\n\nProcessingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。\n\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n起動して何かキーを押すと「メモ帳」が立ち上がる。\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n## Processingをコマンドから起動する\n\nProcessingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>","slug":"Processingから外部プログラム・他のスケッチを起動する","published":1,"updated":"2020-05-11T00:37:01.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka60a2gf0001nttv6cqt1i48","content":"<p>過去記事の再掲です。</p>\n<p>Processingから他のプログラムを起動する話。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Proessingから外部プログラムを起動する\"><a href=\"#Proessingから外部プログラムを起動する\" class=\"headerlink\" title=\"Proessingから外部プログラムを起動する\"></a>Proessingから外部プログラムを起動する</h2><p>Processingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。</p>\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n<p>起動して何かキーを押すと「メモ帳」が立ち上がる。</p>\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n<h2 id=\"Processingをコマンドから起動する\"><a href=\"#Processingをコマンドから起動する\" class=\"headerlink\" title=\"Processingをコマンドから起動する\"></a>Processingをコマンドから起動する</h2><p>Processingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である</p>\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<p>Processingから他のプログラムを起動する話。</p>","more":"<h2 id=\"Proessingから外部プログラムを起動する\"><a href=\"#Proessingから外部プログラムを起動する\" class=\"headerlink\" title=\"Proessingから外部プログラムを起動する\"></a>Proessingから外部プログラムを起動する</h2><p>Processingではjavaのコードが動くので、簡単に外部のプログラムを起動できる。</p>\n<script src=\"https://gist.github.com/salmoncode/19eae2b4874ea5ac3574.js\"></script>\n\n<p>起動して何かキーを押すと「メモ帳」が立ち上がる。</p>\n<h3>他のスケッチを起動する</h3>\n上記のように記述することでcmdのように外部コマンドを使用することができる。 これを利用することでProcessingからProcessingを起動できる。そのためには、Processingを起動するコマンドが必要だ。\n\n<h2 id=\"Processingをコマンドから起動する\"><a href=\"#Processingをコマンドから起動する\" class=\"headerlink\" title=\"Processingをコマンドから起動する\"></a>Processingをコマンドから起動する</h2><p>Processingをダウンロードすると、「processing.exe」と一緒に「processing-java.exe」という実行ファイルもついてくる。環境変数にこいつのパスを通すことでコマンドからProcessingを起動することができるようになり、他のエディタでのコーディングが便利になったりする。これを利用してみよう。 Processingのスケッチを直接実行するコマンドは以下である</p>\n<script src=\"https://gist.github.com/salmoncode/3549394ec39b47716458.js\"></script>"},{"title":"Win2Dでお絵かきプログラミング","date":"2019-10-29T07:36:29.000Z","_content":"\n過去記事の再掲です。\n\n## はじめに\n\n僕は普段、簡単なプログラミングにはProcessingを使っている。\njava使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。\nところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。\n\nさて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。\n新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。\nGUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。\n\nそんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。\n\n<!-- more -->\n\n## 導入\n\n「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n## Win2dの初期設定\n\n公式ドキュメントに使い方が載っている。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a>\n\nMainPage.xamlのPageタグの中に以下の文を書き込み、\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\nGridタグの中に以下の文を書き込めばよい。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\nMainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\nプロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。\n\n## 図形の描画\n\nargsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n実行するとこんな感じ\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\nそういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n## アニメーションをつくる\n\nIntroductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\nコードのほうも少し変える。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n## おわりに\n\n意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a>","source":"_posts/2019-10-29-Win2Dでお絵かきプログラミング.md","raw":"---\ntitle: Win2Dでお絵かきプログラミング\ndate: 2019-10-29 16:36:29\ncategory: 技術ネタ\ntags:\n- C#\n- Win2D\n---\n\n過去記事の再掲です。\n\n## はじめに\n\n僕は普段、簡単なプログラミングにはProcessingを使っている。\njava使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。\nところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。\n\nさて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。\n新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。\nGUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。\n\nそんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。\n\n<!-- more -->\n\n## 導入\n\n「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n## Win2dの初期設定\n\n公式ドキュメントに使い方が載っている。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a>\n\nMainPage.xamlのPageタグの中に以下の文を書き込み、\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\nGridタグの中に以下の文を書き込めばよい。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\nMainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\nプロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。\n\n## 図形の描画\n\nargsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n実行するとこんな感じ\n\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\nそういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n## アニメーションをつくる\n\nIntroductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\nコードのほうも少し変える。\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n## おわりに\n\n意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。\n\n<a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a>","slug":"Win2Dでお絵かきプログラミング","published":1,"updated":"2020-05-11T00:36:52.401Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka60a2gh0003nttvdfi3ca8f","content":"<p>過去記事の再掲です。</p>\n<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>僕は普段、簡単なプログラミングにはProcessingを使っている。<br>java使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。<br>ところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。</p>\n<p>さて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。<br>新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。<br>GUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。</p>\n<p>そんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h2><p>「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n<p>新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n<h2 id=\"Win2dの初期設定\"><a href=\"#Win2dの初期設定\" class=\"headerlink\" title=\"Win2dの初期設定\"></a>Win2dの初期設定</h2><p>公式ドキュメントに使い方が載っている。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a></p>\n<p>MainPage.xamlのPageタグの中に以下の文を書き込み、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\n<p>Gridタグの中に以下の文を書き込めばよい。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\n<p>MainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\n<p>プロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。</p>\n<h2 id=\"図形の描画\"><a href=\"#図形の描画\" class=\"headerlink\" title=\"図形の描画\"></a>図形の描画</h2><p>argsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n<p>実行するとこんな感じ</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\n<p>そういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n<h2 id=\"アニメーションをつくる\"><a href=\"#アニメーションをつくる\" class=\"headerlink\" title=\"アニメーションをつくる\"></a>アニメーションをつくる</h2><p>Introductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\n<p>コードのほうも少し変える。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a></p>\n","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>僕は普段、簡単なプログラミングにはProcessingを使っている。<br>java使えるし、見た目のあるアプリケーションを簡単に開発できるので気に入っている。<br>ところで、最近WindowsAPIを使って開発したいものがあった。こういうものはVisualStudioを使ってC#で作るのがよい。</p>\n<p>さて、WindowsのGUI開発にはいくつか種類があって、「フォームアプリケーション」とかWPFとかUWPとかある。<br>新しいのがUWPで、センサーの値を拾ったりするのが簡単である。見た目の部分はxamlを使って描くらしい。<br>GUIの部品はある程度用意されており、デザイナーの使い勝手もとてもいい。ただ前述のとおりProcessingが好きな僕は、できればUWPでも簡単に図形を描画したりしたい。</p>\n<p>そんな願いを叶えてくれるのが、Microsoftが出している(!)Win2Dというライブラリである。 簡単に説明すると、DirectXのラッパーである。</p>","more":"<h2 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h2><p>「ファイル」→「新規作成」→「プロジェクト」から「空のアプリケーション」を選択。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314115327p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314115327.png\" alt=\"f:id:salmon2073:20160314115327p:plain\">\n\n<p>新しいプロジェクトが開いたら、「ツール」→「NuGetパッケージマネージャー」→「ソリューションのNuGetパッケージの管理」と進み、 「参照」タブを選択。検索バーにwin2dと入力するといくつか候補が出てくる。 赤いアイコンのやつがうまく動いてくれるので、win10の人は基本的に「Win2D.uwp」を選択してインストール。プロジェクト作成時に(Windows8.1)と表示された人は「Win2D.wiin81」を選択しよう。</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314120116p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314120116.png\" alt=\"f:id:salmon2073:20160314120116p:plain\">\n\n<h2 id=\"Win2dの初期設定\"><a href=\"#Win2dの初期設定\" class=\"headerlink\" title=\"Win2dの初期設定\"></a>Win2dの初期設定</h2><p>公式ドキュメントに使い方が載っている。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\">Introduction</a></p>\n<p>MainPage.xamlのPageタグの中に以下の文を書き込み、</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">xmlns:canvas=\"using:Microsoft.Graphics.Canvas.UI.Xaml\"</pre>\n<p>Gridタグの中に以下の文を書き込めばよい。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasControl Draw=\"CanvasControl_Draw\" ClearColor=\"White\" Loaded=\"CanvasControl_Loaded\"/&gt;</pre>\n<p>MainPage.xaml.csにセットアップ用のメソッドと描画用のメソッドを実装する。 最低限動くコードは以下の通り。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2\n{\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page\n    {\n        <span class=\"synType\">public</span> MainPage()\n        {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            <span class=\"synComment\">/*ここに描画命令を書く*/</span>\n        }\n    }\n}\n\n</pre>\n<p>プロセッサアーキテクチャが云々言われたらAnyCPUから他のものに変えよう。 ここまでくるとprocessingとそっくりなので書きやすい。</p>\n<h2 id=\"図形の描画\"><a href=\"#図形の描画\" class=\"headerlink\" title=\"図形の描画\"></a>図形の描画</h2><p>argsからDrawingSessionを取り出して描画命令を呼び出す。 簡単な命令をいくつか。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.Text;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App2 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> CanvasControl_Draw(CanvasControl sender, CanvasDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n            d.FillRectangle(<span class=\"synConstant\">250</span>, <span class=\"synConstant\">250</span>, <span class=\"synConstant\">700</span>, <span class=\"synConstant\">400</span>, Color.FromArgb(<span class=\"synConstant\">50</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">50</span>, <span class=\"synConstant\">250</span>));\n            d.DrawEllipse(<span class=\"synConstant\">450</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            d.FillEllipse(<span class=\"synConstant\">750</span>, <span class=\"synConstant\">450</span>, <span class=\"synConstant\">200</span>, <span class=\"synConstant\">200</span>, Color.FromArgb(<span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">100</span>, <span class=\"synConstant\">255</span>));\n            CanvasTextFormat f = <span class=\"synStatement\">new</span> CanvasTextFormat();\n            f.FontSize = <span class=\"synConstant\">30</span>;\n            d.DrawText(<span class=\"synConstant\">\"Hello World!\"</span>, <span class=\"synConstant\">370</span>, <span class=\"synConstant\">430</span>, Color.FromArgb(<span class=\"synConstant\">200</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>, <span class=\"synConstant\">255</span>),f);\n        }\n    }\n}\n</pre>\n<p>実行するとこんな感じ</p>\n<img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20160314134044p:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160314/20160314134044.png\" alt=\"f:id:salmon2073:20160314134044p:plain\">\n\n<p>そういえば、ウィンドウの縦横情報を取得する方法が分からなくて困った。こんな感じに取得できる。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\">var width = sender.Size.Width;\nvar hight = sender.Size.Height;\n</pre>\n\n<h2 id=\"アニメーションをつくる\"><a href=\"#アニメーションをつくる\" class=\"headerlink\" title=\"アニメーションをつくる\"></a>アニメーションをつくる</h2><p>Introductionのコードは静止したスケッチを描くようなので、アニメーションをしようと思ったらcanvasを以下のように書き換える。</p>\n<pre class=\"code\" data-lang=\"\" data-unlink=\"\">&lt;canvas:CanvasAnimatedControl x:Name=\"canvas\" Draw=\"canvas_DrawAnimated\" ClearColor=\"White\"  CreateResources=\"canvas_CreateResources\"/&gt;\n</pre>\n<p>コードのほうも少し変える。</p>\n<pre class=\"code lang-cs\" data-lang=\"cs\" data-unlink=\"\"><span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI;\n<span class=\"synStatement\">using</span> Microsoft.Graphics.Canvas.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml;\n<span class=\"synStatement\">using</span> Windows.UI.Xaml.Controls;\n\n<span class=\"synType\">namespace</span> App3 {\n    <span class=\"synType\">public</span> <span class=\"synType\">sealed</span> <span class=\"synStatement\">partial</span> <span class=\"synType\">class</span> MainPage : Page {\n        <span class=\"synType\">public</span> MainPage() {\n            <span class=\"synStatement\">this</span>.InitializeComponent();\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_Loaded(<span class=\"synType\">object</span> sender, RoutedEventArgs e) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_CreateResources(CanvasAnimatedControl sender, CanvasCreateResourcesEventArgs args) {\n\n        }\n\n        <span class=\"synType\">private</span> <span class=\"synType\">void</span> canvas_DrawAnimated(ICanvasAnimatedControl sender, CanvasAnimatedDrawEventArgs args) {\n            CanvasDrawingSession d = args.DrawingSession;\n        }\n    }\n}\n</pre>\n\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>意外と日本語の情報が少なかった。 本来はもっといろんなCG処理を描けるものらしいので、気が向いたらやってみる。</p>\n<p><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a><a href=\"https://microsoft.github.io/Win2D/html/Introduction.htm\"></a></p>"},{"title":"2020年度上半期の目標（エンジニア編）","date":"2020-05-14T00:17:45.000Z","thumbnail":"https://salmoncode.com/thumbnails/2020-5-14.jpg","_content":"\n## はじめに\n某ウイルスのせいで外出できなくなってから、もう1ヶ月以上は経っています…\n\n4月はじめの時は、この状況が収束してから目標設定をしようと思っていたのですが、どうやらまだまだ続きそうですね。ヘタしたら1年続いてもおかしくない気がしてきました。\n\nそうなった場合に「一年間何もしませんでした」ではもったいないので、現状のままやれることについて目標を立てたいと思います。\n\n<!-- more -->\n\n## フロントエンドのみで実装されたサービスを1つリリースする\nプライベートでは今まで、簡単なchrome拡張やコンテストのためのデモアプリくらいしか実装してきませんでした。\n\nそこで今期は、webから利用可能なサービスを実装したいと考えています。\n\nとはいえ、いきなりサーバーの運用をするのは技術的にもコスト的にもハードルが高いので、まずはフロントエンドのみの実装という縛りでやろうと思います。\n\nサービスのアイディアは今考えているところですが、何かリモート作業に役立つものができたらいいなと考えています。\n\n## 代表的なCLIツールを日常的に使えるようになる\n便利そうだな〜と思いつつ、今まで手を出してこなかったツール達があります。\n\n具体的には以下のやつらです。\n- vim\n- git\n- tmux\n\n「いや、tmuxはともかくvimやgit使ってないわけないでしょ」と言われそうですが、まぁ実際には使っていますw\n\nしかし、vimなんて「iして編集したらESCからの:wq」くらいにしか覚えていません。最近になってようやくddで一行消せるとか、shift+gで最後の行に飛べるとか覚えた程度です。行番号の出し方は毎回ググってますw\n\nそういうレベルなので、ペア作業してるときとか相方にイライラさせてるような気もしておりw、もうちょっとまともに使えるようになりたいなーと思っている次第です、ハイ。\n\n今までこのレベルで済んでいたのは、僕が主にGUIエディタ（というかVSCode）使いであることが大きいと思います。今までは「別にクリックで動くんだったらコマンド覚えなくてもよくない？」というスタンスでした。\n\nしかし最近は、双方を組み合わせることでより作業効率が上がるのではないか？と思うようになりました。例えば、VSCodeのエディタでvimのキーバインディングを使うとか、これまたVSCodeのターミナルでtmuxを使うとかです。\n\nどちらかといえばマイナーな使い道でしょうが、一歩進んだ使い方ができるような予感があります。\n\n## 6冊以上の技術書を読む\n僕はこれまで、技術書というものをあまり読んできませんでした（資格試験のための問題集等を除く）。\n理由は以下の通りです。\n- わからないことはwebで検索することで解決できた\n- 理論を読むよりもサンプルコードを動かす方が理解しやすかった\n\nというわけで、APIリファレンスとか、QiitaやGitHubでコードを読めば十分だったのですが、最近になって書籍を読むメリットが思い浮かんだことで、モチベーションが出てきました。\n\n具体的には以下の通りです。\n\n- コードの裏にある思想を学ぶことができる\n- 検索クエリが思いつかなかった情報を得ることができる\n- 論拠としての信頼性が高い\n- 適切な文章表現を目にすることができる\n\n「コードの裏にある思想を学ぶことができる」というのは特に最近実感していて、機能としては同じことを実現していても、保守のしやすさという点で差がつくことがあります。一般にデザインパターンと呼ばれるものもそうですし、「リーダブルコード」に書かれているような内容もそうだと思います。\n\nそういったことを学ぶには、個人がオレオレ流を紹介している記事を読むよりも、複数人による添削が入っている（であろう）書籍を読む方が適切なように感じました。これは「論拠としての信頼性が高い」にも近いですね。\n\nまた、最後の「適切な文章表現を目にすることができる」というのも個人的には期待しています。\n\n僕は知識を獲得できたかどうかの指標として、「相手に伝えることができるか」ということを意識していますが、やはりなかなか難しいです。なので、書籍を読むことで技術そのものだけでなく、それを説明するエッセンスについても学べれば良いなと思っています。\n\n以上を踏まえると、実は紙の書籍に限らずとも論文のPDFや、経典のようなwebページを読むのでも良いかもしれません。が、分かりやすい目安として、1ヶ月に1冊=半年で6冊を目標にしたいと思います。\n\n## Pythonを学んで競技プログラミングを始める\n僕はなんらかプログラミングをするとき、言語から入ることはほとんどありません。なぜなら、多くの場合使う言語はプラットフォームによって固定されるか、プロジェクトの経緯によって決まるかのどちらかだからです。\n\nそのせいか、中途半端に汎用性のあるPythonやRubyはあまり書いたことがありません。「書きやすい」とよく聞くものの、特別言語仕様が好みということも無いですし、むしろ基本的な構文の記法が独自だったりして面倒だなぁと思うことさえありますw\n\nそんな僕がなぜPythonを学ぶのかというと、競技プログラミングや学術計算に興味が出てきたからです。\n\n個人的に競技プログラミングはスポーツや趣味の類だと思っており、今まで興味がありませんでした。\nしかし、エンジニアとしてアルゴリズム力を上げておくことも大事だなと思うようになり、それには競技プログラミングの問題が良い題材になるのではないかと考えたわけです。\n\nなぜアルゴリズム力を上げることが大事だと思ったのかというと、特別理由はありませんw\nただ、アルゴリズム力があるエンジニアは「つよいエンジニア」として認識されるので、自分の市場価値を上げるにあたっては有効かなと考えています。\n\nでは競プロにPythonが最適かというと、実は界隈ではC++の方がメジャーのよう、Pythonは2番手らしいですね。\n\n参考: https://qiita.com/knakajima3027/items/809be5abe5c3d9f29ee7\n\nとはいえ、サービスを実装するときにC++を使うことはほぼないので、僕はPythonを選択したいと思います。競技プログラミングにハマって高みを目指したくなったら乗り換えるかもしれないです。\n\n## Androidにおけるメディア処理を理解する\n\n業務の都合上Androidの開発力を上げる必要が出てきており、個人的にも今興味があるプラットフォームです。\n\nそのためには「kotlinを勉強する」のような目標も考えたのですが、領域を絞った目標にした方が達成度合いが分かりやすいので、今回はメディア処理に着目しました。\n\n具体的には、以下のようなことをできるようになりたいです。\n\n- カメラの映像を取得して描画する\n- 映像のフレームを取得してフィルターをかけられる\n- マイク入力にフィルターをかけられる\n- 録画録音ができる\n- 他の端末とメディア通信ができる\n\n## おわりに\n\n今年度上半期の目標を考えたのですが、技術的な学習目標が多くなったので「エンジニア編」として切り出してみました。\n\nこうしてみると、今期は今までやってこなかった領域を勉強したい気持ちが高いような気がします。\n\n一方で、ここ一年くらい勉強した内容で実現したいアイディアもあるので、それはしっかり形にしてアウトプットしたいと思います。\n\n生活編も別記事でまとめます！\n","source":"_posts/2020-05-14-2020年度上半期の目標（エンジニア編）.md","raw":"---\ntitle: 2020年度上半期の目標（エンジニア編）\ndate: 2020-05-14 09:17:45\ncategory: 日記\ntags:\nthumbnail: https://salmoncode.com/thumbnails/2020-5-14.jpg\n---\n\n## はじめに\n某ウイルスのせいで外出できなくなってから、もう1ヶ月以上は経っています…\n\n4月はじめの時は、この状況が収束してから目標設定をしようと思っていたのですが、どうやらまだまだ続きそうですね。ヘタしたら1年続いてもおかしくない気がしてきました。\n\nそうなった場合に「一年間何もしませんでした」ではもったいないので、現状のままやれることについて目標を立てたいと思います。\n\n<!-- more -->\n\n## フロントエンドのみで実装されたサービスを1つリリースする\nプライベートでは今まで、簡単なchrome拡張やコンテストのためのデモアプリくらいしか実装してきませんでした。\n\nそこで今期は、webから利用可能なサービスを実装したいと考えています。\n\nとはいえ、いきなりサーバーの運用をするのは技術的にもコスト的にもハードルが高いので、まずはフロントエンドのみの実装という縛りでやろうと思います。\n\nサービスのアイディアは今考えているところですが、何かリモート作業に役立つものができたらいいなと考えています。\n\n## 代表的なCLIツールを日常的に使えるようになる\n便利そうだな〜と思いつつ、今まで手を出してこなかったツール達があります。\n\n具体的には以下のやつらです。\n- vim\n- git\n- tmux\n\n「いや、tmuxはともかくvimやgit使ってないわけないでしょ」と言われそうですが、まぁ実際には使っていますw\n\nしかし、vimなんて「iして編集したらESCからの:wq」くらいにしか覚えていません。最近になってようやくddで一行消せるとか、shift+gで最後の行に飛べるとか覚えた程度です。行番号の出し方は毎回ググってますw\n\nそういうレベルなので、ペア作業してるときとか相方にイライラさせてるような気もしておりw、もうちょっとまともに使えるようになりたいなーと思っている次第です、ハイ。\n\n今までこのレベルで済んでいたのは、僕が主にGUIエディタ（というかVSCode）使いであることが大きいと思います。今までは「別にクリックで動くんだったらコマンド覚えなくてもよくない？」というスタンスでした。\n\nしかし最近は、双方を組み合わせることでより作業効率が上がるのではないか？と思うようになりました。例えば、VSCodeのエディタでvimのキーバインディングを使うとか、これまたVSCodeのターミナルでtmuxを使うとかです。\n\nどちらかといえばマイナーな使い道でしょうが、一歩進んだ使い方ができるような予感があります。\n\n## 6冊以上の技術書を読む\n僕はこれまで、技術書というものをあまり読んできませんでした（資格試験のための問題集等を除く）。\n理由は以下の通りです。\n- わからないことはwebで検索することで解決できた\n- 理論を読むよりもサンプルコードを動かす方が理解しやすかった\n\nというわけで、APIリファレンスとか、QiitaやGitHubでコードを読めば十分だったのですが、最近になって書籍を読むメリットが思い浮かんだことで、モチベーションが出てきました。\n\n具体的には以下の通りです。\n\n- コードの裏にある思想を学ぶことができる\n- 検索クエリが思いつかなかった情報を得ることができる\n- 論拠としての信頼性が高い\n- 適切な文章表現を目にすることができる\n\n「コードの裏にある思想を学ぶことができる」というのは特に最近実感していて、機能としては同じことを実現していても、保守のしやすさという点で差がつくことがあります。一般にデザインパターンと呼ばれるものもそうですし、「リーダブルコード」に書かれているような内容もそうだと思います。\n\nそういったことを学ぶには、個人がオレオレ流を紹介している記事を読むよりも、複数人による添削が入っている（であろう）書籍を読む方が適切なように感じました。これは「論拠としての信頼性が高い」にも近いですね。\n\nまた、最後の「適切な文章表現を目にすることができる」というのも個人的には期待しています。\n\n僕は知識を獲得できたかどうかの指標として、「相手に伝えることができるか」ということを意識していますが、やはりなかなか難しいです。なので、書籍を読むことで技術そのものだけでなく、それを説明するエッセンスについても学べれば良いなと思っています。\n\n以上を踏まえると、実は紙の書籍に限らずとも論文のPDFや、経典のようなwebページを読むのでも良いかもしれません。が、分かりやすい目安として、1ヶ月に1冊=半年で6冊を目標にしたいと思います。\n\n## Pythonを学んで競技プログラミングを始める\n僕はなんらかプログラミングをするとき、言語から入ることはほとんどありません。なぜなら、多くの場合使う言語はプラットフォームによって固定されるか、プロジェクトの経緯によって決まるかのどちらかだからです。\n\nそのせいか、中途半端に汎用性のあるPythonやRubyはあまり書いたことがありません。「書きやすい」とよく聞くものの、特別言語仕様が好みということも無いですし、むしろ基本的な構文の記法が独自だったりして面倒だなぁと思うことさえありますw\n\nそんな僕がなぜPythonを学ぶのかというと、競技プログラミングや学術計算に興味が出てきたからです。\n\n個人的に競技プログラミングはスポーツや趣味の類だと思っており、今まで興味がありませんでした。\nしかし、エンジニアとしてアルゴリズム力を上げておくことも大事だなと思うようになり、それには競技プログラミングの問題が良い題材になるのではないかと考えたわけです。\n\nなぜアルゴリズム力を上げることが大事だと思ったのかというと、特別理由はありませんw\nただ、アルゴリズム力があるエンジニアは「つよいエンジニア」として認識されるので、自分の市場価値を上げるにあたっては有効かなと考えています。\n\nでは競プロにPythonが最適かというと、実は界隈ではC++の方がメジャーのよう、Pythonは2番手らしいですね。\n\n参考: https://qiita.com/knakajima3027/items/809be5abe5c3d9f29ee7\n\nとはいえ、サービスを実装するときにC++を使うことはほぼないので、僕はPythonを選択したいと思います。競技プログラミングにハマって高みを目指したくなったら乗り換えるかもしれないです。\n\n## Androidにおけるメディア処理を理解する\n\n業務の都合上Androidの開発力を上げる必要が出てきており、個人的にも今興味があるプラットフォームです。\n\nそのためには「kotlinを勉強する」のような目標も考えたのですが、領域を絞った目標にした方が達成度合いが分かりやすいので、今回はメディア処理に着目しました。\n\n具体的には、以下のようなことをできるようになりたいです。\n\n- カメラの映像を取得して描画する\n- 映像のフレームを取得してフィルターをかけられる\n- マイク入力にフィルターをかけられる\n- 録画録音ができる\n- 他の端末とメディア通信ができる\n\n## おわりに\n\n今年度上半期の目標を考えたのですが、技術的な学習目標が多くなったので「エンジニア編」として切り出してみました。\n\nこうしてみると、今期は今までやってこなかった領域を勉強したい気持ちが高いような気がします。\n\n一方で、ここ一年くらい勉強した内容で実現したいアイディアもあるので、それはしっかり形にしてアウトプットしたいと思います。\n\n生活編も別記事でまとめます！\n","slug":"2020年度上半期の目標（エンジニア編）","published":1,"updated":"2020-05-14T17:44:59.062Z","_id":"cka60y8a300002wtv45ni5sh0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>某ウイルスのせいで外出できなくなってから、もう1ヶ月以上は経っています…</p>\n<p>4月はじめの時は、この状況が収束してから目標設定をしようと思っていたのですが、どうやらまだまだ続きそうですね。ヘタしたら1年続いてもおかしくない気がしてきました。</p>\n<p>そうなった場合に「一年間何もしませんでした」ではもったいないので、現状のままやれることについて目標を立てたいと思います。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"フロントエンドのみで実装されたサービスを1つリリースする\"><a href=\"#フロントエンドのみで実装されたサービスを1つリリースする\" class=\"headerlink\" title=\"フロントエンドのみで実装されたサービスを1つリリースする\"></a>フロントエンドのみで実装されたサービスを1つリリースする</h2><p>プライベートでは今まで、簡単なchrome拡張やコンテストのためのデモアプリくらいしか実装してきませんでした。</p>\n<p>そこで今期は、webから利用可能なサービスを実装したいと考えています。</p>\n<p>とはいえ、いきなりサーバーの運用をするのは技術的にもコスト的にもハードルが高いので、まずはフロントエンドのみの実装という縛りでやろうと思います。</p>\n<p>サービスのアイディアは今考えているところですが、何かリモート作業に役立つものができたらいいなと考えています。</p>\n<h2 id=\"代表的なCLIツールを日常的に使えるようになる\"><a href=\"#代表的なCLIツールを日常的に使えるようになる\" class=\"headerlink\" title=\"代表的なCLIツールを日常的に使えるようになる\"></a>代表的なCLIツールを日常的に使えるようになる</h2><p>便利そうだな〜と思いつつ、今まで手を出してこなかったツール達があります。</p>\n<p>具体的には以下のやつらです。</p>\n<ul>\n<li>vim</li>\n<li>git</li>\n<li>tmux</li>\n</ul>\n<p>「いや、tmuxはともかくvimやgit使ってないわけないでしょ」と言われそうですが、まぁ実際には使っていますw</p>\n<p>しかし、vimなんて「iして編集したらESCからの:wq」くらいにしか覚えていません。最近になってようやくddで一行消せるとか、shift+gで最後の行に飛べるとか覚えた程度です。行番号の出し方は毎回ググってますw</p>\n<p>そういうレベルなので、ペア作業してるときとか相方にイライラさせてるような気もしておりw、もうちょっとまともに使えるようになりたいなーと思っている次第です、ハイ。</p>\n<p>今までこのレベルで済んでいたのは、僕が主にGUIエディタ（というかVSCode）使いであることが大きいと思います。今までは「別にクリックで動くんだったらコマンド覚えなくてもよくない？」というスタンスでした。</p>\n<p>しかし最近は、双方を組み合わせることでより作業効率が上がるのではないか？と思うようになりました。例えば、VSCodeのエディタでvimのキーバインディングを使うとか、これまたVSCodeのターミナルでtmuxを使うとかです。</p>\n<p>どちらかといえばマイナーな使い道でしょうが、一歩進んだ使い方ができるような予感があります。</p>\n<h2 id=\"6冊以上の技術書を読む\"><a href=\"#6冊以上の技術書を読む\" class=\"headerlink\" title=\"6冊以上の技術書を読む\"></a>6冊以上の技術書を読む</h2><p>僕はこれまで、技術書というものをあまり読んできませんでした（資格試験のための問題集等を除く）。<br>理由は以下の通りです。</p>\n<ul>\n<li>わからないことはwebで検索することで解決できた</li>\n<li>理論を読むよりもサンプルコードを動かす方が理解しやすかった</li>\n</ul>\n<p>というわけで、APIリファレンスとか、QiitaやGitHubでコードを読めば十分だったのですが、最近になって書籍を読むメリットが思い浮かんだことで、モチベーションが出てきました。</p>\n<p>具体的には以下の通りです。</p>\n<ul>\n<li>コードの裏にある思想を学ぶことができる</li>\n<li>検索クエリが思いつかなかった情報を得ることができる</li>\n<li>論拠としての信頼性が高い</li>\n<li>適切な文章表現を目にすることができる</li>\n</ul>\n<p>「コードの裏にある思想を学ぶことができる」というのは特に最近実感していて、機能としては同じことを実現していても、保守のしやすさという点で差がつくことがあります。一般にデザインパターンと呼ばれるものもそうですし、「リーダブルコード」に書かれているような内容もそうだと思います。</p>\n<p>そういったことを学ぶには、個人がオレオレ流を紹介している記事を読むよりも、複数人による添削が入っている（であろう）書籍を読む方が適切なように感じました。これは「論拠としての信頼性が高い」にも近いですね。</p>\n<p>また、最後の「適切な文章表現を目にすることができる」というのも個人的には期待しています。</p>\n<p>僕は知識を獲得できたかどうかの指標として、「相手に伝えることができるか」ということを意識していますが、やはりなかなか難しいです。なので、書籍を読むことで技術そのものだけでなく、それを説明するエッセンスについても学べれば良いなと思っています。</p>\n<p>以上を踏まえると、実は紙の書籍に限らずとも論文のPDFや、経典のようなwebページを読むのでも良いかもしれません。が、分かりやすい目安として、1ヶ月に1冊=半年で6冊を目標にしたいと思います。</p>\n<h2 id=\"Pythonを学んで競技プログラミングを始める\"><a href=\"#Pythonを学んで競技プログラミングを始める\" class=\"headerlink\" title=\"Pythonを学んで競技プログラミングを始める\"></a>Pythonを学んで競技プログラミングを始める</h2><p>僕はなんらかプログラミングをするとき、言語から入ることはほとんどありません。なぜなら、多くの場合使う言語はプラットフォームによって固定されるか、プロジェクトの経緯によって決まるかのどちらかだからです。</p>\n<p>そのせいか、中途半端に汎用性のあるPythonやRubyはあまり書いたことがありません。「書きやすい」とよく聞くものの、特別言語仕様が好みということも無いですし、むしろ基本的な構文の記法が独自だったりして面倒だなぁと思うことさえありますw</p>\n<p>そんな僕がなぜPythonを学ぶのかというと、競技プログラミングや学術計算に興味が出てきたからです。</p>\n<p>個人的に競技プログラミングはスポーツや趣味の類だと思っており、今まで興味がありませんでした。<br>しかし、エンジニアとしてアルゴリズム力を上げておくことも大事だなと思うようになり、それには競技プログラミングの問題が良い題材になるのではないかと考えたわけです。</p>\n<p>なぜアルゴリズム力を上げることが大事だと思ったのかというと、特別理由はありませんw<br>ただ、アルゴリズム力があるエンジニアは「つよいエンジニア」として認識されるので、自分の市場価値を上げるにあたっては有効かなと考えています。</p>\n<p>では競プロにPythonが最適かというと、実は界隈ではC++の方がメジャーのよう、Pythonは2番手らしいですね。</p>\n<p>参考: <a href=\"https://qiita.com/knakajima3027/items/809be5abe5c3d9f29ee7\">https://qiita.com/knakajima3027/items/809be5abe5c3d9f29ee7</a></p>\n<p>とはいえ、サービスを実装するときにC++を使うことはほぼないので、僕はPythonを選択したいと思います。競技プログラミングにハマって高みを目指したくなったら乗り換えるかもしれないです。</p>\n<h2 id=\"Androidにおけるメディア処理を理解する\"><a href=\"#Androidにおけるメディア処理を理解する\" class=\"headerlink\" title=\"Androidにおけるメディア処理を理解する\"></a>Androidにおけるメディア処理を理解する</h2><p>業務の都合上Androidの開発力を上げる必要が出てきており、個人的にも今興味があるプラットフォームです。</p>\n<p>そのためには「kotlinを勉強する」のような目標も考えたのですが、領域を絞った目標にした方が達成度合いが分かりやすいので、今回はメディア処理に着目しました。</p>\n<p>具体的には、以下のようなことをできるようになりたいです。</p>\n<ul>\n<li>カメラの映像を取得して描画する</li>\n<li>映像のフレームを取得してフィルターをかけられる</li>\n<li>マイク入力にフィルターをかけられる</li>\n<li>録画録音ができる</li>\n<li>他の端末とメディア通信ができる</li>\n</ul>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今年度上半期の目標を考えたのですが、技術的な学習目標が多くなったので「エンジニア編」として切り出してみました。</p>\n<p>こうしてみると、今期は今までやってこなかった領域を勉強したい気持ちが高いような気がします。</p>\n<p>一方で、ここ一年くらい勉強した内容で実現したいアイディアもあるので、それはしっかり形にしてアウトプットしたいと思います。</p>\n<p>生活編も別記事でまとめます！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>某ウイルスのせいで外出できなくなってから、もう1ヶ月以上は経っています…</p>\n<p>4月はじめの時は、この状況が収束してから目標設定をしようと思っていたのですが、どうやらまだまだ続きそうですね。ヘタしたら1年続いてもおかしくない気がしてきました。</p>\n<p>そうなった場合に「一年間何もしませんでした」ではもったいないので、現状のままやれることについて目標を立てたいと思います。</p>","more":"<h2 id=\"フロントエンドのみで実装されたサービスを1つリリースする\"><a href=\"#フロントエンドのみで実装されたサービスを1つリリースする\" class=\"headerlink\" title=\"フロントエンドのみで実装されたサービスを1つリリースする\"></a>フロントエンドのみで実装されたサービスを1つリリースする</h2><p>プライベートでは今まで、簡単なchrome拡張やコンテストのためのデモアプリくらいしか実装してきませんでした。</p>\n<p>そこで今期は、webから利用可能なサービスを実装したいと考えています。</p>\n<p>とはいえ、いきなりサーバーの運用をするのは技術的にもコスト的にもハードルが高いので、まずはフロントエンドのみの実装という縛りでやろうと思います。</p>\n<p>サービスのアイディアは今考えているところですが、何かリモート作業に役立つものができたらいいなと考えています。</p>\n<h2 id=\"代表的なCLIツールを日常的に使えるようになる\"><a href=\"#代表的なCLIツールを日常的に使えるようになる\" class=\"headerlink\" title=\"代表的なCLIツールを日常的に使えるようになる\"></a>代表的なCLIツールを日常的に使えるようになる</h2><p>便利そうだな〜と思いつつ、今まで手を出してこなかったツール達があります。</p>\n<p>具体的には以下のやつらです。</p>\n<ul>\n<li>vim</li>\n<li>git</li>\n<li>tmux</li>\n</ul>\n<p>「いや、tmuxはともかくvimやgit使ってないわけないでしょ」と言われそうですが、まぁ実際には使っていますw</p>\n<p>しかし、vimなんて「iして編集したらESCからの:wq」くらいにしか覚えていません。最近になってようやくddで一行消せるとか、shift+gで最後の行に飛べるとか覚えた程度です。行番号の出し方は毎回ググってますw</p>\n<p>そういうレベルなので、ペア作業してるときとか相方にイライラさせてるような気もしておりw、もうちょっとまともに使えるようになりたいなーと思っている次第です、ハイ。</p>\n<p>今までこのレベルで済んでいたのは、僕が主にGUIエディタ（というかVSCode）使いであることが大きいと思います。今までは「別にクリックで動くんだったらコマンド覚えなくてもよくない？」というスタンスでした。</p>\n<p>しかし最近は、双方を組み合わせることでより作業効率が上がるのではないか？と思うようになりました。例えば、VSCodeのエディタでvimのキーバインディングを使うとか、これまたVSCodeのターミナルでtmuxを使うとかです。</p>\n<p>どちらかといえばマイナーな使い道でしょうが、一歩進んだ使い方ができるような予感があります。</p>\n<h2 id=\"6冊以上の技術書を読む\"><a href=\"#6冊以上の技術書を読む\" class=\"headerlink\" title=\"6冊以上の技術書を読む\"></a>6冊以上の技術書を読む</h2><p>僕はこれまで、技術書というものをあまり読んできませんでした（資格試験のための問題集等を除く）。<br>理由は以下の通りです。</p>\n<ul>\n<li>わからないことはwebで検索することで解決できた</li>\n<li>理論を読むよりもサンプルコードを動かす方が理解しやすかった</li>\n</ul>\n<p>というわけで、APIリファレンスとか、QiitaやGitHubでコードを読めば十分だったのですが、最近になって書籍を読むメリットが思い浮かんだことで、モチベーションが出てきました。</p>\n<p>具体的には以下の通りです。</p>\n<ul>\n<li>コードの裏にある思想を学ぶことができる</li>\n<li>検索クエリが思いつかなかった情報を得ることができる</li>\n<li>論拠としての信頼性が高い</li>\n<li>適切な文章表現を目にすることができる</li>\n</ul>\n<p>「コードの裏にある思想を学ぶことができる」というのは特に最近実感していて、機能としては同じことを実現していても、保守のしやすさという点で差がつくことがあります。一般にデザインパターンと呼ばれるものもそうですし、「リーダブルコード」に書かれているような内容もそうだと思います。</p>\n<p>そういったことを学ぶには、個人がオレオレ流を紹介している記事を読むよりも、複数人による添削が入っている（であろう）書籍を読む方が適切なように感じました。これは「論拠としての信頼性が高い」にも近いですね。</p>\n<p>また、最後の「適切な文章表現を目にすることができる」というのも個人的には期待しています。</p>\n<p>僕は知識を獲得できたかどうかの指標として、「相手に伝えることができるか」ということを意識していますが、やはりなかなか難しいです。なので、書籍を読むことで技術そのものだけでなく、それを説明するエッセンスについても学べれば良いなと思っています。</p>\n<p>以上を踏まえると、実は紙の書籍に限らずとも論文のPDFや、経典のようなwebページを読むのでも良いかもしれません。が、分かりやすい目安として、1ヶ月に1冊=半年で6冊を目標にしたいと思います。</p>\n<h2 id=\"Pythonを学んで競技プログラミングを始める\"><a href=\"#Pythonを学んで競技プログラミングを始める\" class=\"headerlink\" title=\"Pythonを学んで競技プログラミングを始める\"></a>Pythonを学んで競技プログラミングを始める</h2><p>僕はなんらかプログラミングをするとき、言語から入ることはほとんどありません。なぜなら、多くの場合使う言語はプラットフォームによって固定されるか、プロジェクトの経緯によって決まるかのどちらかだからです。</p>\n<p>そのせいか、中途半端に汎用性のあるPythonやRubyはあまり書いたことがありません。「書きやすい」とよく聞くものの、特別言語仕様が好みということも無いですし、むしろ基本的な構文の記法が独自だったりして面倒だなぁと思うことさえありますw</p>\n<p>そんな僕がなぜPythonを学ぶのかというと、競技プログラミングや学術計算に興味が出てきたからです。</p>\n<p>個人的に競技プログラミングはスポーツや趣味の類だと思っており、今まで興味がありませんでした。<br>しかし、エンジニアとしてアルゴリズム力を上げておくことも大事だなと思うようになり、それには競技プログラミングの問題が良い題材になるのではないかと考えたわけです。</p>\n<p>なぜアルゴリズム力を上げることが大事だと思ったのかというと、特別理由はありませんw<br>ただ、アルゴリズム力があるエンジニアは「つよいエンジニア」として認識されるので、自分の市場価値を上げるにあたっては有効かなと考えています。</p>\n<p>では競プロにPythonが最適かというと、実は界隈ではC++の方がメジャーのよう、Pythonは2番手らしいですね。</p>\n<p>参考: <a href=\"https://qiita.com/knakajima3027/items/809be5abe5c3d9f29ee7\">https://qiita.com/knakajima3027/items/809be5abe5c3d9f29ee7</a></p>\n<p>とはいえ、サービスを実装するときにC++を使うことはほぼないので、僕はPythonを選択したいと思います。競技プログラミングにハマって高みを目指したくなったら乗り換えるかもしれないです。</p>\n<h2 id=\"Androidにおけるメディア処理を理解する\"><a href=\"#Androidにおけるメディア処理を理解する\" class=\"headerlink\" title=\"Androidにおけるメディア処理を理解する\"></a>Androidにおけるメディア処理を理解する</h2><p>業務の都合上Androidの開発力を上げる必要が出てきており、個人的にも今興味があるプラットフォームです。</p>\n<p>そのためには「kotlinを勉強する」のような目標も考えたのですが、領域を絞った目標にした方が達成度合いが分かりやすいので、今回はメディア処理に着目しました。</p>\n<p>具体的には、以下のようなことをできるようになりたいです。</p>\n<ul>\n<li>カメラの映像を取得して描画する</li>\n<li>映像のフレームを取得してフィルターをかけられる</li>\n<li>マイク入力にフィルターをかけられる</li>\n<li>録画録音ができる</li>\n<li>他の端末とメディア通信ができる</li>\n</ul>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今年度上半期の目標を考えたのですが、技術的な学習目標が多くなったので「エンジニア編」として切り出してみました。</p>\n<p>こうしてみると、今期は今までやってこなかった領域を勉強したい気持ちが高いような気がします。</p>\n<p>一方で、ここ一年くらい勉強した内容で実現したいアイディアもあるので、それはしっかり形にしてアウトプットしたいと思います。</p>\n<p>生活編も別記事でまとめます！</p>"},{"title":"正規表現でテキストファイルを分割する","date":"2020-05-16T05:27:40.000Z","_content":"\n## はじめに\n\n過去ブログのデータを移行しようとエクスポートしたら、1つのMTファイルとして出力されてしまいました。\n仕方ないので、いい感じにファイルを分割したいと思ったのですがコードを書くのは面倒です…\n\nそこで調べてみたところ、`csplit`というコマンドで正規表現による分割ができるようですね。\nちょっと使い方に癖があったのでメモしておきます。\n\n<!-- more -->\n\n## csplitコマンドの使い方\n\nまず、**MacのcsplitコマンドはLinuxのそれと仕様が違います。**\nググって出てきた使い方だとうまく動かないという罠がありますw\n\nなので、まずはgnu版をインストールしましょう。\n\n```\nbrew install coreutils\n```\n\n基本的なコマンドは以下の通りです。\n\n```\ngcsplit <fileName> <pattern> [counter]\n```\n\n例えば以下のような`sample.txt`があったとします。\n\n```\naaa\nbbb\nccc\naaa\nbbb\nccc\n```\n\nここで以下のコマンドを打つと、\n\n```\ngcsplit sample.txt /bbb/\n```\n\nこうなります\n\nファイル1\n\n```\naaa\n```\n\nファイル2\n\n```\nbbb\nccc\naaa\nbbb\nccc\n```\n\n元ファイル5行目の`bbb`でも分割したい場合は`counter`を設定します。\n\n```\ngcsplit sample.txt /bbb/ {2}\n```\n\nするとこんな感じに\nファイル1\n\n```\naaa\n```\n\nファイル2\n\n```\nbbb\nccc\naaa\n```\n\nファイル3\n\n```\nbbb\nccc\n```\n\nつまり、ヒットしたパターンの行の直前で分割されるようですね。\nちなみに、ヒットした行全て分割したい場合は以下のようにします。\n\n```\ngcsplit sample.txt /bbb/ {*}\n```\n\nシンプルに指定できてなかなか便利なコマンドですね。\n\nこういったテキスト処理系は魔術にならない程度にコマンドを駆使して高速化しましょうw\n","source":"_posts/2020-05-16-正規表現でテキストファイルを分割する.md","raw":"---\ntitle: 正規表現でテキストファイルを分割する\ndate: 2020-05-16 14:27:40\ntags:\n---\n\n## はじめに\n\n過去ブログのデータを移行しようとエクスポートしたら、1つのMTファイルとして出力されてしまいました。\n仕方ないので、いい感じにファイルを分割したいと思ったのですがコードを書くのは面倒です…\n\nそこで調べてみたところ、`csplit`というコマンドで正規表現による分割ができるようですね。\nちょっと使い方に癖があったのでメモしておきます。\n\n<!-- more -->\n\n## csplitコマンドの使い方\n\nまず、**MacのcsplitコマンドはLinuxのそれと仕様が違います。**\nググって出てきた使い方だとうまく動かないという罠がありますw\n\nなので、まずはgnu版をインストールしましょう。\n\n```\nbrew install coreutils\n```\n\n基本的なコマンドは以下の通りです。\n\n```\ngcsplit <fileName> <pattern> [counter]\n```\n\n例えば以下のような`sample.txt`があったとします。\n\n```\naaa\nbbb\nccc\naaa\nbbb\nccc\n```\n\nここで以下のコマンドを打つと、\n\n```\ngcsplit sample.txt /bbb/\n```\n\nこうなります\n\nファイル1\n\n```\naaa\n```\n\nファイル2\n\n```\nbbb\nccc\naaa\nbbb\nccc\n```\n\n元ファイル5行目の`bbb`でも分割したい場合は`counter`を設定します。\n\n```\ngcsplit sample.txt /bbb/ {2}\n```\n\nするとこんな感じに\nファイル1\n\n```\naaa\n```\n\nファイル2\n\n```\nbbb\nccc\naaa\n```\n\nファイル3\n\n```\nbbb\nccc\n```\n\nつまり、ヒットしたパターンの行の直前で分割されるようですね。\nちなみに、ヒットした行全て分割したい場合は以下のようにします。\n\n```\ngcsplit sample.txt /bbb/ {*}\n```\n\nシンプルに指定できてなかなか便利なコマンドですね。\n\nこういったテキスト処理系は魔術にならない程度にコマンドを駆使して高速化しましょうw\n","slug":"正規表現でテキストファイルを分割する","published":1,"updated":"2020-05-16T06:06:38.924Z","_id":"cka9890ur0000xgtvfj403kc6","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>過去ブログのデータを移行しようとエクスポートしたら、1つのMTファイルとして出力されてしまいました。<br>仕方ないので、いい感じにファイルを分割したいと思ったのですがコードを書くのは面倒です…</p>\n<p>そこで調べてみたところ、<code>csplit</code>というコマンドで正規表現による分割ができるようですね。<br>ちょっと使い方に癖があったのでメモしておきます。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"csplitコマンドの使い方\"><a href=\"#csplitコマンドの使い方\" class=\"headerlink\" title=\"csplitコマンドの使い方\"></a>csplitコマンドの使い方</h2><p>まず、<strong>MacのcsplitコマンドはLinuxのそれと仕様が違います。</strong><br>ググって出てきた使い方だとうまく動かないという罠がありますw</p>\n<p>なので、まずはgnu版をインストールしましょう。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install coreutils</span><br></pre></td></tr></table></figure>\n\n<p>基本的なコマンドは以下の通りです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit &lt;fileName&gt; &lt;pattern&gt; [counter]</span><br></pre></td></tr></table></figure>\n\n<p>例えば以下のような<code>sample.txt</code>があったとします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n<p>ここで以下のコマンドを打つと、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit sample.txt &#x2F;bbb&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>こうなります</p>\n<p>ファイル1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>ファイル2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n<p>元ファイル5行目の<code>bbb</code>でも分割したい場合は<code>counter</code>を設定します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit sample.txt &#x2F;bbb&#x2F; &#123;2&#125;</span><br></pre></td></tr></table></figure>\n\n<p>するとこんな感じに<br>ファイル1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>ファイル2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>ファイル3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n<p>つまり、ヒットしたパターンの行の直前で分割されるようですね。<br>ちなみに、ヒットした行全て分割したい場合は以下のようにします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit sample.txt &#x2F;bbb&#x2F; &#123;*&#125;</span><br></pre></td></tr></table></figure>\n\n<p>シンプルに指定できてなかなか便利なコマンドですね。</p>\n<p>こういったテキスト処理系は魔術にならない程度にコマンドを駆使して高速化しましょうw</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>過去ブログのデータを移行しようとエクスポートしたら、1つのMTファイルとして出力されてしまいました。<br>仕方ないので、いい感じにファイルを分割したいと思ったのですがコードを書くのは面倒です…</p>\n<p>そこで調べてみたところ、<code>csplit</code>というコマンドで正規表現による分割ができるようですね。<br>ちょっと使い方に癖があったのでメモしておきます。</p>","more":"<h2 id=\"csplitコマンドの使い方\"><a href=\"#csplitコマンドの使い方\" class=\"headerlink\" title=\"csplitコマンドの使い方\"></a>csplitコマンドの使い方</h2><p>まず、<strong>MacのcsplitコマンドはLinuxのそれと仕様が違います。</strong><br>ググって出てきた使い方だとうまく動かないという罠がありますw</p>\n<p>なので、まずはgnu版をインストールしましょう。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install coreutils</span><br></pre></td></tr></table></figure>\n\n<p>基本的なコマンドは以下の通りです。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit &lt;fileName&gt; &lt;pattern&gt; [counter]</span><br></pre></td></tr></table></figure>\n\n<p>例えば以下のような<code>sample.txt</code>があったとします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n<p>ここで以下のコマンドを打つと、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit sample.txt &#x2F;bbb&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>こうなります</p>\n<p>ファイル1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>ファイル2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br><span class=\"line\">aaa</span><br><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n<p>元ファイル5行目の<code>bbb</code>でも分割したい場合は<code>counter</code>を設定します。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit sample.txt &#x2F;bbb&#x2F; &#123;2&#125;</span><br></pre></td></tr></table></figure>\n\n<p>するとこんな感じに<br>ファイル1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>ファイル2</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br><span class=\"line\">aaa</span><br></pre></td></tr></table></figure>\n\n<p>ファイル3</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bbb</span><br><span class=\"line\">ccc</span><br></pre></td></tr></table></figure>\n\n<p>つまり、ヒットしたパターンの行の直前で分割されるようですね。<br>ちなみに、ヒットした行全て分割したい場合は以下のようにします。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcsplit sample.txt &#x2F;bbb&#x2F; &#123;*&#125;</span><br></pre></td></tr></table></figure>\n\n<p>シンプルに指定できてなかなか便利なコマンドですね。</p>\n<p>こういったテキスト処理系は魔術にならない程度にコマンドを駆使して高速化しましょうw</p>"},{"title":"C#で音声変換する","date":"2019-11-01T07:36:57.000Z","_content":"\n過去記事の再掲です。\n\n最近C#を使ってwavやmp3，aacの変換を行う機会があった．\n思ったよりもいろいろ試してみることになったので，メモとして残しておく．\n\n<!-- more -->\n\n## NAudio\n\nC#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．\n\nhttps://www.nuget.org/packages/NAudio/\n\nところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．\n\nhttps://markheath.net/post/naudio-mediafoundationencoder\n\n自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．\n\n## NAudio.Lame\n\n他のライブラリを探してみたところ，NAudio.Lameというものを発見．\n\nhttps://www.nuget.org/packages/NAudio.Lame/\n\n外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．\n\n## Expression Encoder\n\nさらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？\n\nhttps://www.nuget.org/packages/Microsoft.Expression.Encoder/\n\nしかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…\n\n## Media Tool Kit\n\nffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．\n\nhttps://www.nuget.org/packages/MediaToolkit/\n\nパッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．\n\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>","source":"_posts/2019-11-01-C#で音声変換する.md","raw":"---\ntitle: 'C#で音声変換する'\ndate: 2019-11-01 16:36:57\ncategory: 技術ネタ\ntags: C#\n---\n\n過去記事の再掲です。\n\n最近C#を使ってwavやmp3，aacの変換を行う機会があった．\n思ったよりもいろいろ試してみることになったので，メモとして残しておく．\n\n<!-- more -->\n\n## NAudio\n\nC#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．\n\nhttps://www.nuget.org/packages/NAudio/\n\nところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．\n\nhttps://markheath.net/post/naudio-mediafoundationencoder\n\n自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．\n\n## NAudio.Lame\n\n他のライブラリを探してみたところ，NAudio.Lameというものを発見．\n\nhttps://www.nuget.org/packages/NAudio.Lame/\n\n外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．\n\n## Expression Encoder\n\nさらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？\n\nhttps://www.nuget.org/packages/Microsoft.Expression.Encoder/\n\nしかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…\n\n## Media Tool Kit\n\nffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．\n\nhttps://www.nuget.org/packages/MediaToolkit/\n\nパッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．\n\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>","slug":"C#で音声変換する","published":1,"updated":"2020-05-10T04:00:26.350Z","_id":"cka9bak790001xgtv0vr04q3f","comments":1,"layout":"post","photos":[],"link":"","content":"<p>過去記事の再掲です。</p>\n<p>最近C#を使ってwavやmp3，aacの変換を行う機会があった．<br>思ったよりもいろいろ試してみることになったので，メモとして残しておく．</p>\n<a id=\"more\"></a>\n\n<h2 id=\"NAudio\"><a href=\"#NAudio\" class=\"headerlink\" title=\"NAudio\"></a>NAudio</h2><p>C#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio/\">https://www.nuget.org/packages/NAudio/</a></p>\n<p>ところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．</p>\n<p><a href=\"https://markheath.net/post/naudio-mediafoundationencoder\">https://markheath.net/post/naudio-mediafoundationencoder</a></p>\n<p>自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．</p>\n<h2 id=\"NAudio-Lame\"><a href=\"#NAudio-Lame\" class=\"headerlink\" title=\"NAudio.Lame\"></a>NAudio.Lame</h2><p>他のライブラリを探してみたところ，NAudio.Lameというものを発見．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio.Lame/\">https://www.nuget.org/packages/NAudio.Lame/</a></p>\n<p>外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．</p>\n<h2 id=\"Expression-Encoder\"><a href=\"#Expression-Encoder\" class=\"headerlink\" title=\"Expression Encoder\"></a>Expression Encoder</h2><p>さらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？</p>\n<p><a href=\"https://www.nuget.org/packages/Microsoft.Expression.Encoder/\">https://www.nuget.org/packages/Microsoft.Expression.Encoder/</a></p>\n<p>しかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…</p>\n<h2 id=\"Media-Tool-Kit\"><a href=\"#Media-Tool-Kit\" class=\"headerlink\" title=\"Media Tool Kit\"></a>Media Tool Kit</h2><p>ffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．</p>\n<p><a href=\"https://www.nuget.org/packages/MediaToolkit/\">https://www.nuget.org/packages/MediaToolkit/</a></p>\n<p>パッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．</p>\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>","site":{"data":{}},"excerpt":"<p>過去記事の再掲です。</p>\n<p>最近C#を使ってwavやmp3，aacの変換を行う機会があった．<br>思ったよりもいろいろ試してみることになったので，メモとして残しておく．</p>","more":"<h2 id=\"NAudio\"><a href=\"#NAudio\" class=\"headerlink\" title=\"NAudio\"></a>NAudio</h2><p>C#でオーディオを扱うにあたって，いろんなことができるのがNAudioである． mp3やaacに簡単に変換できるようなメソッドが備わっているので，最初はこれを使う予定だった．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio/\">https://www.nuget.org/packages/NAudio/</a></p>\n<p>ところが，変換機能を使えるかどうかはOSに入っているコーデックに依存するため，Windowsのバージョンによっては動かないものもあることがわかった．</p>\n<p><a href=\"https://markheath.net/post/naudio-mediafoundationencoder\">https://markheath.net/post/naudio-mediafoundationencoder</a></p>\n<p>自分が使用している開発環境(Windows7)では使えなかったため断念．ちなみに，常用しているWindows10のマシンでは動いた．</p>\n<h2 id=\"NAudio-Lame\"><a href=\"#NAudio-Lame\" class=\"headerlink\" title=\"NAudio.Lame\"></a>NAudio.Lame</h2><p>他のライブラリを探してみたところ，NAudio.Lameというものを発見．</p>\n<p><a href=\"https://www.nuget.org/packages/NAudio.Lame/\">https://www.nuget.org/packages/NAudio.Lame/</a></p>\n<p>外部dllを入れる必要があるが，wavとmp3の相互変換が可能になる． ただし，aacには対応していない．</p>\n<h2 id=\"Expression-Encoder\"><a href=\"#Expression-Encoder\" class=\"headerlink\" title=\"Expression Encoder\"></a>Expression Encoder</h2><p>さらに他のライブラリを探していると，Expression Encoderという，Microsoft謹製のライブラリを発見．正確にはエンコードソフトのsdkなのかな？</p>\n<p><a href=\"https://www.nuget.org/packages/Microsoft.Expression.Encoder/\">https://www.nuget.org/packages/Microsoft.Expression.Encoder/</a></p>\n<p>しかし，変換機能は有料版じゃないと使えないとのこと． 読みづらいドキュメント読んで頑張ったのに，なんということだ…</p>\n<h2 id=\"Media-Tool-Kit\"><a href=\"#Media-Tool-Kit\" class=\"headerlink\" title=\"Media Tool Kit\"></a>Media Tool Kit</h2><p>ffmpegのラッパーを見つけた．インストールにやたら時間がかかるというところを見ると，ffmpegを内包してるっぽい． コードも簡単に書けるし，とりあえずこれを使ってみることにした．</p>\n<p><a href=\"https://www.nuget.org/packages/MediaToolkit/\">https://www.nuget.org/packages/MediaToolkit/</a></p>\n<p>パッケージマネージャからインストールしたら，以下のように記述して使える． ファイル名の拡張子を変えてやることで変換先の形式をかえられるようだ．</p>\n<script src=\"https://gist.github.com/salmoncode/8084bc26f2ef01147567b9c88544faed.js\"></script>"},{"title":"テストにかえて","date":"2013-12-22T13:35:57.000Z","_content":"\n情報系(?)学部に通うamazarashiが好きな大学１年生\nメモ、思ったことなどをちょいちょい書いていこうと思う。\n","source":"_posts/2013-12-22-テストにかえて.md","raw":"---\ntitle: テストにかえて\ndate: 2013-12-22 22:35:57\ncategory: 自己紹介\n---\n\n情報系(?)学部に通うamazarashiが好きな大学１年生\nメモ、思ったことなどをちょいちょい書いていこうと思う。\n","slug":"テストにかえて","published":1,"updated":"2020-05-16T07:32:57.418Z","_id":"cka9bcvqc0004xgtvg6rr2tb6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>情報系(?)学部に通うamazarashiが好きな大学１年生<br>メモ、思ったことなどをちょいちょい書いていこうと思う。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>情報系(?)学部に通うamazarashiが好きな大学１年生<br>メモ、思ったことなどをちょいちょい書いていこうと思う。</p>\n"},{"title":"Processingのすゝめ","date":"2013-12-23T01:52:20.000Z","_content":"\n## はじめに\nこのブログのメインコンテンツはとりあえず「プログラミングについて」から始めようと思う。僕はプログラミングというものを大学に入ってからはじめた。まだ一年も経っていないことになる。そこで、初心者のつまずきやすい点を初心者の視点から解説していきたいと思う。\n \n## Processing言語\nプログラミング言語を学ぼうとすると、まず思いつくのがC++やJavaではないだろうか。いかにもプログラミングやってます！という響きの古株たちである。\nこれらの言語は一口に難しいと言えるわけではないものの、入門書を買ってはじめのうちは数字やテキストぐらいしか出力できないのが現実である。\nしかし、皆さんが作りたいものがゲームであれアプリケーションであれ、それに「デザイン」を伴っていることは断言できる。\nそうしたジレンマを解決する方法として、Processing言語を学ぶというのはどうだろう?\n言語を変えるなんて、本末転倒ではないか！ という声が聞こえてきそうだが、このProcessing言語は、Javaをもとにつくられているため記法がJavaと非常によく似ている。すなわち、将来的にJavaへの移行が容易なのだ。これはうちの大学の教授も口にしていることなのでまず間違いないと思う。\nそして、Processing言語はもともとアートのための言語である。（Wikipediaにも書いてある。）だからすぐに「デザイン」を描けるし、もちろんそこに何らかの対話性（または操作性）をもたせることも可能だ。\n \n \n## 終わりに\nJavaをバリバリ書いている人にとっては「いいところだけ書いてるのではないか?」と思われるだろう。もちろん、いいところだけを書いている。Processingにたいして物足りなさを感じてきたら、その時他の言語に乗り換えればいいのだ。\nギターを始めるなら最初から髙いものを買うべきだという話があるが、プログラミングは違う。数学を始める前の算数の気分で勉強するほうが楽しいと思う。\nこのブログでは、これからプログラミングを始める人（例えば来年うちの大学に入ってくる後輩など）でもプログラミングができるような記事を書いていきたい。\n皆さんに求めることはただ一つ、実際にやってみることである。\n---\n","source":"_posts/2013-12-23-Processingのすゝめ.md","raw":"---\ntitle: Processingのすゝめ\ndate: 2013-12-23 10:52:20\ncategory: Processing\n---\n\n## はじめに\nこのブログのメインコンテンツはとりあえず「プログラミングについて」から始めようと思う。僕はプログラミングというものを大学に入ってからはじめた。まだ一年も経っていないことになる。そこで、初心者のつまずきやすい点を初心者の視点から解説していきたいと思う。\n \n## Processing言語\nプログラミング言語を学ぼうとすると、まず思いつくのがC++やJavaではないだろうか。いかにもプログラミングやってます！という響きの古株たちである。\nこれらの言語は一口に難しいと言えるわけではないものの、入門書を買ってはじめのうちは数字やテキストぐらいしか出力できないのが現実である。\nしかし、皆さんが作りたいものがゲームであれアプリケーションであれ、それに「デザイン」を伴っていることは断言できる。\nそうしたジレンマを解決する方法として、Processing言語を学ぶというのはどうだろう?\n言語を変えるなんて、本末転倒ではないか！ という声が聞こえてきそうだが、このProcessing言語は、Javaをもとにつくられているため記法がJavaと非常によく似ている。すなわち、将来的にJavaへの移行が容易なのだ。これはうちの大学の教授も口にしていることなのでまず間違いないと思う。\nそして、Processing言語はもともとアートのための言語である。（Wikipediaにも書いてある。）だからすぐに「デザイン」を描けるし、もちろんそこに何らかの対話性（または操作性）をもたせることも可能だ。\n \n \n## 終わりに\nJavaをバリバリ書いている人にとっては「いいところだけ書いてるのではないか?」と思われるだろう。もちろん、いいところだけを書いている。Processingにたいして物足りなさを感じてきたら、その時他の言語に乗り換えればいいのだ。\nギターを始めるなら最初から髙いものを買うべきだという話があるが、プログラミングは違う。数学を始める前の算数の気分で勉強するほうが楽しいと思う。\nこのブログでは、これからプログラミングを始める人（例えば来年うちの大学に入ってくる後輩など）でもプログラミングができるような記事を書いていきたい。\n皆さんに求めることはただ一つ、実際にやってみることである。\n---\n","slug":"Processingのすゝめ","published":1,"updated":"2020-05-16T07:33:00.516Z","_id":"cka9bcy0q0007xgtve5ir5ry1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>このブログのメインコンテンツはとりあえず「プログラミングについて」から始めようと思う。僕はプログラミングというものを大学に入ってからはじめた。まだ一年も経っていないことになる。そこで、初心者のつまずきやすい点を初心者の視点から解説していきたいと思う。</p>\n<h2 id=\"Processing言語\"><a href=\"#Processing言語\" class=\"headerlink\" title=\"Processing言語\"></a>Processing言語</h2><p>プログラミング言語を学ぼうとすると、まず思いつくのがC++やJavaではないだろうか。いかにもプログラミングやってます！という響きの古株たちである。<br>これらの言語は一口に難しいと言えるわけではないものの、入門書を買ってはじめのうちは数字やテキストぐらいしか出力できないのが現実である。<br>しかし、皆さんが作りたいものがゲームであれアプリケーションであれ、それに「デザイン」を伴っていることは断言できる。<br>そうしたジレンマを解決する方法として、Processing言語を学ぶというのはどうだろう?<br>言語を変えるなんて、本末転倒ではないか！ という声が聞こえてきそうだが、このProcessing言語は、Javaをもとにつくられているため記法がJavaと非常によく似ている。すなわち、将来的にJavaへの移行が容易なのだ。これはうちの大学の教授も口にしていることなのでまず間違いないと思う。<br>そして、Processing言語はもともとアートのための言語である。（Wikipediaにも書いてある。）だからすぐに「デザイン」を描けるし、もちろんそこに何らかの対話性（または操作性）をもたせることも可能だ。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>Javaをバリバリ書いている人にとっては「いいところだけ書いてるのではないか?」と思われるだろう。もちろん、いいところだけを書いている。Processingにたいして物足りなさを感じてきたら、その時他の言語に乗り換えればいいのだ。<br>ギターを始めるなら最初から髙いものを買うべきだという話があるが、プログラミングは違う。数学を始める前の算数の気分で勉強するほうが楽しいと思う。<br>このブログでは、これからプログラミングを始める人（例えば来年うちの大学に入ってくる後輩など）でもプログラミングができるような記事を書いていきたい。<br>皆さんに求めることはただ一つ、実際にやってみることである。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>このブログのメインコンテンツはとりあえず「プログラミングについて」から始めようと思う。僕はプログラミングというものを大学に入ってからはじめた。まだ一年も経っていないことになる。そこで、初心者のつまずきやすい点を初心者の視点から解説していきたいと思う。</p>\n<h2 id=\"Processing言語\"><a href=\"#Processing言語\" class=\"headerlink\" title=\"Processing言語\"></a>Processing言語</h2><p>プログラミング言語を学ぼうとすると、まず思いつくのがC++やJavaではないだろうか。いかにもプログラミングやってます！という響きの古株たちである。<br>これらの言語は一口に難しいと言えるわけではないものの、入門書を買ってはじめのうちは数字やテキストぐらいしか出力できないのが現実である。<br>しかし、皆さんが作りたいものがゲームであれアプリケーションであれ、それに「デザイン」を伴っていることは断言できる。<br>そうしたジレンマを解決する方法として、Processing言語を学ぶというのはどうだろう?<br>言語を変えるなんて、本末転倒ではないか！ という声が聞こえてきそうだが、このProcessing言語は、Javaをもとにつくられているため記法がJavaと非常によく似ている。すなわち、将来的にJavaへの移行が容易なのだ。これはうちの大学の教授も口にしていることなのでまず間違いないと思う。<br>そして、Processing言語はもともとアートのための言語である。（Wikipediaにも書いてある。）だからすぐに「デザイン」を描けるし、もちろんそこに何らかの対話性（または操作性）をもたせることも可能だ。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>Javaをバリバリ書いている人にとっては「いいところだけ書いてるのではないか?」と思われるだろう。もちろん、いいところだけを書いている。Processingにたいして物足りなさを感じてきたら、その時他の言語に乗り換えればいいのだ。<br>ギターを始めるなら最初から髙いものを買うべきだという話があるが、プログラミングは違う。数学を始める前の算数の気分で勉強するほうが楽しいと思う。<br>このブログでは、これからプログラミングを始める人（例えば来年うちの大学に入ってくる後輩など）でもプログラミングができるような記事を書いていきたい。<br>皆さんに求めることはただ一つ、実際にやってみることである。</p>\n<hr>\n"},{"title":"Processingをはじめてみる","date":"2013-12-24T03:43:37.000Z","_content":"\n## はじめに\nProcessingをはじめるのは簡単である。\nここでは、その手順を説明しようと思う。\n \n## Processingの導入方法\nまず、公式ホームページへ行く。\n<a href=\"https://processing.org/\">Processing.org</a>\n左サイドバーの一番上のDownloadをクリック。\nNo Donationを選んで中央部のDownloadをクリックしよう。\n上部の一覧から、自分のPCのOSと同じものを選ぶ。\n保存したものを任意の場所に「すべて展開」すれば準備は完了である。\n \n## 起動してみる\nprocessing.exeから起動する。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223113732j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223113732.jpg\" alt=\"f:id:salmon2073:20131223113732j:plain\" /></span>\nこのような画面が表示されていれば成功である。\nこのテキストスペースがプログラミング記述部で、再生ボタンが実行部である。\n \n## はじめてのプログラム\nプログラミング言語には普通、初めに動かしてみるテストプログラム、通称「Hello World」がある。\nその呼び名の通りコマンドプロンプトなどにテキストで”Hello World”と表示させることが多いが、Processingにおける「Hello World」は少し違う。 \n以下の文をコピペするか記述して再生ボタンを押してほしい。\n \nsize(400,400);\nellipse(200,200);\n \nどうだろう?　ウィンドウが出現して、その真ん中に円が表示されていれば成功である。\n \n## 終わりに\n上記の作業がすべて完了したら、あとはひたすらプログラミングをして遊ぶだけである。\n実は、Processingにおける「Hello World」が上記であるというのは正確には間違いで、やはりHello Worldと表示させることが多い。しかし、そもそも「Hello World」は儀式的なものに過ぎず、僕からしてみればProcessingの性質をよく示しているといえる「Hello World」は円を表示させることなのだ。\nこの記事を書くにあたって、極力難しい単語を登場させるのを避けている。\nとにもかくにも実行できることが最優先だからである。\n \n---\n","source":"_posts/2013-12-24-Processingをはじめてみる.md","raw":"---\ntitle: Processingをはじめてみる\ndate: 2013-12-24 12:43:37\ncategory: Processing\n---\n\n## はじめに\nProcessingをはじめるのは簡単である。\nここでは、その手順を説明しようと思う。\n \n## Processingの導入方法\nまず、公式ホームページへ行く。\n<a href=\"https://processing.org/\">Processing.org</a>\n左サイドバーの一番上のDownloadをクリック。\nNo Donationを選んで中央部のDownloadをクリックしよう。\n上部の一覧から、自分のPCのOSと同じものを選ぶ。\n保存したものを任意の場所に「すべて展開」すれば準備は完了である。\n \n## 起動してみる\nprocessing.exeから起動する。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223113732j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223113732.jpg\" alt=\"f:id:salmon2073:20131223113732j:plain\" /></span>\nこのような画面が表示されていれば成功である。\nこのテキストスペースがプログラミング記述部で、再生ボタンが実行部である。\n \n## はじめてのプログラム\nプログラミング言語には普通、初めに動かしてみるテストプログラム、通称「Hello World」がある。\nその呼び名の通りコマンドプロンプトなどにテキストで”Hello World”と表示させることが多いが、Processingにおける「Hello World」は少し違う。 \n以下の文をコピペするか記述して再生ボタンを押してほしい。\n \nsize(400,400);\nellipse(200,200);\n \nどうだろう?　ウィンドウが出現して、その真ん中に円が表示されていれば成功である。\n \n## 終わりに\n上記の作業がすべて完了したら、あとはひたすらプログラミングをして遊ぶだけである。\n実は、Processingにおける「Hello World」が上記であるというのは正確には間違いで、やはりHello Worldと表示させることが多い。しかし、そもそも「Hello World」は儀式的なものに過ぎず、僕からしてみればProcessingの性質をよく示しているといえる「Hello World」は円を表示させることなのだ。\nこの記事を書くにあたって、極力難しい単語を登場させるのを避けている。\nとにもかくにも実行できることが最優先だからである。\n \n---\n","slug":"Processingをはじめてみる","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bczmi000axgtv8s3ocd7f","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>Processingをはじめるのは簡単である。<br>ここでは、その手順を説明しようと思う。</p>\n<h2 id=\"Processingの導入方法\"><a href=\"#Processingの導入方法\" class=\"headerlink\" title=\"Processingの導入方法\"></a>Processingの導入方法</h2><p>まず、公式ホームページへ行く。<br><a href=\"https://processing.org/\">Processing.org</a><br>左サイドバーの一番上のDownloadをクリック。<br>No Donationを選んで中央部のDownloadをクリックしよう。<br>上部の一覧から、自分のPCのOSと同じものを選ぶ。<br>保存したものを任意の場所に「すべて展開」すれば準備は完了である。</p>\n<h2 id=\"起動してみる\"><a href=\"#起動してみる\" class=\"headerlink\" title=\"起動してみる\"></a>起動してみる</h2><p>processing.exeから起動する。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223113732j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223113732.jpg\" alt=\"f:id:salmon2073:20131223113732j:plain\" /></span><br>このような画面が表示されていれば成功である。<br>このテキストスペースがプログラミング記述部で、再生ボタンが実行部である。</p>\n<h2 id=\"はじめてのプログラム\"><a href=\"#はじめてのプログラム\" class=\"headerlink\" title=\"はじめてのプログラム\"></a>はじめてのプログラム</h2><p>プログラミング言語には普通、初めに動かしてみるテストプログラム、通称「Hello World」がある。<br>その呼び名の通りコマンドプロンプトなどにテキストで”Hello World”と表示させることが多いが、Processingにおける「Hello World」は少し違う。<br>以下の文をコピペするか記述して再生ボタンを押してほしい。</p>\n<p>size(400,400);<br>ellipse(200,200);</p>\n<p>どうだろう?　ウィンドウが出現して、その真ん中に円が表示されていれば成功である。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>上記の作業がすべて完了したら、あとはひたすらプログラミングをして遊ぶだけである。<br>実は、Processingにおける「Hello World」が上記であるというのは正確には間違いで、やはりHello Worldと表示させることが多い。しかし、そもそも「Hello World」は儀式的なものに過ぎず、僕からしてみればProcessingの性質をよく示しているといえる「Hello World」は円を表示させることなのだ。<br>この記事を書くにあたって、極力難しい単語を登場させるのを避けている。<br>とにもかくにも実行できることが最優先だからである。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>Processingをはじめるのは簡単である。<br>ここでは、その手順を説明しようと思う。</p>\n<h2 id=\"Processingの導入方法\"><a href=\"#Processingの導入方法\" class=\"headerlink\" title=\"Processingの導入方法\"></a>Processingの導入方法</h2><p>まず、公式ホームページへ行く。<br><a href=\"https://processing.org/\">Processing.org</a><br>左サイドバーの一番上のDownloadをクリック。<br>No Donationを選んで中央部のDownloadをクリックしよう。<br>上部の一覧から、自分のPCのOSと同じものを選ぶ。<br>保存したものを任意の場所に「すべて展開」すれば準備は完了である。</p>\n<h2 id=\"起動してみる\"><a href=\"#起動してみる\" class=\"headerlink\" title=\"起動してみる\"></a>起動してみる</h2><p>processing.exeから起動する。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223113732j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223113732.jpg\" alt=\"f:id:salmon2073:20131223113732j:plain\" /></span><br>このような画面が表示されていれば成功である。<br>このテキストスペースがプログラミング記述部で、再生ボタンが実行部である。</p>\n<h2 id=\"はじめてのプログラム\"><a href=\"#はじめてのプログラム\" class=\"headerlink\" title=\"はじめてのプログラム\"></a>はじめてのプログラム</h2><p>プログラミング言語には普通、初めに動かしてみるテストプログラム、通称「Hello World」がある。<br>その呼び名の通りコマンドプロンプトなどにテキストで”Hello World”と表示させることが多いが、Processingにおける「Hello World」は少し違う。<br>以下の文をコピペするか記述して再生ボタンを押してほしい。</p>\n<p>size(400,400);<br>ellipse(200,200);</p>\n<p>どうだろう?　ウィンドウが出現して、その真ん中に円が表示されていれば成功である。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>上記の作業がすべて完了したら、あとはひたすらプログラミングをして遊ぶだけである。<br>実は、Processingにおける「Hello World」が上記であるというのは正確には間違いで、やはりHello Worldと表示させることが多い。しかし、そもそも「Hello World」は儀式的なものに過ぎず、僕からしてみればProcessingの性質をよく示しているといえる「Hello World」は円を表示させることなのだ。<br>この記事を書くにあたって、極力難しい単語を登場させるのを避けている。<br>とにもかくにも実行できることが最優先だからである。</p>\n<hr>\n"},{"title":"Processingでスケッチ","date":"2013-12-25T05:54:46.000Z","thumbnail":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145748.jpg","_content":"\n## はじめに\n前の記事でProcessingの導入方法を紹介した。\n\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/124337\">Processingをはじめてみる - 鮭の水槽</a>\n\n今回は、いよいよプログラムをつくっていきたいと思う。\n \n## 画面を出す\nProcessingを起動したら、再生ボタンを押してみてほしい。\n小さなウィンドウが出てきたと思う。\nまずはこいつの大きさを変えてみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">size<span style=\"color: #000000;\">( </span></span>横の長さ <span style=\"color: #000000;\">, </span>縦の長さ <span style=\"color: #000000;\">);</span>\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145748j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145748.jpg\" alt=\"f:id:salmon2073:20131223145748j:plain\" /></span>\nこれを記述部に書き込むことでウィンドウの大きさを変えられる。\nここでコツがある。\nまず、\n<span style=\"color: #0000cc;\">size</span>();\nと入力してから数字を代入しよう。数値（パラメータという）を入力するたびに「,」を打つのを忘れないように。\nちなみに、size(　と入力した段階で　<span style=\"color: #0000cc;\">size</span>( 　となったと思うが、この機能のおかげでどこが命令部なのかが分かったり、スペルミスをしていないかチェックできたりする。\n \n## 円を描く\n画面が表示できたら、そこに円を表示してみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">ellipse</span>( 中心のｘ座標 , 中心のｙ座標 , 横の大きさ , 縦の大きさ );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145834j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145834.jpg\" alt=\"f:id:salmon2073:20131223145834j:plain\" /></span>\nウィンドウの座標は左上が（０，０）になっている。ここで注意して欲しいのは、ｙ座標がしたに行くほど大きくなるということだ。皆さんにはこの感覚に慣れてほしい。\nちなみに、横の大きさと縦の大きさが違うと楕円になる。\n \n## 四角形を描く\n四角形を表示してみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">rect</span>( 左上のx座標 , 左上のｙ座標 , 横の長さ , 縦の長さ );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145953j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145953.jpg\" alt=\"f:id:salmon2073:20131223145953j:plain\" /></span>\n \n## 三角形を描く\n三角形を表示してみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">triangle</span>( x1 , y1 , x2 , y2 , x3 , y3 );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223150104j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223150104.jpg\" alt=\"f:id:salmon2073:20131223150104j:plain\" /></span>\n三つの頂点を結んだ三角形が表示される。\n \n## 終わりに\n今回は簡単な図形を描画する命令について述べた。\n次回はこれらに色をつけてみようと思う。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223151231j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223151231.jpg\" alt=\"f:id:salmon2073:20131223151231j:plain\" /></span>\n \n \n---\n","source":"_posts/2013-12-25-Processingでスケッチ.md","raw":"---\ntitle: Processingでスケッチ\ndate: 2013-12-25 14:54:46\ncategory: Processing\nthumbnail: https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145748.jpg\n---\n\n## はじめに\n前の記事でProcessingの導入方法を紹介した。\n\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/124337\">Processingをはじめてみる - 鮭の水槽</a>\n\n今回は、いよいよプログラムをつくっていきたいと思う。\n \n## 画面を出す\nProcessingを起動したら、再生ボタンを押してみてほしい。\n小さなウィンドウが出てきたと思う。\nまずはこいつの大きさを変えてみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">size<span style=\"color: #000000;\">( </span></span>横の長さ <span style=\"color: #000000;\">, </span>縦の長さ <span style=\"color: #000000;\">);</span>\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145748j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145748.jpg\" alt=\"f:id:salmon2073:20131223145748j:plain\" /></span>\nこれを記述部に書き込むことでウィンドウの大きさを変えられる。\nここでコツがある。\nまず、\n<span style=\"color: #0000cc;\">size</span>();\nと入力してから数字を代入しよう。数値（パラメータという）を入力するたびに「,」を打つのを忘れないように。\nちなみに、size(　と入力した段階で　<span style=\"color: #0000cc;\">size</span>( 　となったと思うが、この機能のおかげでどこが命令部なのかが分かったり、スペルミスをしていないかチェックできたりする。\n \n## 円を描く\n画面が表示できたら、そこに円を表示してみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">ellipse</span>( 中心のｘ座標 , 中心のｙ座標 , 横の大きさ , 縦の大きさ );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145834j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145834.jpg\" alt=\"f:id:salmon2073:20131223145834j:plain\" /></span>\nウィンドウの座標は左上が（０，０）になっている。ここで注意して欲しいのは、ｙ座標がしたに行くほど大きくなるということだ。皆さんにはこの感覚に慣れてほしい。\nちなみに、横の大きさと縦の大きさが違うと楕円になる。\n \n## 四角形を描く\n四角形を表示してみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">rect</span>( 左上のx座標 , 左上のｙ座標 , 横の長さ , 縦の長さ );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145953j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145953.jpg\" alt=\"f:id:salmon2073:20131223145953j:plain\" /></span>\n \n## 三角形を描く\n三角形を表示してみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">triangle</span>( x1 , y1 , x2 , y2 , x3 , y3 );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223150104j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223150104.jpg\" alt=\"f:id:salmon2073:20131223150104j:plain\" /></span>\n三つの頂点を結んだ三角形が表示される。\n \n## 終わりに\n今回は簡単な図形を描画する命令について述べた。\n次回はこれらに色をつけてみようと思う。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223151231j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223151231.jpg\" alt=\"f:id:salmon2073:20131223151231j:plain\" /></span>\n \n \n---\n","slug":"Processingでスケッチ","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bd1mi000cxgtvfg7cc50s","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>前の記事でProcessingの導入方法を紹介した。</p>\n<p><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/124337\">Processingをはじめてみる - 鮭の水槽</a></p>\n<p>今回は、いよいよプログラムをつくっていきたいと思う。</p>\n<h2 id=\"画面を出す\"><a href=\"#画面を出す\" class=\"headerlink\" title=\"画面を出す\"></a>画面を出す</h2><p>Processingを起動したら、再生ボタンを押してみてほしい。<br>小さなウィンドウが出てきたと思う。<br>まずはこいつの大きさを変えてみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">size<span style=\"color: #000000;\">( </span></span>横の長さ <span style=\"color: #000000;\">, </span>縦の長さ <span style=\"color: #000000;\">);</span><br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145748j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145748.jpg\" alt=\"f:id:salmon2073:20131223145748j:plain\" /></span><br>これを記述部に書き込むことでウィンドウの大きさを変えられる。<br>ここでコツがある。<br>まず、<br><span style=\"color: #0000cc;\">size</span>();<br>と入力してから数字を代入しよう。数値（パラメータという）を入力するたびに「,」を打つのを忘れないように。<br>ちなみに、size(　と入力した段階で　<span style=\"color: #0000cc;\">size</span>( 　となったと思うが、この機能のおかげでどこが命令部なのかが分かったり、スペルミスをしていないかチェックできたりする。</p>\n<h2 id=\"円を描く\"><a href=\"#円を描く\" class=\"headerlink\" title=\"円を描く\"></a>円を描く</h2><p>画面が表示できたら、そこに円を表示してみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">ellipse</span>( 中心のｘ座標 , 中心のｙ座標 , 横の大きさ , 縦の大きさ );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145834j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145834.jpg\" alt=\"f:id:salmon2073:20131223145834j:plain\" /></span><br>ウィンドウの座標は左上が（０，０）になっている。ここで注意して欲しいのは、ｙ座標がしたに行くほど大きくなるということだ。皆さんにはこの感覚に慣れてほしい。<br>ちなみに、横の大きさと縦の大きさが違うと楕円になる。</p>\n<h2 id=\"四角形を描く\"><a href=\"#四角形を描く\" class=\"headerlink\" title=\"四角形を描く\"></a>四角形を描く</h2><p>四角形を表示してみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">rect</span>( 左上のx座標 , 左上のｙ座標 , 横の長さ , 縦の長さ );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145953j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145953.jpg\" alt=\"f:id:salmon2073:20131223145953j:plain\" /></span></p>\n<h2 id=\"三角形を描く\"><a href=\"#三角形を描く\" class=\"headerlink\" title=\"三角形を描く\"></a>三角形を描く</h2><p>三角形を表示してみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">triangle</span>( x1 , y1 , x2 , y2 , x3 , y3 );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223150104j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223150104.jpg\" alt=\"f:id:salmon2073:20131223150104j:plain\" /></span><br>三つの頂点を結んだ三角形が表示される。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回は簡単な図形を描画する命令について述べた。<br>次回はこれらに色をつけてみようと思う。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223151231j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223151231.jpg\" alt=\"f:id:salmon2073:20131223151231j:plain\" /></span></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>前の記事でProcessingの導入方法を紹介した。</p>\n<p><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/124337\">Processingをはじめてみる - 鮭の水槽</a></p>\n<p>今回は、いよいよプログラムをつくっていきたいと思う。</p>\n<h2 id=\"画面を出す\"><a href=\"#画面を出す\" class=\"headerlink\" title=\"画面を出す\"></a>画面を出す</h2><p>Processingを起動したら、再生ボタンを押してみてほしい。<br>小さなウィンドウが出てきたと思う。<br>まずはこいつの大きさを変えてみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">size<span style=\"color: #000000;\">( </span></span>横の長さ <span style=\"color: #000000;\">, </span>縦の長さ <span style=\"color: #000000;\">);</span><br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145748j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145748.jpg\" alt=\"f:id:salmon2073:20131223145748j:plain\" /></span><br>これを記述部に書き込むことでウィンドウの大きさを変えられる。<br>ここでコツがある。<br>まず、<br><span style=\"color: #0000cc;\">size</span>();<br>と入力してから数字を代入しよう。数値（パラメータという）を入力するたびに「,」を打つのを忘れないように。<br>ちなみに、size(　と入力した段階で　<span style=\"color: #0000cc;\">size</span>( 　となったと思うが、この機能のおかげでどこが命令部なのかが分かったり、スペルミスをしていないかチェックできたりする。</p>\n<h2 id=\"円を描く\"><a href=\"#円を描く\" class=\"headerlink\" title=\"円を描く\"></a>円を描く</h2><p>画面が表示できたら、そこに円を表示してみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">ellipse</span>( 中心のｘ座標 , 中心のｙ座標 , 横の大きさ , 縦の大きさ );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145834j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145834.jpg\" alt=\"f:id:salmon2073:20131223145834j:plain\" /></span><br>ウィンドウの座標は左上が（０，０）になっている。ここで注意して欲しいのは、ｙ座標がしたに行くほど大きくなるということだ。皆さんにはこの感覚に慣れてほしい。<br>ちなみに、横の大きさと縦の大きさが違うと楕円になる。</p>\n<h2 id=\"四角形を描く\"><a href=\"#四角形を描く\" class=\"headerlink\" title=\"四角形を描く\"></a>四角形を描く</h2><p>四角形を表示してみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">rect</span>( 左上のx座標 , 左上のｙ座標 , 横の長さ , 縦の長さ );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223145953j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223145953.jpg\" alt=\"f:id:salmon2073:20131223145953j:plain\" /></span></p>\n<h2 id=\"三角形を描く\"><a href=\"#三角形を描く\" class=\"headerlink\" title=\"三角形を描く\"></a>三角形を描く</h2><p>三角形を表示してみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">triangle</span>( x1 , y1 , x2 , y2 , x3 , y3 );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223150104j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223150104.jpg\" alt=\"f:id:salmon2073:20131223150104j:plain\" /></span><br>三つの頂点を結んだ三角形が表示される。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回は簡単な図形を描画する命令について述べた。<br>次回はこれらに色をつけてみようと思う。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223151231j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223151231.jpg\" alt=\"f:id:salmon2073:20131223151231j:plain\" /></span></p>\n<hr>\n"},{"title":"Processingでスケッチ（２）","date":"2013-12-26T06:44:12.000Z","thumbnail":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223164309.jpg","_content":"\n## はじめに\n前の記事で図形を描く方法を述べた。\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/145446\">Processingでスケッチ - 鮭の水槽</a>\n今回はこれらに色を付けていこうと思う。\n \n## Processingにおける「色」\nProcessingでは、色は赤、緑、青を混ぜて作るRGB方式がデフォルトである。もちろん、RはRed、GはGreen、BはBlueからきている。\n色に関する命令を記述する際には、基本的にパラメーター（数値）はこの３つを使うことが多い。\n \n## 図形を塗りつぶす\n実際に図形を塗りつぶしてみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">fill</span>( R の数値, Gの数値 , Bの数値 );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223164309j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223164309.jpg\" alt=\"f:id:salmon2073:20131223164309j:plain\" /></span>\nこの命令の後に描いた図形はすべて指定した色で塗りつぶされる。\n各値の最大値は255で、値が大きければ大きいほどその要素が強くなる。\n例えば、fill(255,0,0);ならば赤になる。\n黄色はfill(255,255,0); で、紫はfill(255,0,255);である。僕はfill(0,255,255);が好みである。\nちなみに、fill(0,0,0);ならば黒、fill(255,255,255);ならば白である。\nまた、黒や白のように値がすべて同じ場合は\n<span style=\"color: #0000cc;\">fill</span>(数値);\nと表してもよい。\nこの場合、255段階のグレースケールになる。\n \n## プログラムを実行する順番\nプログラムの実行順序について考えよう。\nプログラムは基本的に、<span style=\"color: #cc0000;\">上から下</span>の順番で実行される。\nよって、円のあとに四角形を重ねて描いた場合、四角形が前面に出ることになる。\nだから、size();などはなるべく初めに書こう。\n \n## 背景を塗りつぶす\n図形だけでなく、時には背景を塗りつぶしたいこともあるだろう。キャンバスいっぱいに大きな四角形を描くというのも一つの手だが、Processingには背景を塗りつぶす命令が用意されている。\n\n命令\n\n<span style=\"color: #0000cc;\">background</span>( R , G , B );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165156j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165156.jpg\" alt=\"f:id:salmon2073:20131223165156j:plain\" /></span>\n実は、この命令が実行されるとそれまで描かれていた図形も塗りつぶされてしまう。図形を描く前に記述しよう。\n \n## 塗りつぶさない\n図形は最初白で塗りつぶされているが、完全に透明な図形を描きたいこともあると思う。\n\n命令\n\n<span style=\"color: #0000cc;\">noFill</span>(); \n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223170527j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223170527.jpg\" alt=\"f:id:salmon2073:20131223170527j:plain\" /></span>\nパラメーター（数値）はない。つまり、上記をそのままコピペしてもよい。\n \n## Processingにおける単語の区別\nProcessingの命令において、２単語から成る命令は後ろの単語の頭文字が大文字になる。\n例えば、前述のnoFill();の場合、no+fillなのでnoFillになる。\n \n## 透過度\nこれまで、RGBやグレースケールのみを扱ってきたが、半透明にしたり、中途半端に透かしたいこともあるだろう。\n色の命令にはさらにもう一つパラメータを追加することができる。\n例えば、\nfill(255,0,0,255);\nとすると、真っ赤に塗りつぶされるが、\nfill(255,0,0,0);\nとすると、透明になる。\nfill(255,0,0,100);\nとすると、半透明のようになる。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165538j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165538.jpg\" alt=\"f:id:salmon2073:20131223165538j:plain\" /></span>\n \n## 終わりに\n今回は内容が多く、初めて読む人にとっては少々重かったかもしれない。\n実は、ここに乗っている全ての情報が必ずしも必要とは限らない。目的の達成のために必要のない情報は読み飛ばしてもらっても構わないのだ。 \n \n \n---\n","source":"_posts/2013-12-26-Processingでスケッチ（２）.md","raw":"---\ntitle: Processingでスケッチ（２）\ndate: 2013-12-26 15:44:12\ncategory: Processing\nthumbnail: https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223164309.jpg\n---\n\n## はじめに\n前の記事で図形を描く方法を述べた。\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/145446\">Processingでスケッチ - 鮭の水槽</a>\n今回はこれらに色を付けていこうと思う。\n \n## Processingにおける「色」\nProcessingでは、色は赤、緑、青を混ぜて作るRGB方式がデフォルトである。もちろん、RはRed、GはGreen、BはBlueからきている。\n色に関する命令を記述する際には、基本的にパラメーター（数値）はこの３つを使うことが多い。\n \n## 図形を塗りつぶす\n実際に図形を塗りつぶしてみよう。\n\n命令\n\n<span style=\"color: #0000cc;\">fill</span>( R の数値, Gの数値 , Bの数値 );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223164309j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223164309.jpg\" alt=\"f:id:salmon2073:20131223164309j:plain\" /></span>\nこの命令の後に描いた図形はすべて指定した色で塗りつぶされる。\n各値の最大値は255で、値が大きければ大きいほどその要素が強くなる。\n例えば、fill(255,0,0);ならば赤になる。\n黄色はfill(255,255,0); で、紫はfill(255,0,255);である。僕はfill(0,255,255);が好みである。\nちなみに、fill(0,0,0);ならば黒、fill(255,255,255);ならば白である。\nまた、黒や白のように値がすべて同じ場合は\n<span style=\"color: #0000cc;\">fill</span>(数値);\nと表してもよい。\nこの場合、255段階のグレースケールになる。\n \n## プログラムを実行する順番\nプログラムの実行順序について考えよう。\nプログラムは基本的に、<span style=\"color: #cc0000;\">上から下</span>の順番で実行される。\nよって、円のあとに四角形を重ねて描いた場合、四角形が前面に出ることになる。\nだから、size();などはなるべく初めに書こう。\n \n## 背景を塗りつぶす\n図形だけでなく、時には背景を塗りつぶしたいこともあるだろう。キャンバスいっぱいに大きな四角形を描くというのも一つの手だが、Processingには背景を塗りつぶす命令が用意されている。\n\n命令\n\n<span style=\"color: #0000cc;\">background</span>( R , G , B );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165156j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165156.jpg\" alt=\"f:id:salmon2073:20131223165156j:plain\" /></span>\n実は、この命令が実行されるとそれまで描かれていた図形も塗りつぶされてしまう。図形を描く前に記述しよう。\n \n## 塗りつぶさない\n図形は最初白で塗りつぶされているが、完全に透明な図形を描きたいこともあると思う。\n\n命令\n\n<span style=\"color: #0000cc;\">noFill</span>(); \n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223170527j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223170527.jpg\" alt=\"f:id:salmon2073:20131223170527j:plain\" /></span>\nパラメーター（数値）はない。つまり、上記をそのままコピペしてもよい。\n \n## Processingにおける単語の区別\nProcessingの命令において、２単語から成る命令は後ろの単語の頭文字が大文字になる。\n例えば、前述のnoFill();の場合、no+fillなのでnoFillになる。\n \n## 透過度\nこれまで、RGBやグレースケールのみを扱ってきたが、半透明にしたり、中途半端に透かしたいこともあるだろう。\n色の命令にはさらにもう一つパラメータを追加することができる。\n例えば、\nfill(255,0,0,255);\nとすると、真っ赤に塗りつぶされるが、\nfill(255,0,0,0);\nとすると、透明になる。\nfill(255,0,0,100);\nとすると、半透明のようになる。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165538j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165538.jpg\" alt=\"f:id:salmon2073:20131223165538j:plain\" /></span>\n \n## 終わりに\n今回は内容が多く、初めて読む人にとっては少々重かったかもしれない。\n実は、ここに乗っている全ての情報が必ずしも必要とは限らない。目的の達成のために必要のない情報は読み飛ばしてもらっても構わないのだ。 \n \n \n---\n","slug":"Processingでスケッチ（２）","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bd3gc000exgtv2yvl4c9j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>前の記事で図形を描く方法を述べた。<br><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/145446\">Processingでスケッチ - 鮭の水槽</a><br>今回はこれらに色を付けていこうと思う。</p>\n<h2 id=\"Processingにおける「色」\"><a href=\"#Processingにおける「色」\" class=\"headerlink\" title=\"Processingにおける「色」\"></a>Processingにおける「色」</h2><p>Processingでは、色は赤、緑、青を混ぜて作るRGB方式がデフォルトである。もちろん、RはRed、GはGreen、BはBlueからきている。<br>色に関する命令を記述する際には、基本的にパラメーター（数値）はこの３つを使うことが多い。</p>\n<h2 id=\"図形を塗りつぶす\"><a href=\"#図形を塗りつぶす\" class=\"headerlink\" title=\"図形を塗りつぶす\"></a>図形を塗りつぶす</h2><p>実際に図形を塗りつぶしてみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">fill</span>( R の数値, Gの数値 , Bの数値 );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223164309j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223164309.jpg\" alt=\"f:id:salmon2073:20131223164309j:plain\" /></span><br>この命令の後に描いた図形はすべて指定した色で塗りつぶされる。<br>各値の最大値は255で、値が大きければ大きいほどその要素が強くなる。<br>例えば、fill(255,0,0);ならば赤になる。<br>黄色はfill(255,255,0); で、紫はfill(255,0,255);である。僕はfill(0,255,255);が好みである。<br>ちなみに、fill(0,0,0);ならば黒、fill(255,255,255);ならば白である。<br>また、黒や白のように値がすべて同じ場合は<br><span style=\"color: #0000cc;\">fill</span>(数値);<br>と表してもよい。<br>この場合、255段階のグレースケールになる。</p>\n<h2 id=\"プログラムを実行する順番\"><a href=\"#プログラムを実行する順番\" class=\"headerlink\" title=\"プログラムを実行する順番\"></a>プログラムを実行する順番</h2><p>プログラムの実行順序について考えよう。<br>プログラムは基本的に、<span style=\"color: #cc0000;\">上から下</span>の順番で実行される。<br>よって、円のあとに四角形を重ねて描いた場合、四角形が前面に出ることになる。<br>だから、size();などはなるべく初めに書こう。</p>\n<h2 id=\"背景を塗りつぶす\"><a href=\"#背景を塗りつぶす\" class=\"headerlink\" title=\"背景を塗りつぶす\"></a>背景を塗りつぶす</h2><p>図形だけでなく、時には背景を塗りつぶしたいこともあるだろう。キャンバスいっぱいに大きな四角形を描くというのも一つの手だが、Processingには背景を塗りつぶす命令が用意されている。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">background</span>( R , G , B );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165156j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165156.jpg\" alt=\"f:id:salmon2073:20131223165156j:plain\" /></span><br>実は、この命令が実行されるとそれまで描かれていた図形も塗りつぶされてしまう。図形を描く前に記述しよう。</p>\n<h2 id=\"塗りつぶさない\"><a href=\"#塗りつぶさない\" class=\"headerlink\" title=\"塗りつぶさない\"></a>塗りつぶさない</h2><p>図形は最初白で塗りつぶされているが、完全に透明な図形を描きたいこともあると思う。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">noFill</span>();<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223170527j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223170527.jpg\" alt=\"f:id:salmon2073:20131223170527j:plain\" /></span><br>パラメーター（数値）はない。つまり、上記をそのままコピペしてもよい。</p>\n<h2 id=\"Processingにおける単語の区別\"><a href=\"#Processingにおける単語の区別\" class=\"headerlink\" title=\"Processingにおける単語の区別\"></a>Processingにおける単語の区別</h2><p>Processingの命令において、２単語から成る命令は後ろの単語の頭文字が大文字になる。<br>例えば、前述のnoFill();の場合、no+fillなのでnoFillになる。</p>\n<h2 id=\"透過度\"><a href=\"#透過度\" class=\"headerlink\" title=\"透過度\"></a>透過度</h2><p>これまで、RGBやグレースケールのみを扱ってきたが、半透明にしたり、中途半端に透かしたいこともあるだろう。<br>色の命令にはさらにもう一つパラメータを追加することができる。<br>例えば、<br>fill(255,0,0,255);<br>とすると、真っ赤に塗りつぶされるが、<br>fill(255,0,0,0);<br>とすると、透明になる。<br>fill(255,0,0,100);<br>とすると、半透明のようになる。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165538j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165538.jpg\" alt=\"f:id:salmon2073:20131223165538j:plain\" /></span></p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回は内容が多く、初めて読む人にとっては少々重かったかもしれない。<br>実は、ここに乗っている全ての情報が必ずしも必要とは限らない。目的の達成のために必要のない情報は読み飛ばしてもらっても構わないのだ。 </p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>前の記事で図形を描く方法を述べた。<br><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/145446\">Processingでスケッチ - 鮭の水槽</a><br>今回はこれらに色を付けていこうと思う。</p>\n<h2 id=\"Processingにおける「色」\"><a href=\"#Processingにおける「色」\" class=\"headerlink\" title=\"Processingにおける「色」\"></a>Processingにおける「色」</h2><p>Processingでは、色は赤、緑、青を混ぜて作るRGB方式がデフォルトである。もちろん、RはRed、GはGreen、BはBlueからきている。<br>色に関する命令を記述する際には、基本的にパラメーター（数値）はこの３つを使うことが多い。</p>\n<h2 id=\"図形を塗りつぶす\"><a href=\"#図形を塗りつぶす\" class=\"headerlink\" title=\"図形を塗りつぶす\"></a>図形を塗りつぶす</h2><p>実際に図形を塗りつぶしてみよう。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">fill</span>( R の数値, Gの数値 , Bの数値 );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223164309j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223164309.jpg\" alt=\"f:id:salmon2073:20131223164309j:plain\" /></span><br>この命令の後に描いた図形はすべて指定した色で塗りつぶされる。<br>各値の最大値は255で、値が大きければ大きいほどその要素が強くなる。<br>例えば、fill(255,0,0);ならば赤になる。<br>黄色はfill(255,255,0); で、紫はfill(255,0,255);である。僕はfill(0,255,255);が好みである。<br>ちなみに、fill(0,0,0);ならば黒、fill(255,255,255);ならば白である。<br>また、黒や白のように値がすべて同じ場合は<br><span style=\"color: #0000cc;\">fill</span>(数値);<br>と表してもよい。<br>この場合、255段階のグレースケールになる。</p>\n<h2 id=\"プログラムを実行する順番\"><a href=\"#プログラムを実行する順番\" class=\"headerlink\" title=\"プログラムを実行する順番\"></a>プログラムを実行する順番</h2><p>プログラムの実行順序について考えよう。<br>プログラムは基本的に、<span style=\"color: #cc0000;\">上から下</span>の順番で実行される。<br>よって、円のあとに四角形を重ねて描いた場合、四角形が前面に出ることになる。<br>だから、size();などはなるべく初めに書こう。</p>\n<h2 id=\"背景を塗りつぶす\"><a href=\"#背景を塗りつぶす\" class=\"headerlink\" title=\"背景を塗りつぶす\"></a>背景を塗りつぶす</h2><p>図形だけでなく、時には背景を塗りつぶしたいこともあるだろう。キャンバスいっぱいに大きな四角形を描くというのも一つの手だが、Processingには背景を塗りつぶす命令が用意されている。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">background</span>( R , G , B );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165156j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165156.jpg\" alt=\"f:id:salmon2073:20131223165156j:plain\" /></span><br>実は、この命令が実行されるとそれまで描かれていた図形も塗りつぶされてしまう。図形を描く前に記述しよう。</p>\n<h2 id=\"塗りつぶさない\"><a href=\"#塗りつぶさない\" class=\"headerlink\" title=\"塗りつぶさない\"></a>塗りつぶさない</h2><p>図形は最初白で塗りつぶされているが、完全に透明な図形を描きたいこともあると思う。</p>\n<p>命令</p>\n<p><span style=\"color: #0000cc;\">noFill</span>();<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223170527j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223170527.jpg\" alt=\"f:id:salmon2073:20131223170527j:plain\" /></span><br>パラメーター（数値）はない。つまり、上記をそのままコピペしてもよい。</p>\n<h2 id=\"Processingにおける単語の区別\"><a href=\"#Processingにおける単語の区別\" class=\"headerlink\" title=\"Processingにおける単語の区別\"></a>Processingにおける単語の区別</h2><p>Processingの命令において、２単語から成る命令は後ろの単語の頭文字が大文字になる。<br>例えば、前述のnoFill();の場合、no+fillなのでnoFillになる。</p>\n<h2 id=\"透過度\"><a href=\"#透過度\" class=\"headerlink\" title=\"透過度\"></a>透過度</h2><p>これまで、RGBやグレースケールのみを扱ってきたが、半透明にしたり、中途半端に透かしたいこともあるだろう。<br>色の命令にはさらにもう一つパラメータを追加することができる。<br>例えば、<br>fill(255,0,0,255);<br>とすると、真っ赤に塗りつぶされるが、<br>fill(255,0,0,0);<br>とすると、透明になる。<br>fill(255,0,0,100);<br>とすると、半透明のようになる。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223165538j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223165538.jpg\" alt=\"f:id:salmon2073:20131223165538j:plain\" /></span></p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回は内容が多く、初めて読む人にとっては少々重かったかもしれない。<br>実は、ここに乗っている全ての情報が必ずしも必要とは限らない。目的の達成のために必要のない情報は読み飛ばしてもらっても構わないのだ。 </p>\n<hr>\n"},{"title":"Processingでスケッチ（３）","date":"2013-12-27T10:52:12.000Z","thumbnail":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194026.jpg","_content":"\n## はじめに\n今回は、点・線 を描画してみようと思う。\nそして、それらに色をつけたり大きさを変えたりしてみよう。\n \n## 点を描く\n\n命令\n\n<span style=\"color: #0000cc;\">point</span>( x , y );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194026j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194026.jpg\" alt=\"f:id:salmon2073:20131223194026j:plain\" /></span>\n指定した位置に点が描画される。\nえ？真ん中に描いたんだけど、みえないかも…\n \n## 線を描く\n\n命令\n\n<span style=\"color: #0000cc;\">line</span>( x1 , y1 , x , y );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194130j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194130.jpg\" alt=\"f:id:salmon2073:20131223194130j:plain\" /></span>\n始点の( x , y )から終点の( x , y )までの線分が表示される。\n \n## 点・線に色をつける\n\n命令\n\n<span style=\"color: #0000cc;\">stroke</span>( R , G , B );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194717j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194717.jpg\" alt=\"f:id:salmon2073:20131223194717j:plain\" /></span>\n直後から描かれた点・線が指定した色になる。\nやっぱり点は見えない。\n \n## 点・線の大きさを変える\n<span style=\"color: #000000;\">・命令</span>\n<span style=\"color: #0000cc;\">strokeWeight</span>(大きさ);\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194800j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194800.jpg\" alt=\"f:id:salmon2073:20131223194800j:plain\" /></span>\n直後から描かれた点・線が指定した大きさになる。\nようやく点が出現した。\n \n## 終わりに\nこれまでの命令を覚えることで、たいていの形を描くことはできるようなる。\n次回からはさらに一歩進んだことをやりたいと思う。\n \n \n \n---\n","source":"_posts/2013-12-27-Processingでスケッチ（３）.md","raw":"---\ntitle: Processingでスケッチ（３）\ndate: 2013-12-27 19:52:12\ncategory: Processing\nthumbnail: https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194026.jpg\n---\n\n## はじめに\n今回は、点・線 を描画してみようと思う。\nそして、それらに色をつけたり大きさを変えたりしてみよう。\n \n## 点を描く\n\n命令\n\n<span style=\"color: #0000cc;\">point</span>( x , y );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194026j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194026.jpg\" alt=\"f:id:salmon2073:20131223194026j:plain\" /></span>\n指定した位置に点が描画される。\nえ？真ん中に描いたんだけど、みえないかも…\n \n## 線を描く\n\n命令\n\n<span style=\"color: #0000cc;\">line</span>( x1 , y1 , x , y );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194130j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194130.jpg\" alt=\"f:id:salmon2073:20131223194130j:plain\" /></span>\n始点の( x , y )から終点の( x , y )までの線分が表示される。\n \n## 点・線に色をつける\n\n命令\n\n<span style=\"color: #0000cc;\">stroke</span>( R , G , B );\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194717j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194717.jpg\" alt=\"f:id:salmon2073:20131223194717j:plain\" /></span>\n直後から描かれた点・線が指定した色になる。\nやっぱり点は見えない。\n \n## 点・線の大きさを変える\n<span style=\"color: #000000;\">・命令</span>\n<span style=\"color: #0000cc;\">strokeWeight</span>(大きさ);\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194800j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194800.jpg\" alt=\"f:id:salmon2073:20131223194800j:plain\" /></span>\n直後から描かれた点・線が指定した大きさになる。\nようやく点が出現した。\n \n## 終わりに\nこれまでの命令を覚えることで、たいていの形を描くことはできるようなる。\n次回からはさらに一歩進んだことをやりたいと思う。\n \n \n \n---\n","slug":"Processingでスケッチ（３）","published":1,"updated":"2020-05-16T07:41:06.084Z","_id":"cka9bd57c000gxgtvdy565kt5","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今回は、点・線 を描画してみようと思う。<br>そして、それらに色をつけたり大きさを変えたりしてみよう。</p>\n<h2 id=\"点を描く\"><a href=\"#点を描く\" class=\"headerlink\" title=\"点を描く\"></a>点を描く</h2><p>命令</p>\n<p><span style=\"color: #0000cc;\">point</span>( x , y );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194026j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194026.jpg\" alt=\"f:id:salmon2073:20131223194026j:plain\" /></span><br>指定した位置に点が描画される。<br>え？真ん中に描いたんだけど、みえないかも…</p>\n<h2 id=\"線を描く\"><a href=\"#線を描く\" class=\"headerlink\" title=\"線を描く\"></a>線を描く</h2><p>命令</p>\n<p><span style=\"color: #0000cc;\">line</span>( x1 , y1 , x , y );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194130j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194130.jpg\" alt=\"f:id:salmon2073:20131223194130j:plain\" /></span><br>始点の( x , y )から終点の( x , y )までの線分が表示される。</p>\n<h2 id=\"点・線に色をつける\"><a href=\"#点・線に色をつける\" class=\"headerlink\" title=\"点・線に色をつける\"></a>点・線に色をつける</h2><p>命令</p>\n<p><span style=\"color: #0000cc;\">stroke</span>( R , G , B );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194717j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194717.jpg\" alt=\"f:id:salmon2073:20131223194717j:plain\" /></span><br>直後から描かれた点・線が指定した色になる。<br>やっぱり点は見えない。</p>\n<h2 id=\"点・線の大きさを変える\"><a href=\"#点・線の大きさを変える\" class=\"headerlink\" title=\"点・線の大きさを変える\"></a>点・線の大きさを変える</h2><p><span style=\"color: #000000;\">・命令</span><br><span style=\"color: #0000cc;\">strokeWeight</span>(大きさ);<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194800j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194800.jpg\" alt=\"f:id:salmon2073:20131223194800j:plain\" /></span><br>直後から描かれた点・線が指定した大きさになる。<br>ようやく点が出現した。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>これまでの命令を覚えることで、たいていの形を描くことはできるようなる。<br>次回からはさらに一歩進んだことをやりたいと思う。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今回は、点・線 を描画してみようと思う。<br>そして、それらに色をつけたり大きさを変えたりしてみよう。</p>\n<h2 id=\"点を描く\"><a href=\"#点を描く\" class=\"headerlink\" title=\"点を描く\"></a>点を描く</h2><p>命令</p>\n<p><span style=\"color: #0000cc;\">point</span>( x , y );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194026j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194026.jpg\" alt=\"f:id:salmon2073:20131223194026j:plain\" /></span><br>指定した位置に点が描画される。<br>え？真ん中に描いたんだけど、みえないかも…</p>\n<h2 id=\"線を描く\"><a href=\"#線を描く\" class=\"headerlink\" title=\"線を描く\"></a>線を描く</h2><p>命令</p>\n<p><span style=\"color: #0000cc;\">line</span>( x1 , y1 , x , y );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194130j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194130.jpg\" alt=\"f:id:salmon2073:20131223194130j:plain\" /></span><br>始点の( x , y )から終点の( x , y )までの線分が表示される。</p>\n<h2 id=\"点・線に色をつける\"><a href=\"#点・線に色をつける\" class=\"headerlink\" title=\"点・線に色をつける\"></a>点・線に色をつける</h2><p>命令</p>\n<p><span style=\"color: #0000cc;\">stroke</span>( R , G , B );<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194717j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194717.jpg\" alt=\"f:id:salmon2073:20131223194717j:plain\" /></span><br>直後から描かれた点・線が指定した色になる。<br>やっぱり点は見えない。</p>\n<h2 id=\"点・線の大きさを変える\"><a href=\"#点・線の大きさを変える\" class=\"headerlink\" title=\"点・線の大きさを変える\"></a>点・線の大きさを変える</h2><p><span style=\"color: #000000;\">・命令</span><br><span style=\"color: #0000cc;\">strokeWeight</span>(大きさ);<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131223194800j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131223/20131223194800.jpg\" alt=\"f:id:salmon2073:20131223194800j:plain\" /></span><br>直後から描かれた点・線が指定した大きさになる。<br>ようやく点が出現した。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>これまでの命令を覚えることで、たいていの形を描くことはできるようなる。<br>次回からはさらに一歩進んだことをやりたいと思う。</p>\n<hr>\n"},{"title":"Processing setup,draw とマウス","date":"2013-12-28T11:01:59.000Z","_content":"\n## はじめに\n前の記事までで、基本的な図形や点、線を描くことができ、色や大きさまで変えられるようになるはずである。これだけでももうプログラマーと名乗っていいいのではないだろうか。\nしかし、皆さんは「これではペイントツールとおなじでは…」と思われるかもしれない。\nそこで、プログラムに新たな機能を追加して「プログラム感」を味わっていただきたい。\n \n## 保存する\n自分の画面上のプログラムを人に見せるだけではつまらない。\n保存方法を考えよう。\n①.pdeファイルで保存する。\nプログラムをそのまま保存する方法である。\nFile → Save As で名前をつけて保存できる。上書き保存したい場合は Save を選ぼう。\n②.exeファイルで保存する。\nこの方法だと、プログラムを書きかえれなくなる代わりに、ほとんどどのPCでも動く実行ファイルにして保存できる。\nFile → Export Application → 任意の場所を選ぶ → Export\n①の方法で保存していない場合、途中で聞かれるので保存しよう。\n \n## setup,drawについて\nProcessingのプログラミングにおける性質をより深く知ってもらうためには、setup,drawという考え方が不可欠である。\nsetupとは、初期設定のことである。\ndrawとは、初期設定後の繰り返し作業（ルーチン）のことである。\nこれをプログラムに組み込むことで、できることの幅が広がる。\n \nsetup,drawを利用したプログラム\n\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br />size(400,400);<br />}\n<span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> draw</span>(){<br />ellipse(200,200,100,100);<br />}\n \n上記のプログラムをコピペか記述して、実行してみよう。\n画面の中に円が描かれていれば成功である。\n今までのプログラムと何も違わないように見えると思う。しかし、今回のプログラムと今までのプログラムでは決定的に違う点がある。\nそれは、<span style=\"color: #cc0000;\">描かれ続けている</span>ということだ。\n \nまずは、setupから詳しい説明をしよう。\n<span style=\"color: #00cccc;\">void <span style=\"color: #0000cc;\">setup</span></span>(){\n初期設定\n}\nである。\n「void」 という単語やsetupの後についている「()」については今は特に意味がない。\n覚えていただきたいのはその後の「{}」の中に初期設定を記述するということだ。\n初期設定は、はじめに一回実行されるとその後はもう行われない作業のことである。\n例えば、size(); がそうである。毎回ウィンドウのサイズを決めなくても、普通ウィンドウの大きさは一定である。\nちなみにsetup,drawが導入されていない今までのプログラムは、全てsetupであるという見方もできる。\n \n次に、drawについて説明しよう。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){\n繰り返し作業（ルーチン）\n}\nである。\nこちらも「void」や「()」について今は意味がない。\n繰り返し作業は、setupのあとに、１秒に約６０回のペースで行われ続ける。\nプログラムのメインはこっちである。\n \n## setup,drawの使い方\nパラパラ漫画を思い浮かべて欲しい。棒人間が踊っているとする。\nページの大きさや紙の厚さは途中で変える必要がないだろう。一度決めれば十分である。これがsetupである。\n棒人間は１ページごとに（あるいは４ページかもしれない）ポーズを変えてやる必要がある。棒立ちでは面白くないからだ。これがdrawである。\nProcessingでは、この「ページ」を「フレーム」と呼ぶ。フレームごとに絵をかえてやればプログラムが「動いているように」見える。　いや、「動いている」のだ。\n もっとも、そのためにはフレームごとに絵を変える方法を知らないといけない。\n手っ取り早いのはマウスをつかうことである。\n \n## マウスの使い方\nいよいよプログラムを「動かす」時がきた。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br /><span style=\"color: #0000cc;\">size</span>(400,400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){<br /><span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,30,30);<br />}\n上記のプログラムをコピペまたは記述して実行してみよう。\nそしてウィンドウの上でマウスカーソルを動かしてみよう。\nマウスカーソルに円がついてきたら成功である。\n \n感動の一瞬である。\n \nさて、解説をしよう。\n\n変数\n\n```\nmouseX　マウスのｘ座標\nmouseY　マウスのｙ座標\n```\n\nプログラミングにおいて変数とは、数字の入れ物のことである。\nマウスを動かすと、マウスカーソルの座標が動くので、mouseXとmouseYも変わる。\nその場所を指定してellipse(); を記述してやればマウスカーソルの場所に円が出現し、追尾してくるように見えるというわけである。\n \n次に、直前に描かれた円を消してみよう。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> background</span>(255);<br />  <span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>, <span style=\"color: #cc00cc;\">mouseY</span>, 30, 30);<br />}\n上記をコピペしてもいいが、要するにellipse();の前にbackground();を記述するだけである。\n色についてはこちらを見ていただきたい。\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/154412\">Processingでスケッチ（２） - 鮭の水槽</a>\n \n## マウスを使って色を変える\n色の話題が出てきたところで、背景色をマウスの位置によってかえるプログラムを考えてみよう。\nbackground();はパラメーターを３つ持つが、マウスからはmouseXとmouseYしか情報がとれない。そこで、今回はRとGをそれぞれmouseX,mouseYにあててみよう。\n<span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> setup</span>() {<br /><span style=\"color: #0000cc;\">  size</span>(400, 400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">background</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,0);<br />}\nとなる。\n \nところで、色は255段階しかないのに対しmouseX,mouseYはsize(400,400);なのでそれぞれ400まであるはずである。255を超えたらどうなるのだろう？\n \n色は255を超えても255に直される。だから、mouseXが255より右に行ったとしてもそれ以上色は変わらないのだ。\n \n## 終わりに\n今回はマウスカーソルの座標を用いてsetup,drawについて解説した。通常では味わえない「プログラム感」を味わっていただければ本望である。\nただし、変数についてはまた期を新たにじっくり取り組む必要があるし、最低限の説明ができているのかも分からない。Wikipediaにも確実な解説がなかったときは正直驚いた。それだけ人に文字で説明するのが難しいテーマなのかもしれない。\nところで、今回画像を用いていないのはいじわるではなく、手持ちのツールでは原理的にマウスカーソルを画像に表示できなかったためである。プリントスクリーンも勝手が悪い。どこかにいいツールがないものだろうか。\nそのうち自分でつくろうと思う。\n \n---\n","source":"_posts/2013-12-28-Processing setup,draw とマウス.md","raw":"---\ntitle: Processing setup,draw とマウス\ndate: 2013-12-28 20:01:59\ncategory: Processing\n---\n\n## はじめに\n前の記事までで、基本的な図形や点、線を描くことができ、色や大きさまで変えられるようになるはずである。これだけでももうプログラマーと名乗っていいいのではないだろうか。\nしかし、皆さんは「これではペイントツールとおなじでは…」と思われるかもしれない。\nそこで、プログラムに新たな機能を追加して「プログラム感」を味わっていただきたい。\n \n## 保存する\n自分の画面上のプログラムを人に見せるだけではつまらない。\n保存方法を考えよう。\n①.pdeファイルで保存する。\nプログラムをそのまま保存する方法である。\nFile → Save As で名前をつけて保存できる。上書き保存したい場合は Save を選ぼう。\n②.exeファイルで保存する。\nこの方法だと、プログラムを書きかえれなくなる代わりに、ほとんどどのPCでも動く実行ファイルにして保存できる。\nFile → Export Application → 任意の場所を選ぶ → Export\n①の方法で保存していない場合、途中で聞かれるので保存しよう。\n \n## setup,drawについて\nProcessingのプログラミングにおける性質をより深く知ってもらうためには、setup,drawという考え方が不可欠である。\nsetupとは、初期設定のことである。\ndrawとは、初期設定後の繰り返し作業（ルーチン）のことである。\nこれをプログラムに組み込むことで、できることの幅が広がる。\n \nsetup,drawを利用したプログラム\n\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br />size(400,400);<br />}\n<span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> draw</span>(){<br />ellipse(200,200,100,100);<br />}\n \n上記のプログラムをコピペか記述して、実行してみよう。\n画面の中に円が描かれていれば成功である。\n今までのプログラムと何も違わないように見えると思う。しかし、今回のプログラムと今までのプログラムでは決定的に違う点がある。\nそれは、<span style=\"color: #cc0000;\">描かれ続けている</span>ということだ。\n \nまずは、setupから詳しい説明をしよう。\n<span style=\"color: #00cccc;\">void <span style=\"color: #0000cc;\">setup</span></span>(){\n初期設定\n}\nである。\n「void」 という単語やsetupの後についている「()」については今は特に意味がない。\n覚えていただきたいのはその後の「{}」の中に初期設定を記述するということだ。\n初期設定は、はじめに一回実行されるとその後はもう行われない作業のことである。\n例えば、size(); がそうである。毎回ウィンドウのサイズを決めなくても、普通ウィンドウの大きさは一定である。\nちなみにsetup,drawが導入されていない今までのプログラムは、全てsetupであるという見方もできる。\n \n次に、drawについて説明しよう。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){\n繰り返し作業（ルーチン）\n}\nである。\nこちらも「void」や「()」について今は意味がない。\n繰り返し作業は、setupのあとに、１秒に約６０回のペースで行われ続ける。\nプログラムのメインはこっちである。\n \n## setup,drawの使い方\nパラパラ漫画を思い浮かべて欲しい。棒人間が踊っているとする。\nページの大きさや紙の厚さは途中で変える必要がないだろう。一度決めれば十分である。これがsetupである。\n棒人間は１ページごとに（あるいは４ページかもしれない）ポーズを変えてやる必要がある。棒立ちでは面白くないからだ。これがdrawである。\nProcessingでは、この「ページ」を「フレーム」と呼ぶ。フレームごとに絵をかえてやればプログラムが「動いているように」見える。　いや、「動いている」のだ。\n もっとも、そのためにはフレームごとに絵を変える方法を知らないといけない。\n手っ取り早いのはマウスをつかうことである。\n \n## マウスの使い方\nいよいよプログラムを「動かす」時がきた。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br /><span style=\"color: #0000cc;\">size</span>(400,400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){<br /><span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,30,30);<br />}\n上記のプログラムをコピペまたは記述して実行してみよう。\nそしてウィンドウの上でマウスカーソルを動かしてみよう。\nマウスカーソルに円がついてきたら成功である。\n \n感動の一瞬である。\n \nさて、解説をしよう。\n\n変数\n\n```\nmouseX　マウスのｘ座標\nmouseY　マウスのｙ座標\n```\n\nプログラミングにおいて変数とは、数字の入れ物のことである。\nマウスを動かすと、マウスカーソルの座標が動くので、mouseXとmouseYも変わる。\nその場所を指定してellipse(); を記述してやればマウスカーソルの場所に円が出現し、追尾してくるように見えるというわけである。\n \n次に、直前に描かれた円を消してみよう。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> background</span>(255);<br />  <span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>, <span style=\"color: #cc00cc;\">mouseY</span>, 30, 30);<br />}\n上記をコピペしてもいいが、要するにellipse();の前にbackground();を記述するだけである。\n色についてはこちらを見ていただきたい。\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/154412\">Processingでスケッチ（２） - 鮭の水槽</a>\n \n## マウスを使って色を変える\n色の話題が出てきたところで、背景色をマウスの位置によってかえるプログラムを考えてみよう。\nbackground();はパラメーターを３つ持つが、マウスからはmouseXとmouseYしか情報がとれない。そこで、今回はRとGをそれぞれmouseX,mouseYにあててみよう。\n<span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> setup</span>() {<br /><span style=\"color: #0000cc;\">  size</span>(400, 400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">background</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,0);<br />}\nとなる。\n \nところで、色は255段階しかないのに対しmouseX,mouseYはsize(400,400);なのでそれぞれ400まであるはずである。255を超えたらどうなるのだろう？\n \n色は255を超えても255に直される。だから、mouseXが255より右に行ったとしてもそれ以上色は変わらないのだ。\n \n## 終わりに\n今回はマウスカーソルの座標を用いてsetup,drawについて解説した。通常では味わえない「プログラム感」を味わっていただければ本望である。\nただし、変数についてはまた期を新たにじっくり取り組む必要があるし、最低限の説明ができているのかも分からない。Wikipediaにも確実な解説がなかったときは正直驚いた。それだけ人に文字で説明するのが難しいテーマなのかもしれない。\nところで、今回画像を用いていないのはいじわるではなく、手持ちのツールでは原理的にマウスカーソルを画像に表示できなかったためである。プリントスクリーンも勝手が悪い。どこかにいいツールがないものだろうか。\nそのうち自分でつくろうと思う。\n \n---\n","slug":"Processing setup,draw とマウス","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bd9pu000ixgtvfkgrfeem","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>前の記事までで、基本的な図形や点、線を描くことができ、色や大きさまで変えられるようになるはずである。これだけでももうプログラマーと名乗っていいいのではないだろうか。<br>しかし、皆さんは「これではペイントツールとおなじでは…」と思われるかもしれない。<br>そこで、プログラムに新たな機能を追加して「プログラム感」を味わっていただきたい。</p>\n<h2 id=\"保存する\"><a href=\"#保存する\" class=\"headerlink\" title=\"保存する\"></a>保存する</h2><p>自分の画面上のプログラムを人に見せるだけではつまらない。<br>保存方法を考えよう。<br>①.pdeファイルで保存する。<br>プログラムをそのまま保存する方法である。<br>File → Save As で名前をつけて保存できる。上書き保存したい場合は Save を選ぼう。<br>②.exeファイルで保存する。<br>この方法だと、プログラムを書きかえれなくなる代わりに、ほとんどどのPCでも動く実行ファイルにして保存できる。<br>File → Export Application → 任意の場所を選ぶ → Export<br>①の方法で保存していない場合、途中で聞かれるので保存しよう。</p>\n<h2 id=\"setup-drawについて\"><a href=\"#setup-drawについて\" class=\"headerlink\" title=\"setup,drawについて\"></a>setup,drawについて</h2><p>Processingのプログラミングにおける性質をより深く知ってもらうためには、setup,drawという考え方が不可欠である。<br>setupとは、初期設定のことである。<br>drawとは、初期設定後の繰り返し作業（ルーチン）のことである。<br>これをプログラムに組み込むことで、できることの幅が広がる。</p>\n<p>setup,drawを利用したプログラム</p>\n<p><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br />size(400,400);<br />}<br><span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> draw</span>(){<br />ellipse(200,200,100,100);<br />}</p>\n<p>上記のプログラムをコピペか記述して、実行してみよう。<br>画面の中に円が描かれていれば成功である。<br>今までのプログラムと何も違わないように見えると思う。しかし、今回のプログラムと今までのプログラムでは決定的に違う点がある。<br>それは、<span style=\"color: #cc0000;\">描かれ続けている</span>ということだ。</p>\n<p>まずは、setupから詳しい説明をしよう。<br><span style=\"color: #00cccc;\">void <span style=\"color: #0000cc;\">setup</span></span>(){<br>初期設定<br>}<br>である。<br>「void」 という単語やsetupの後についている「()」については今は特に意味がない。<br>覚えていただきたいのはその後の「{}」の中に初期設定を記述するということだ。<br>初期設定は、はじめに一回実行されるとその後はもう行われない作業のことである。<br>例えば、size(); がそうである。毎回ウィンドウのサイズを決めなくても、普通ウィンドウの大きさは一定である。<br>ちなみにsetup,drawが導入されていない今までのプログラムは、全てsetupであるという見方もできる。</p>\n<p>次に、drawについて説明しよう。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){<br>繰り返し作業（ルーチン）<br>}<br>である。<br>こちらも「void」や「()」について今は意味がない。<br>繰り返し作業は、setupのあとに、１秒に約６０回のペースで行われ続ける。<br>プログラムのメインはこっちである。</p>\n<h2 id=\"setup-drawの使い方\"><a href=\"#setup-drawの使い方\" class=\"headerlink\" title=\"setup,drawの使い方\"></a>setup,drawの使い方</h2><p>パラパラ漫画を思い浮かべて欲しい。棒人間が踊っているとする。<br>ページの大きさや紙の厚さは途中で変える必要がないだろう。一度決めれば十分である。これがsetupである。<br>棒人間は１ページごとに（あるいは４ページかもしれない）ポーズを変えてやる必要がある。棒立ちでは面白くないからだ。これがdrawである。<br>Processingでは、この「ページ」を「フレーム」と呼ぶ。フレームごとに絵をかえてやればプログラムが「動いているように」見える。　いや、「動いている」のだ。<br> もっとも、そのためにはフレームごとに絵を変える方法を知らないといけない。<br>手っ取り早いのはマウスをつかうことである。</p>\n<h2 id=\"マウスの使い方\"><a href=\"#マウスの使い方\" class=\"headerlink\" title=\"マウスの使い方\"></a>マウスの使い方</h2><p>いよいよプログラムを「動かす」時がきた。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br /><span style=\"color: #0000cc;\">size</span>(400,400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){<br /><span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,30,30);<br />}<br>上記のプログラムをコピペまたは記述して実行してみよう。<br>そしてウィンドウの上でマウスカーソルを動かしてみよう。<br>マウスカーソルに円がついてきたら成功である。</p>\n<p>感動の一瞬である。</p>\n<p>さて、解説をしよう。</p>\n<p>変数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouseX　マウスのｘ座標</span><br><span class=\"line\">mouseY　マウスのｙ座標</span><br></pre></td></tr></table></figure>\n\n<p>プログラミングにおいて変数とは、数字の入れ物のことである。<br>マウスを動かすと、マウスカーソルの座標が動くので、mouseXとmouseYも変わる。<br>その場所を指定してellipse(); を記述してやればマウスカーソルの場所に円が出現し、追尾してくるように見えるというわけである。</p>\n<p>次に、直前に描かれた円を消してみよう。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> background</span>(255);<br />  <span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>, <span style=\"color: #cc00cc;\">mouseY</span>, 30, 30);<br />}<br>上記をコピペしてもいいが、要するにellipse();の前にbackground();を記述するだけである。<br>色についてはこちらを見ていただきたい。<br><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/154412\">Processingでスケッチ（２） - 鮭の水槽</a></p>\n<h2 id=\"マウスを使って色を変える\"><a href=\"#マウスを使って色を変える\" class=\"headerlink\" title=\"マウスを使って色を変える\"></a>マウスを使って色を変える</h2><p>色の話題が出てきたところで、背景色をマウスの位置によってかえるプログラムを考えてみよう。<br>background();はパラメーターを３つ持つが、マウスからはmouseXとmouseYしか情報がとれない。そこで、今回はRとGをそれぞれmouseX,mouseYにあててみよう。<br><span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> setup</span>() {<br /><span style=\"color: #0000cc;\">  size</span>(400, 400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">background</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,0);<br />}<br>となる。</p>\n<p>ところで、色は255段階しかないのに対しmouseX,mouseYはsize(400,400);なのでそれぞれ400まであるはずである。255を超えたらどうなるのだろう？</p>\n<p>色は255を超えても255に直される。だから、mouseXが255より右に行ったとしてもそれ以上色は変わらないのだ。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回はマウスカーソルの座標を用いてsetup,drawについて解説した。通常では味わえない「プログラム感」を味わっていただければ本望である。<br>ただし、変数についてはまた期を新たにじっくり取り組む必要があるし、最低限の説明ができているのかも分からない。Wikipediaにも確実な解説がなかったときは正直驚いた。それだけ人に文字で説明するのが難しいテーマなのかもしれない。<br>ところで、今回画像を用いていないのはいじわるではなく、手持ちのツールでは原理的にマウスカーソルを画像に表示できなかったためである。プリントスクリーンも勝手が悪い。どこかにいいツールがないものだろうか。<br>そのうち自分でつくろうと思う。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>前の記事までで、基本的な図形や点、線を描くことができ、色や大きさまで変えられるようになるはずである。これだけでももうプログラマーと名乗っていいいのではないだろうか。<br>しかし、皆さんは「これではペイントツールとおなじでは…」と思われるかもしれない。<br>そこで、プログラムに新たな機能を追加して「プログラム感」を味わっていただきたい。</p>\n<h2 id=\"保存する\"><a href=\"#保存する\" class=\"headerlink\" title=\"保存する\"></a>保存する</h2><p>自分の画面上のプログラムを人に見せるだけではつまらない。<br>保存方法を考えよう。<br>①.pdeファイルで保存する。<br>プログラムをそのまま保存する方法である。<br>File → Save As で名前をつけて保存できる。上書き保存したい場合は Save を選ぼう。<br>②.exeファイルで保存する。<br>この方法だと、プログラムを書きかえれなくなる代わりに、ほとんどどのPCでも動く実行ファイルにして保存できる。<br>File → Export Application → 任意の場所を選ぶ → Export<br>①の方法で保存していない場合、途中で聞かれるので保存しよう。</p>\n<h2 id=\"setup-drawについて\"><a href=\"#setup-drawについて\" class=\"headerlink\" title=\"setup,drawについて\"></a>setup,drawについて</h2><p>Processingのプログラミングにおける性質をより深く知ってもらうためには、setup,drawという考え方が不可欠である。<br>setupとは、初期設定のことである。<br>drawとは、初期設定後の繰り返し作業（ルーチン）のことである。<br>これをプログラムに組み込むことで、できることの幅が広がる。</p>\n<p>setup,drawを利用したプログラム</p>\n<p><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br />size(400,400);<br />}<br><span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> draw</span>(){<br />ellipse(200,200,100,100);<br />}</p>\n<p>上記のプログラムをコピペか記述して、実行してみよう。<br>画面の中に円が描かれていれば成功である。<br>今までのプログラムと何も違わないように見えると思う。しかし、今回のプログラムと今までのプログラムでは決定的に違う点がある。<br>それは、<span style=\"color: #cc0000;\">描かれ続けている</span>ということだ。</p>\n<p>まずは、setupから詳しい説明をしよう。<br><span style=\"color: #00cccc;\">void <span style=\"color: #0000cc;\">setup</span></span>(){<br>初期設定<br>}<br>である。<br>「void」 という単語やsetupの後についている「()」については今は特に意味がない。<br>覚えていただきたいのはその後の「{}」の中に初期設定を記述するということだ。<br>初期設定は、はじめに一回実行されるとその後はもう行われない作業のことである。<br>例えば、size(); がそうである。毎回ウィンドウのサイズを決めなくても、普通ウィンドウの大きさは一定である。<br>ちなみにsetup,drawが導入されていない今までのプログラムは、全てsetupであるという見方もできる。</p>\n<p>次に、drawについて説明しよう。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){<br>繰り返し作業（ルーチン）<br>}<br>である。<br>こちらも「void」や「()」について今は意味がない。<br>繰り返し作業は、setupのあとに、１秒に約６０回のペースで行われ続ける。<br>プログラムのメインはこっちである。</p>\n<h2 id=\"setup-drawの使い方\"><a href=\"#setup-drawの使い方\" class=\"headerlink\" title=\"setup,drawの使い方\"></a>setup,drawの使い方</h2><p>パラパラ漫画を思い浮かべて欲しい。棒人間が踊っているとする。<br>ページの大きさや紙の厚さは途中で変える必要がないだろう。一度決めれば十分である。これがsetupである。<br>棒人間は１ページごとに（あるいは４ページかもしれない）ポーズを変えてやる必要がある。棒立ちでは面白くないからだ。これがdrawである。<br>Processingでは、この「ページ」を「フレーム」と呼ぶ。フレームごとに絵をかえてやればプログラムが「動いているように」見える。　いや、「動いている」のだ。<br> もっとも、そのためにはフレームごとに絵を変える方法を知らないといけない。<br>手っ取り早いのはマウスをつかうことである。</p>\n<h2 id=\"マウスの使い方\"><a href=\"#マウスの使い方\" class=\"headerlink\" title=\"マウスの使い方\"></a>マウスの使い方</h2><p>いよいよプログラムを「動かす」時がきた。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>(){<br /><span style=\"color: #0000cc;\">size</span>(400,400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>(){<br /><span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,30,30);<br />}<br>上記のプログラムをコピペまたは記述して実行してみよう。<br>そしてウィンドウの上でマウスカーソルを動かしてみよう。<br>マウスカーソルに円がついてきたら成功である。</p>\n<p>感動の一瞬である。</p>\n<p>さて、解説をしよう。</p>\n<p>変数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouseX　マウスのｘ座標</span><br><span class=\"line\">mouseY　マウスのｙ座標</span><br></pre></td></tr></table></figure>\n\n<p>プログラミングにおいて変数とは、数字の入れ物のことである。<br>マウスを動かすと、マウスカーソルの座標が動くので、mouseXとmouseYも変わる。<br>その場所を指定してellipse(); を記述してやればマウスカーソルの場所に円が出現し、追尾してくるように見えるというわけである。</p>\n<p>次に、直前に描かれた円を消してみよう。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> background</span>(255);<br />  <span style=\"color: #0000cc;\">ellipse</span>(<span style=\"color: #cc00cc;\">mouseX</span>, <span style=\"color: #cc00cc;\">mouseY</span>, 30, 30);<br />}<br>上記をコピペしてもいいが、要するにellipse();の前にbackground();を記述するだけである。<br>色についてはこちらを見ていただきたい。<br><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/23/154412\">Processingでスケッチ（２） - 鮭の水槽</a></p>\n<h2 id=\"マウスを使って色を変える\"><a href=\"#マウスを使って色を変える\" class=\"headerlink\" title=\"マウスを使って色を変える\"></a>マウスを使って色を変える</h2><p>色の話題が出てきたところで、背景色をマウスの位置によってかえるプログラムを考えてみよう。<br>background();はパラメーターを３つ持つが、マウスからはmouseXとmouseYしか情報がとれない。そこで、今回はRとGをそれぞれmouseX,mouseYにあててみよう。<br><span style=\"color: #00cccc;\">void</span><span style=\"color: #0000cc;\"> setup</span>() {<br /><span style=\"color: #0000cc;\">  size</span>(400, 400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">background</span>(<span style=\"color: #cc00cc;\">mouseX</span>,<span style=\"color: #cc00cc;\">mouseY</span>,0);<br />}<br>となる。</p>\n<p>ところで、色は255段階しかないのに対しmouseX,mouseYはsize(400,400);なのでそれぞれ400まであるはずである。255を超えたらどうなるのだろう？</p>\n<p>色は255を超えても255に直される。だから、mouseXが255より右に行ったとしてもそれ以上色は変わらないのだ。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回はマウスカーソルの座標を用いてsetup,drawについて解説した。通常では味わえない「プログラム感」を味わっていただければ本望である。<br>ただし、変数についてはまた期を新たにじっくり取り組む必要があるし、最低限の説明ができているのかも分からない。Wikipediaにも確実な解説がなかったときは正直驚いた。それだけ人に文字で説明するのが難しいテーマなのかもしれない。<br>ところで、今回画像を用いていないのはいじわるではなく、手持ちのツールでは原理的にマウスカーソルを画像に表示できなかったためである。プリントスクリーンも勝手が悪い。どこかにいいツールがないものだろうか。<br>そのうち自分でつくろうと思う。</p>\n<hr>\n"},{"title":"プログラミングにおける演算・条件・繰り返し","date":"2013-12-30T07:39:13.000Z","_content":"\n## はじめに\n今回は、どのプログラミング言語の入門書を買ってっも載っているであろう演算・条件・繰り返しの３つについて考えようと思う。\nこれらについて書かれているものは非常にたくさんあるので、勉強に困ることはないと思う。ただ、少しずつやっていては時間がかかって面白くないので、一気にやってしまおうという試みである。\n \n## 演算\n基本的には数学とおなじである。四則演算は、\n＋　…　加法（足し算）\nー　…　減法（引き算）\n＊　…　乗法（割り算）\n／　…　除法（掛け算）\nである。掛け算と割り算の記号が違うことに注意していただきたい。\n \n次に、プログラミング特有の記号を紹介する。\n％　…　剰余（あまり）\nこの記号は意外とよくつかうので覚えよう。\n代わりに「mod」と記述する場合もある。\n \n次に、等号・不等号の扱い方を紹介する。\n＝　…　<span style=\"color: #cc0000;\">代入</span>\n＝＝　…　等しい\n＜　…小なり（より小さい）\n＞　…大なり（より大きい）\n＜＝　…　以下\n＞＝　…　以上\n \n次に、論理演算子について紹介する。\nand　…　かつ\nor　…　または\n \n以上が演算子一覧である。言語によってはここに無いものがあったり違ったりするものもあるが、基本的には同じである。\n \n \n## 条件\n条件について記述する場合も、たいてい同じである。\n　if (条件){\n「条件を満たした時の処理」\n}\nである。　\n \n## 繰り返し\n繰り返しには、while文とfor文がある。\n両方の書き方を覚えよう。\n \n〇while文\nwhile(条件){\n「条件を満たす限り繰り返す処理」\n}\n \n〇for文\n（１）for - then文\nfor(この処理内でのみ使う変数 , 条件 , 1ループごとに行う処理){\n「条件を満たす限り繰り返す処理」\n}\n（２）for - each文\nfor(この処理内でのみ使う変数 : １ループごとに代入するリストなど){\n「全ての要素に行う処理」\n}\n \nである。\n \n## 終わりに\n今回はざっくりとした概要を一気に掲載した。\nどれも実際に使ってみないと定着しないテーマなので、各プログラミング言語の解説ページの例を見るなどしてぜひ実践して欲しい。\n---\n","source":"_posts/2013-12-30-プログラミングにおける演算・条件・繰り返し.md","raw":"---\ntitle: プログラミングにおける演算・条件・繰り返し\ndate: 2013-12-30 16:39:13\ncategory: プログラミング一般\n---\n\n## はじめに\n今回は、どのプログラミング言語の入門書を買ってっも載っているであろう演算・条件・繰り返しの３つについて考えようと思う。\nこれらについて書かれているものは非常にたくさんあるので、勉強に困ることはないと思う。ただ、少しずつやっていては時間がかかって面白くないので、一気にやってしまおうという試みである。\n \n## 演算\n基本的には数学とおなじである。四則演算は、\n＋　…　加法（足し算）\nー　…　減法（引き算）\n＊　…　乗法（割り算）\n／　…　除法（掛け算）\nである。掛け算と割り算の記号が違うことに注意していただきたい。\n \n次に、プログラミング特有の記号を紹介する。\n％　…　剰余（あまり）\nこの記号は意外とよくつかうので覚えよう。\n代わりに「mod」と記述する場合もある。\n \n次に、等号・不等号の扱い方を紹介する。\n＝　…　<span style=\"color: #cc0000;\">代入</span>\n＝＝　…　等しい\n＜　…小なり（より小さい）\n＞　…大なり（より大きい）\n＜＝　…　以下\n＞＝　…　以上\n \n次に、論理演算子について紹介する。\nand　…　かつ\nor　…　または\n \n以上が演算子一覧である。言語によってはここに無いものがあったり違ったりするものもあるが、基本的には同じである。\n \n \n## 条件\n条件について記述する場合も、たいてい同じである。\n　if (条件){\n「条件を満たした時の処理」\n}\nである。　\n \n## 繰り返し\n繰り返しには、while文とfor文がある。\n両方の書き方を覚えよう。\n \n〇while文\nwhile(条件){\n「条件を満たす限り繰り返す処理」\n}\n \n〇for文\n（１）for - then文\nfor(この処理内でのみ使う変数 , 条件 , 1ループごとに行う処理){\n「条件を満たす限り繰り返す処理」\n}\n（２）for - each文\nfor(この処理内でのみ使う変数 : １ループごとに代入するリストなど){\n「全ての要素に行う処理」\n}\n \nである。\n \n## 終わりに\n今回はざっくりとした概要を一気に掲載した。\nどれも実際に使ってみないと定着しないテーマなので、各プログラミング言語の解説ページの例を見るなどしてぜひ実践して欲しい。\n---\n","slug":"プログラミングにおける演算・条件・繰り返し","published":1,"updated":"2020-05-16T07:33:22.646Z","_id":"cka9bdf1e000kxgtvbrij4zwp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今回は、どのプログラミング言語の入門書を買ってっも載っているであろう演算・条件・繰り返しの３つについて考えようと思う。<br>これらについて書かれているものは非常にたくさんあるので、勉強に困ることはないと思う。ただ、少しずつやっていては時間がかかって面白くないので、一気にやってしまおうという試みである。</p>\n<h2 id=\"演算\"><a href=\"#演算\" class=\"headerlink\" title=\"演算\"></a>演算</h2><p>基本的には数学とおなじである。四則演算は、<br>＋　…　加法（足し算）<br>ー　…　減法（引き算）<br>＊　…　乗法（割り算）<br>／　…　除法（掛け算）<br>である。掛け算と割り算の記号が違うことに注意していただきたい。</p>\n<p>次に、プログラミング特有の記号を紹介する。<br>％　…　剰余（あまり）<br>この記号は意外とよくつかうので覚えよう。<br>代わりに「mod」と記述する場合もある。</p>\n<p>次に、等号・不等号の扱い方を紹介する。<br>＝　…　<span style=\"color: #cc0000;\">代入</span><br>＝＝　…　等しい<br>＜　…小なり（より小さい）<br>＞　…大なり（より大きい）<br>＜＝　…　以下<br>＞＝　…　以上</p>\n<p>次に、論理演算子について紹介する。<br>and　…　かつ<br>or　…　または</p>\n<p>以上が演算子一覧である。言語によってはここに無いものがあったり違ったりするものもあるが、基本的には同じである。</p>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p>条件について記述する場合も、たいてい同じである。<br>　if (条件){<br>「条件を満たした時の処理」<br>}<br>である。　</p>\n<h2 id=\"繰り返し\"><a href=\"#繰り返し\" class=\"headerlink\" title=\"繰り返し\"></a>繰り返し</h2><p>繰り返しには、while文とfor文がある。<br>両方の書き方を覚えよう。</p>\n<p>〇while文<br>while(条件){<br>「条件を満たす限り繰り返す処理」<br>}</p>\n<p>〇for文<br>（１）for - then文<br>for(この処理内でのみ使う変数 , 条件 , 1ループごとに行う処理){<br>「条件を満たす限り繰り返す処理」<br>}<br>（２）for - each文<br>for(この処理内でのみ使う変数 : １ループごとに代入するリストなど){<br>「全ての要素に行う処理」<br>}</p>\n<p>である。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回はざっくりとした概要を一気に掲載した。<br>どれも実際に使ってみないと定着しないテーマなので、各プログラミング言語の解説ページの例を見るなどしてぜひ実践して欲しい。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今回は、どのプログラミング言語の入門書を買ってっも載っているであろう演算・条件・繰り返しの３つについて考えようと思う。<br>これらについて書かれているものは非常にたくさんあるので、勉強に困ることはないと思う。ただ、少しずつやっていては時間がかかって面白くないので、一気にやってしまおうという試みである。</p>\n<h2 id=\"演算\"><a href=\"#演算\" class=\"headerlink\" title=\"演算\"></a>演算</h2><p>基本的には数学とおなじである。四則演算は、<br>＋　…　加法（足し算）<br>ー　…　減法（引き算）<br>＊　…　乗法（割り算）<br>／　…　除法（掛け算）<br>である。掛け算と割り算の記号が違うことに注意していただきたい。</p>\n<p>次に、プログラミング特有の記号を紹介する。<br>％　…　剰余（あまり）<br>この記号は意外とよくつかうので覚えよう。<br>代わりに「mod」と記述する場合もある。</p>\n<p>次に、等号・不等号の扱い方を紹介する。<br>＝　…　<span style=\"color: #cc0000;\">代入</span><br>＝＝　…　等しい<br>＜　…小なり（より小さい）<br>＞　…大なり（より大きい）<br>＜＝　…　以下<br>＞＝　…　以上</p>\n<p>次に、論理演算子について紹介する。<br>and　…　かつ<br>or　…　または</p>\n<p>以上が演算子一覧である。言語によってはここに無いものがあったり違ったりするものもあるが、基本的には同じである。</p>\n<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><p>条件について記述する場合も、たいてい同じである。<br>　if (条件){<br>「条件を満たした時の処理」<br>}<br>である。　</p>\n<h2 id=\"繰り返し\"><a href=\"#繰り返し\" class=\"headerlink\" title=\"繰り返し\"></a>繰り返し</h2><p>繰り返しには、while文とfor文がある。<br>両方の書き方を覚えよう。</p>\n<p>〇while文<br>while(条件){<br>「条件を満たす限り繰り返す処理」<br>}</p>\n<p>〇for文<br>（１）for - then文<br>for(この処理内でのみ使う変数 , 条件 , 1ループごとに行う処理){<br>「条件を満たす限り繰り返す処理」<br>}<br>（２）for - each文<br>for(この処理内でのみ使う変数 : １ループごとに代入するリストなど){<br>「全ての要素に行う処理」<br>}</p>\n<p>である。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回はざっくりとした概要を一気に掲載した。<br>どれも実際に使ってみないと定着しないテーマなので、各プログラミング言語の解説ページの例を見るなどしてぜひ実践して欲しい。</p>\n<hr>\n"},{"title":"Processingで動きのあるスケッチ","date":"2013-12-31T04:21:19.000Z","_content":"\n## はじめに\n今回は、変数をつかって動きのあるスケッチを描いてみようと思う。\n大事な概念を扱うので、じっくり読んで欲しい。\n \n## Processingにおける変数の使い方\nProcessingでは変数を使う前に、これから何が（数値、文字など）入る変数を使うのかを宣言する必要がある。\n具体的な方法は、\n\n宣言\n\n型 変数 ;\nである。\n変数の方は自分で決めた文字、例えば「ｘ」や「ｙ」を使う。「hoge」のように単語にしても問題はない。　ただし、2単語以上使う場合は間にスペースを挟めないので、前述のとおり後ろの単語を大文字にしてつなげるのが一般的である。\n型の方は既に用意されているものから選ぶことになる。Processingに用意されている主な型は、\nfloat　…　実数を扱う\nint　…　整数を扱う\ncher　…　文字を扱う\nboolean　…　真理値を扱う\n他にもたくさんあるようだが、今回は十分である。\nこの中で最も見慣れないのはboolean型ではないだろうか。boolean型にはいる\nデータは二つしかなく、「true」と「false」である。yesとnoと言い換えるとわかりやすいかもしれない。いずれプログラム中に出現するので、覚えておこう。\n \n## 変数を使ったスケッチ\n幸いにも、皆さんはすでに基本的な図形を数字を使って描くことができるので、あとはそこに変数を組み込むだけで動きのあるスケッチを描くことができる。\nそれをステップごとに解説していこう。\nまず、変数を宣言して数字を代入、その座標に円を表示することからはじめてみよう。もちろん、setup,drawを使っていただきたい。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  <span style=\"color: #990000;\">int</span> x;<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> ellipse</span>(x, 100, 50, 50);<br />}\nどうだろう？<span style=\"color: #cc0000;\">エラーが発生</span>しただろうか？\n実は、このプログラムには間違いがある。\nそれは、変数を宣言する場所だ。\n \n★ローカル変数とグローバル変数\nProcessingにおいて、変数には種類がある。\n代表的なものはグローバル変数とローカル変数の区別である。\nグローバル変数とは、<span style=\"color: #0000cc;\">全体で共通に</span>使える変数である。\nローカル変数とは、<span style=\"color: #cc0000;\">ある部分でのみ</span>使える変数である。\n一つのプログラム中に両方つかわれても問題ない。\n実際に使う際には、setup,drawなど（これらをまとめてメソッドという）の外で宣言すればグローバル変数、中で宣言すればローカル変数である。\n上記のプログラムの場合、setup内でｘを宣言しているのでｘはローカル変数である。よって、この変数はsetup内でのみ使うことができる。そのため、draw内のellipse();で呼び出すことはできないのである。\nこのプログラムを正しく動かすには、draw内でｘを宣言するか、外で宣言してやればいいのだ。今回は外で宣言してみよう。\n<span style=\"color: #990000;\">int</span> x;\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}\nこれでエラーはでないはずである。\nところで、皆さんは一つ疑問に思うことがないだろうか？ \nxに数字を代入していないのに自動で０ということになっている。\n次はこのことについて解説しようと思う。\n \n## 変数の初期化\n 変数は宣言しただけではまだ何のデータも入っていない。この「何もない」状態を「null」と表現する。int型や、float型の場合は、とりあえず0として扱う命令もあり先ほどのプログラムがその一例であるが、基本的には初期化をして扱う。\n変数の初期化とは、簡単に言えば最初のデータを代入することである。\n具体的には、int型の場合\nint x;\nx=0;\nと記述する。初期値を５にしたい場合はa=5;でよい。また、\nint x= 0;\nと記述することで宣言と初期化を同時に行うことができる。\nProessingの場合、グローバル変数はsetupで初期かしておくのが無難だと思う。\n以上のことを取り入れたプログラムを記述すると、\n<span style=\"color: #990000;\">int</span> x;\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}<br />となる。\n \n## Processingで図形を動かしてみる\nそれでは、いよいよ円を動かしてみよう。\n方法は簡単で、drawの中の繰り返し処理を行う度に、xを増やしていけばよい。\n<span style=\"color: #990000;\">int</span> x;\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />  x = x+1;<br />}<br />以上のプログラムをコピペするか記述して動かしてみよう。\nマウスを使った時とはまた違った感動がある。\nちなみに、初期値０を他の数に変えてあげれば開始地点が変わり、増加量を変えてあげれば速度が変わる。\nところで、プログラミングでは、a = a+1というような処理が頻繁にでてくる。そのため、より簡潔に記述する方法が用意されている。\na += 1;\nこれで「足して代入」という意味になる。また、\na++;\nこれで「1を足して代入」という意味になる。\n  \n ## 様々な動きをつけてみる\n上記のことを応用すると、図形に様々な動きをつけることができる。\nint x;<br />int y;<br />int z;\nvoid setup() {<br />  size(400, 400);<br />  x = 0;<br />  y = 15;<br />}\nvoid draw() {<br />  background(0);<br />  fill(z);<br />  ellipse(x, y, x*5, y*5);<br />  x++;<br />  y++;<br />  z++;\n  if (z &gt;= 255) {<br />    z = 255;<br />  }<br />}\n上記のプログラムでは、図形を描くまえにbackground();をいれることで残像を消している。色の塗りつぶしはグレースケールにして変数に置き換え、最後の条件文でzが255以上にならないようにしている。\n条件文の書き方については、今までの記事を見て欲しい。\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/24/163913\">プログラミングにおける演算・条件・繰り返し - 鮭の水槽</a>\n \n## 終わりに\n今回までの知識で、いろんなアニメーションをつくれるようになる。\n皆さんは既に基本一通り（人によるが）を終えており、あとは組み合わせ方や便利な機能を使って好きなプログラムを組んでいくことが大事である。\nProcessingのリファレンスもページには、このブログで扱わなかった命令などがたくさん乗っているので、ぜひ確認して欲しい。\n<a href=\"https://processing.org/reference/\">Language Reference (API) \\ Processing 2+</a>\n","source":"_posts/2013-12-31-Processingで動きのあるスケッチ.md","raw":"---\ntitle: Processingで動きのあるスケッチ\ndate: 2013-12-31 13:21:19\ncategory: Processing\n---\n\n## はじめに\n今回は、変数をつかって動きのあるスケッチを描いてみようと思う。\n大事な概念を扱うので、じっくり読んで欲しい。\n \n## Processingにおける変数の使い方\nProcessingでは変数を使う前に、これから何が（数値、文字など）入る変数を使うのかを宣言する必要がある。\n具体的な方法は、\n\n宣言\n\n型 変数 ;\nである。\n変数の方は自分で決めた文字、例えば「ｘ」や「ｙ」を使う。「hoge」のように単語にしても問題はない。　ただし、2単語以上使う場合は間にスペースを挟めないので、前述のとおり後ろの単語を大文字にしてつなげるのが一般的である。\n型の方は既に用意されているものから選ぶことになる。Processingに用意されている主な型は、\nfloat　…　実数を扱う\nint　…　整数を扱う\ncher　…　文字を扱う\nboolean　…　真理値を扱う\n他にもたくさんあるようだが、今回は十分である。\nこの中で最も見慣れないのはboolean型ではないだろうか。boolean型にはいる\nデータは二つしかなく、「true」と「false」である。yesとnoと言い換えるとわかりやすいかもしれない。いずれプログラム中に出現するので、覚えておこう。\n \n## 変数を使ったスケッチ\n幸いにも、皆さんはすでに基本的な図形を数字を使って描くことができるので、あとはそこに変数を組み込むだけで動きのあるスケッチを描くことができる。\nそれをステップごとに解説していこう。\nまず、変数を宣言して数字を代入、その座標に円を表示することからはじめてみよう。もちろん、setup,drawを使っていただきたい。\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  <span style=\"color: #990000;\">int</span> x;<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> ellipse</span>(x, 100, 50, 50);<br />}\nどうだろう？<span style=\"color: #cc0000;\">エラーが発生</span>しただろうか？\n実は、このプログラムには間違いがある。\nそれは、変数を宣言する場所だ。\n \n★ローカル変数とグローバル変数\nProcessingにおいて、変数には種類がある。\n代表的なものはグローバル変数とローカル変数の区別である。\nグローバル変数とは、<span style=\"color: #0000cc;\">全体で共通に</span>使える変数である。\nローカル変数とは、<span style=\"color: #cc0000;\">ある部分でのみ</span>使える変数である。\n一つのプログラム中に両方つかわれても問題ない。\n実際に使う際には、setup,drawなど（これらをまとめてメソッドという）の外で宣言すればグローバル変数、中で宣言すればローカル変数である。\n上記のプログラムの場合、setup内でｘを宣言しているのでｘはローカル変数である。よって、この変数はsetup内でのみ使うことができる。そのため、draw内のellipse();で呼び出すことはできないのである。\nこのプログラムを正しく動かすには、draw内でｘを宣言するか、外で宣言してやればいいのだ。今回は外で宣言してみよう。\n<span style=\"color: #990000;\">int</span> x;\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}\nこれでエラーはでないはずである。\nところで、皆さんは一つ疑問に思うことがないだろうか？ \nxに数字を代入していないのに自動で０ということになっている。\n次はこのことについて解説しようと思う。\n \n## 変数の初期化\n 変数は宣言しただけではまだ何のデータも入っていない。この「何もない」状態を「null」と表現する。int型や、float型の場合は、とりあえず0として扱う命令もあり先ほどのプログラムがその一例であるが、基本的には初期化をして扱う。\n変数の初期化とは、簡単に言えば最初のデータを代入することである。\n具体的には、int型の場合\nint x;\nx=0;\nと記述する。初期値を５にしたい場合はa=5;でよい。また、\nint x= 0;\nと記述することで宣言と初期化を同時に行うことができる。\nProessingの場合、グローバル変数はsetupで初期かしておくのが無難だと思う。\n以上のことを取り入れたプログラムを記述すると、\n<span style=\"color: #990000;\">int</span> x;\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}<br />となる。\n \n## Processingで図形を動かしてみる\nそれでは、いよいよ円を動かしてみよう。\n方法は簡単で、drawの中の繰り返し処理を行う度に、xを増やしていけばよい。\n<span style=\"color: #990000;\">int</span> x;\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}\n<span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />  x = x+1;<br />}<br />以上のプログラムをコピペするか記述して動かしてみよう。\nマウスを使った時とはまた違った感動がある。\nちなみに、初期値０を他の数に変えてあげれば開始地点が変わり、増加量を変えてあげれば速度が変わる。\nところで、プログラミングでは、a = a+1というような処理が頻繁にでてくる。そのため、より簡潔に記述する方法が用意されている。\na += 1;\nこれで「足して代入」という意味になる。また、\na++;\nこれで「1を足して代入」という意味になる。\n  \n ## 様々な動きをつけてみる\n上記のことを応用すると、図形に様々な動きをつけることができる。\nint x;<br />int y;<br />int z;\nvoid setup() {<br />  size(400, 400);<br />  x = 0;<br />  y = 15;<br />}\nvoid draw() {<br />  background(0);<br />  fill(z);<br />  ellipse(x, y, x*5, y*5);<br />  x++;<br />  y++;<br />  z++;\n  if (z &gt;= 255) {<br />    z = 255;<br />  }<br />}\n上記のプログラムでは、図形を描くまえにbackground();をいれることで残像を消している。色の塗りつぶしはグレースケールにして変数に置き換え、最後の条件文でzが255以上にならないようにしている。\n条件文の書き方については、今までの記事を見て欲しい。\n<a href=\"https://salmon2073.hatenablog.com/entry/2013/12/24/163913\">プログラミングにおける演算・条件・繰り返し - 鮭の水槽</a>\n \n## 終わりに\n今回までの知識で、いろんなアニメーションをつくれるようになる。\n皆さんは既に基本一通り（人によるが）を終えており、あとは組み合わせ方や便利な機能を使って好きなプログラムを組んでいくことが大事である。\nProcessingのリファレンスもページには、このブログで扱わなかった命令などがたくさん乗っているので、ぜひ確認して欲しい。\n<a href=\"https://processing.org/reference/\">Language Reference (API) \\ Processing 2+</a>\n","slug":"Processingで動きのあるスケッチ","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bdh12000nxgtv3ytbct1c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今回は、変数をつかって動きのあるスケッチを描いてみようと思う。<br>大事な概念を扱うので、じっくり読んで欲しい。</p>\n<h2 id=\"Processingにおける変数の使い方\"><a href=\"#Processingにおける変数の使い方\" class=\"headerlink\" title=\"Processingにおける変数の使い方\"></a>Processingにおける変数の使い方</h2><p>Processingでは変数を使う前に、これから何が（数値、文字など）入る変数を使うのかを宣言する必要がある。<br>具体的な方法は、</p>\n<p>宣言</p>\n<p>型 変数 ;<br>である。<br>変数の方は自分で決めた文字、例えば「ｘ」や「ｙ」を使う。「hoge」のように単語にしても問題はない。　ただし、2単語以上使う場合は間にスペースを挟めないので、前述のとおり後ろの単語を大文字にしてつなげるのが一般的である。<br>型の方は既に用意されているものから選ぶことになる。Processingに用意されている主な型は、<br>float　…　実数を扱う<br>int　…　整数を扱う<br>cher　…　文字を扱う<br>boolean　…　真理値を扱う<br>他にもたくさんあるようだが、今回は十分である。<br>この中で最も見慣れないのはboolean型ではないだろうか。boolean型にはいる<br>データは二つしかなく、「true」と「false」である。yesとnoと言い換えるとわかりやすいかもしれない。いずれプログラム中に出現するので、覚えておこう。</p>\n<h2 id=\"変数を使ったスケッチ\"><a href=\"#変数を使ったスケッチ\" class=\"headerlink\" title=\"変数を使ったスケッチ\"></a>変数を使ったスケッチ</h2><p>幸いにも、皆さんはすでに基本的な図形を数字を使って描くことができるので、あとはそこに変数を組み込むだけで動きのあるスケッチを描くことができる。<br>それをステップごとに解説していこう。<br>まず、変数を宣言して数字を代入、その座標に円を表示することからはじめてみよう。もちろん、setup,drawを使っていただきたい。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  <span style=\"color: #990000;\">int</span> x;<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> ellipse</span>(x, 100, 50, 50);<br />}<br>どうだろう？<span style=\"color: #cc0000;\">エラーが発生</span>しただろうか？<br>実は、このプログラムには間違いがある。<br>それは、変数を宣言する場所だ。</p>\n<p>★ローカル変数とグローバル変数<br>Processingにおいて、変数には種類がある。<br>代表的なものはグローバル変数とローカル変数の区別である。<br>グローバル変数とは、<span style=\"color: #0000cc;\">全体で共通に</span>使える変数である。<br>ローカル変数とは、<span style=\"color: #cc0000;\">ある部分でのみ</span>使える変数である。<br>一つのプログラム中に両方つかわれても問題ない。<br>実際に使う際には、setup,drawなど（これらをまとめてメソッドという）の外で宣言すればグローバル変数、中で宣言すればローカル変数である。<br>上記のプログラムの場合、setup内でｘを宣言しているのでｘはローカル変数である。よって、この変数はsetup内でのみ使うことができる。そのため、draw内のellipse();で呼び出すことはできないのである。<br>このプログラムを正しく動かすには、draw内でｘを宣言するか、外で宣言してやればいいのだ。今回は外で宣言してみよう。<br><span style=\"color: #990000;\">int</span> x;<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}<br>これでエラーはでないはずである。<br>ところで、皆さんは一つ疑問に思うことがないだろうか？<br>xに数字を代入していないのに自動で０ということになっている。<br>次はこのことについて解説しようと思う。</p>\n<h2 id=\"変数の初期化\"><a href=\"#変数の初期化\" class=\"headerlink\" title=\"変数の初期化\"></a>変数の初期化</h2><p> 変数は宣言しただけではまだ何のデータも入っていない。この「何もない」状態を「null」と表現する。int型や、float型の場合は、とりあえず0として扱う命令もあり先ほどのプログラムがその一例であるが、基本的には初期化をして扱う。<br>変数の初期化とは、簡単に言えば最初のデータを代入することである。<br>具体的には、int型の場合<br>int x;<br>x=0;<br>と記述する。初期値を５にしたい場合はa=5;でよい。また、<br>int x= 0;<br>と記述することで宣言と初期化を同時に行うことができる。<br>Proessingの場合、グローバル変数はsetupで初期かしておくのが無難だと思う。<br>以上のことを取り入れたプログラムを記述すると、<br><span style=\"color: #990000;\">int</span> x;<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}<br />となる。</p>\n<h2 id=\"Processingで図形を動かしてみる\"><a href=\"#Processingで図形を動かしてみる\" class=\"headerlink\" title=\"Processingで図形を動かしてみる\"></a>Processingで図形を動かしてみる</h2><p>それでは、いよいよ円を動かしてみよう。<br>方法は簡単で、drawの中の繰り返し処理を行う度に、xを増やしていけばよい。<br><span style=\"color: #990000;\">int</span> x;<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />  x = x+1;<br />}<br />以上のプログラムをコピペするか記述して動かしてみよう。<br>マウスを使った時とはまた違った感動がある。<br>ちなみに、初期値０を他の数に変えてあげれば開始地点が変わり、増加量を変えてあげれば速度が変わる。<br>ところで、プログラミングでは、a = a+1というような処理が頻繁にでてくる。そのため、より簡潔に記述する方法が用意されている。<br>a += 1;<br>これで「足して代入」という意味になる。また、<br>a++;<br>これで「1を足して代入」という意味になる。</p>\n<h2 id=\"様々な動きをつけてみる\"><a href=\"#様々な動きをつけてみる\" class=\"headerlink\" title=\"様々な動きをつけてみる\"></a>様々な動きをつけてみる</h2><p>上記のことを応用すると、図形に様々な動きをつけることができる。<br>int x;<br />int y;<br />int z;<br>void setup() {<br />  size(400, 400);<br />  x = 0;<br />  y = 15;<br />}<br>void draw() {<br />  background(0);<br />  fill(z);<br />  ellipse(x, y, x<em>5, y</em>5);<br />  x++;<br />  y++;<br />  z++;<br>  if (z &gt;= 255) {<br />    z = 255;<br />  }<br />}<br>上記のプログラムでは、図形を描くまえにbackground();をいれることで残像を消している。色の塗りつぶしはグレースケールにして変数に置き換え、最後の条件文でzが255以上にならないようにしている。<br>条件文の書き方については、今までの記事を見て欲しい。<br><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/24/163913\">プログラミングにおける演算・条件・繰り返し - 鮭の水槽</a></p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回までの知識で、いろんなアニメーションをつくれるようになる。<br>皆さんは既に基本一通り（人によるが）を終えており、あとは組み合わせ方や便利な機能を使って好きなプログラムを組んでいくことが大事である。<br>Processingのリファレンスもページには、このブログで扱わなかった命令などがたくさん乗っているので、ぜひ確認して欲しい。<br><a href=\"https://processing.org/reference/\">Language Reference (API) \\ Processing 2+</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今回は、変数をつかって動きのあるスケッチを描いてみようと思う。<br>大事な概念を扱うので、じっくり読んで欲しい。</p>\n<h2 id=\"Processingにおける変数の使い方\"><a href=\"#Processingにおける変数の使い方\" class=\"headerlink\" title=\"Processingにおける変数の使い方\"></a>Processingにおける変数の使い方</h2><p>Processingでは変数を使う前に、これから何が（数値、文字など）入る変数を使うのかを宣言する必要がある。<br>具体的な方法は、</p>\n<p>宣言</p>\n<p>型 変数 ;<br>である。<br>変数の方は自分で決めた文字、例えば「ｘ」や「ｙ」を使う。「hoge」のように単語にしても問題はない。　ただし、2単語以上使う場合は間にスペースを挟めないので、前述のとおり後ろの単語を大文字にしてつなげるのが一般的である。<br>型の方は既に用意されているものから選ぶことになる。Processingに用意されている主な型は、<br>float　…　実数を扱う<br>int　…　整数を扱う<br>cher　…　文字を扱う<br>boolean　…　真理値を扱う<br>他にもたくさんあるようだが、今回は十分である。<br>この中で最も見慣れないのはboolean型ではないだろうか。boolean型にはいる<br>データは二つしかなく、「true」と「false」である。yesとnoと言い換えるとわかりやすいかもしれない。いずれプログラム中に出現するので、覚えておこう。</p>\n<h2 id=\"変数を使ったスケッチ\"><a href=\"#変数を使ったスケッチ\" class=\"headerlink\" title=\"変数を使ったスケッチ\"></a>変数を使ったスケッチ</h2><p>幸いにも、皆さんはすでに基本的な図形を数字を使って描くことができるので、あとはそこに変数を組み込むだけで動きのあるスケッチを描くことができる。<br>それをステップごとに解説していこう。<br>まず、変数を宣言して数字を代入、その座標に円を表示することからはじめてみよう。もちろん、setup,drawを使っていただきたい。<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  <span style=\"color: #990000;\">int</span> x;<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br /> <span style=\"color: #0000cc;\"> ellipse</span>(x, 100, 50, 50);<br />}<br>どうだろう？<span style=\"color: #cc0000;\">エラーが発生</span>しただろうか？<br>実は、このプログラムには間違いがある。<br>それは、変数を宣言する場所だ。</p>\n<p>★ローカル変数とグローバル変数<br>Processingにおいて、変数には種類がある。<br>代表的なものはグローバル変数とローカル変数の区別である。<br>グローバル変数とは、<span style=\"color: #0000cc;\">全体で共通に</span>使える変数である。<br>ローカル変数とは、<span style=\"color: #cc0000;\">ある部分でのみ</span>使える変数である。<br>一つのプログラム中に両方つかわれても問題ない。<br>実際に使う際には、setup,drawなど（これらをまとめてメソッドという）の外で宣言すればグローバル変数、中で宣言すればローカル変数である。<br>上記のプログラムの場合、setup内でｘを宣言しているのでｘはローカル変数である。よって、この変数はsetup内でのみ使うことができる。そのため、draw内のellipse();で呼び出すことはできないのである。<br>このプログラムを正しく動かすには、draw内でｘを宣言するか、外で宣言してやればいいのだ。今回は外で宣言してみよう。<br><span style=\"color: #990000;\">int</span> x;<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}<br>これでエラーはでないはずである。<br>ところで、皆さんは一つ疑問に思うことがないだろうか？<br>xに数字を代入していないのに自動で０ということになっている。<br>次はこのことについて解説しようと思う。</p>\n<h2 id=\"変数の初期化\"><a href=\"#変数の初期化\" class=\"headerlink\" title=\"変数の初期化\"></a>変数の初期化</h2><p> 変数は宣言しただけではまだ何のデータも入っていない。この「何もない」状態を「null」と表現する。int型や、float型の場合は、とりあえず0として扱う命令もあり先ほどのプログラムがその一例であるが、基本的には初期化をして扱う。<br>変数の初期化とは、簡単に言えば最初のデータを代入することである。<br>具体的には、int型の場合<br>int x;<br>x=0;<br>と記述する。初期値を５にしたい場合はa=5;でよい。また、<br>int x= 0;<br>と記述することで宣言と初期化を同時に行うことができる。<br>Proessingの場合、グローバル変数はsetupで初期かしておくのが無難だと思う。<br>以上のことを取り入れたプログラムを記述すると、<br><span style=\"color: #990000;\">int</span> x;<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />}<br />となる。</p>\n<h2 id=\"Processingで図形を動かしてみる\"><a href=\"#Processingで図形を動かしてみる\" class=\"headerlink\" title=\"Processingで図形を動かしてみる\"></a>Processingで図形を動かしてみる</h2><p>それでは、いよいよ円を動かしてみよう。<br>方法は簡単で、drawの中の繰り返し処理を行う度に、xを増やしていけばよい。<br><span style=\"color: #990000;\">int</span> x;<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">setup</span>() {<br />  <span style=\"color: #0000cc;\">size</span>(400, 400);<br />  x = 0;<br />}<br><span style=\"color: #00cccc;\">void</span> <span style=\"color: #0000cc;\">draw</span>() {<br />  <span style=\"color: #0000cc;\">ellipse</span>(x, 100, 50, 50);<br />  x = x+1;<br />}<br />以上のプログラムをコピペするか記述して動かしてみよう。<br>マウスを使った時とはまた違った感動がある。<br>ちなみに、初期値０を他の数に変えてあげれば開始地点が変わり、増加量を変えてあげれば速度が変わる。<br>ところで、プログラミングでは、a = a+1というような処理が頻繁にでてくる。そのため、より簡潔に記述する方法が用意されている。<br>a += 1;<br>これで「足して代入」という意味になる。また、<br>a++;<br>これで「1を足して代入」という意味になる。</p>\n<h2 id=\"様々な動きをつけてみる\"><a href=\"#様々な動きをつけてみる\" class=\"headerlink\" title=\"様々な動きをつけてみる\"></a>様々な動きをつけてみる</h2><p>上記のことを応用すると、図形に様々な動きをつけることができる。<br>int x;<br />int y;<br />int z;<br>void setup() {<br />  size(400, 400);<br />  x = 0;<br />  y = 15;<br />}<br>void draw() {<br />  background(0);<br />  fill(z);<br />  ellipse(x, y, x<em>5, y</em>5);<br />  x++;<br />  y++;<br />  z++;<br>  if (z &gt;= 255) {<br />    z = 255;<br />  }<br />}<br>上記のプログラムでは、図形を描くまえにbackground();をいれることで残像を消している。色の塗りつぶしはグレースケールにして変数に置き換え、最後の条件文でzが255以上にならないようにしている。<br>条件文の書き方については、今までの記事を見て欲しい。<br><a href=\"https://salmon2073.hatenablog.com/entry/2013/12/24/163913\">プログラミングにおける演算・条件・繰り返し - 鮭の水槽</a></p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回までの知識で、いろんなアニメーションをつくれるようになる。<br>皆さんは既に基本一通り（人によるが）を終えており、あとは組み合わせ方や便利な機能を使って好きなプログラムを組んでいくことが大事である。<br>Processingのリファレンスもページには、このブログで扱わなかった命令などがたくさん乗っているので、ぜひ確認して欲しい。<br><a href=\"https://processing.org/reference/\">Language Reference (API) \\ Processing 2+</a></p>\n"},{"title":"配列とは","date":"2014-01-01T02:06:57.000Z","_content":"\n## はじめに\n以前に、「プログラミングで重要なのはデータ構造とアルゴリズムである。（受け売り）」と述べたが、配列とはそのデータ構造の一つである。\nプログラミングをする時、自分にあったデータ構造を知っていると、作業効率を大きく上げることができる。\n \n## 配列という考え方\nプログラミングをしていると、同じような種類の変数をたくさん扱うことがある。\n例えばインベーダーゲームを作るとすると、同じような敵がたくさんでてくるので、そのそれぞれの座標を管理する変数が必要になる。ここで、\nint teki1X;\nint teki2X;\nint teki3X;\n：\nなどと記述していては（実際にはｙ座標も必要である）変数だけでもプログラムが長くなり見にくくなるばかりか、一つ一つの変数にあとで初期化や代入をすることを考えると、相当な労力を使うことになるだろう。\nそこで、配列の出番である。\n配列の宣言方法は言語によって異なるが、その本質てきな仕組みは変わらないのでここではProcessingによる一例を示したい。\n\n宣言\n\n型<span data-unlink> 変数 = new 型[要素の数];\n例としては、\nint</span> x = new int[10];\nこれにより、int型の変数を10個まとめた配列が定義される。\n代入方法は簡単で、\nx[0] = 5;\nこれで0番目の変数ｘに5を代入することができる。\nこのように、宣言した後は変数の番号を指定して通常通りに扱うことができる。\nところで、配列を扱うにあたって一つ注意して欲しいことがある。それは、配列の番号についてだ。先ほどの例では10個の変数を用意したが、実際には0~9の10個の変数ができあがている。つまりこの場合では、x[10]は存在していないということである。\n## 配列と繰り返し\nさて、配列を宣言することで数行にわたって変数を宣言する手間は省けたが、代入となるとまだ大変である。例えば初期化をするだけでも\nx[0] = 0;\nx[1] = 0;\nx[2] = 0;\n：\nという具合である。\nこれをより効率的にする方法として、繰り返しを利用することがある。\n繰り返しといえばwhile文やfor文であるが、ここではfor文を例に解説してみたい。\n既にint<span data-unlink> x =  new int[10];が宣言されているとする。\nfor (int i=0 ; i&lt;10 ; i++ ) {<br />  x[i] = 0;<br />}<br />これにより、全ての要素に0を代入することができる。ちなみに、i&lt;10では10を含んでいないので誤ってx[10]を指定してしまうことはない。\nx[i] = 0; をx[i] = i*10; のように i を絡ませた式にすることで番号ごとに規則的な変化のつけた代入をすることも可能である。このようなテクニックはぜひ実践で身につけて欲しい。\n★2次元配列\n今まではいわば直線のような味方で1次元の配列を考えていたが、時に2次元の配列を考えることがある。例えば、ｎ行ｍ列に円を敷き詰めるときに「ｎ行目のｍ列目」をそのまま指定するには2次元の配列であったほうが都合がいいだろう。\n\n宣言\n\n型 変数</span><span data-unlink> = new 型[要素の数][要素の数];\n例としては、\nfloat x</span>[] = new float[100][100];\nである。\nちなみに、繰り返しと組み合わせるときは繰り返しのなかでさらに繰り返しをする「二重繰り返し」が使われる。\n \n## 終わりに\n僕がプログラミングをやっていて初めて壁にぶつかったのは、この配列のところである。\n人によっては簡単に理解できるのかもしれないが、僕には扱いづらそうに見えてなかなか実践することができなかった。\n「はじめに」で述べた通りデータ構造の適切な利用はプログラミングをスマートにしてくれる。実際にプログラミングしてみることで配列の頼もしさを実感してほしい。\n \n \n---\n","source":"_posts/2014-01-01-配列とは.md","raw":"---\ntitle: 配列とは\ndate: 2014-01-01 11:06:57\ncategory: プログラミング一般\n---\n\n## はじめに\n以前に、「プログラミングで重要なのはデータ構造とアルゴリズムである。（受け売り）」と述べたが、配列とはそのデータ構造の一つである。\nプログラミングをする時、自分にあったデータ構造を知っていると、作業効率を大きく上げることができる。\n \n## 配列という考え方\nプログラミングをしていると、同じような種類の変数をたくさん扱うことがある。\n例えばインベーダーゲームを作るとすると、同じような敵がたくさんでてくるので、そのそれぞれの座標を管理する変数が必要になる。ここで、\nint teki1X;\nint teki2X;\nint teki3X;\n：\nなどと記述していては（実際にはｙ座標も必要である）変数だけでもプログラムが長くなり見にくくなるばかりか、一つ一つの変数にあとで初期化や代入をすることを考えると、相当な労力を使うことになるだろう。\nそこで、配列の出番である。\n配列の宣言方法は言語によって異なるが、その本質てきな仕組みは変わらないのでここではProcessingによる一例を示したい。\n\n宣言\n\n型<span data-unlink> 変数 = new 型[要素の数];\n例としては、\nint</span> x = new int[10];\nこれにより、int型の変数を10個まとめた配列が定義される。\n代入方法は簡単で、\nx[0] = 5;\nこれで0番目の変数ｘに5を代入することができる。\nこのように、宣言した後は変数の番号を指定して通常通りに扱うことができる。\nところで、配列を扱うにあたって一つ注意して欲しいことがある。それは、配列の番号についてだ。先ほどの例では10個の変数を用意したが、実際には0~9の10個の変数ができあがている。つまりこの場合では、x[10]は存在していないということである。\n## 配列と繰り返し\nさて、配列を宣言することで数行にわたって変数を宣言する手間は省けたが、代入となるとまだ大変である。例えば初期化をするだけでも\nx[0] = 0;\nx[1] = 0;\nx[2] = 0;\n：\nという具合である。\nこれをより効率的にする方法として、繰り返しを利用することがある。\n繰り返しといえばwhile文やfor文であるが、ここではfor文を例に解説してみたい。\n既にint<span data-unlink> x =  new int[10];が宣言されているとする。\nfor (int i=0 ; i&lt;10 ; i++ ) {<br />  x[i] = 0;<br />}<br />これにより、全ての要素に0を代入することができる。ちなみに、i&lt;10では10を含んでいないので誤ってx[10]を指定してしまうことはない。\nx[i] = 0; をx[i] = i*10; のように i を絡ませた式にすることで番号ごとに規則的な変化のつけた代入をすることも可能である。このようなテクニックはぜひ実践で身につけて欲しい。\n★2次元配列\n今まではいわば直線のような味方で1次元の配列を考えていたが、時に2次元の配列を考えることがある。例えば、ｎ行ｍ列に円を敷き詰めるときに「ｎ行目のｍ列目」をそのまま指定するには2次元の配列であったほうが都合がいいだろう。\n\n宣言\n\n型 変数</span><span data-unlink> = new 型[要素の数][要素の数];\n例としては、\nfloat x</span>[] = new float[100][100];\nである。\nちなみに、繰り返しと組み合わせるときは繰り返しのなかでさらに繰り返しをする「二重繰り返し」が使われる。\n \n## 終わりに\n僕がプログラミングをやっていて初めて壁にぶつかったのは、この配列のところである。\n人によっては簡単に理解できるのかもしれないが、僕には扱いづらそうに見えてなかなか実践することができなかった。\n「はじめに」で述べた通りデータ構造の適切な利用はプログラミングをスマートにしてくれる。実際にプログラミングしてみることで配列の頼もしさを実感してほしい。\n \n \n---\n","slug":"配列とは","published":1,"updated":"2020-05-16T07:33:27.342Z","_id":"cka9bdiqm000pxgtv6vu028ny","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>以前に、「プログラミングで重要なのはデータ構造とアルゴリズムである。（受け売り）」と述べたが、配列とはそのデータ構造の一つである。<br>プログラミングをする時、自分にあったデータ構造を知っていると、作業効率を大きく上げることができる。</p>\n<h2 id=\"配列という考え方\"><a href=\"#配列という考え方\" class=\"headerlink\" title=\"配列という考え方\"></a>配列という考え方</h2><p>プログラミングをしていると、同じような種類の変数をたくさん扱うことがある。<br>例えばインベーダーゲームを作るとすると、同じような敵がたくさんでてくるので、そのそれぞれの座標を管理する変数が必要になる。ここで、<br>int teki1X;<br>int teki2X;<br>int teki3X;<br>：<br>などと記述していては（実際にはｙ座標も必要である）変数だけでもプログラムが長くなり見にくくなるばかりか、一つ一つの変数にあとで初期化や代入をすることを考えると、相当な労力を使うことになるだろう。<br>そこで、配列の出番である。<br>配列の宣言方法は言語によって異なるが、その本質てきな仕組みは変わらないのでここではProcessingによる一例を示したい。</p>\n<p>宣言</p>\n<p>型<span data-unlink> 変数 = new 型[要素の数];<br>例としては、<br>int</span> x = new int[10];<br>これにより、int型の変数を10個まとめた配列が定義される。<br>代入方法は簡単で、<br>x[0] = 5;<br>これで0番目の変数ｘに5を代入することができる。<br>このように、宣言した後は変数の番号を指定して通常通りに扱うことができる。<br>ところで、配列を扱うにあたって一つ注意して欲しいことがある。それは、配列の番号についてだ。先ほどの例では10個の変数を用意したが、実際には0~9の10個の変数ができあがている。つまりこの場合では、x[10]は存在していないということである。</p>\n<h2 id=\"配列と繰り返し\"><a href=\"#配列と繰り返し\" class=\"headerlink\" title=\"配列と繰り返し\"></a>配列と繰り返し</h2><p>さて、配列を宣言することで数行にわたって変数を宣言する手間は省けたが、代入となるとまだ大変である。例えば初期化をするだけでも<br>x[0] = 0;<br>x[1] = 0;<br>x[2] = 0;<br>：<br>という具合である。<br>これをより効率的にする方法として、繰り返しを利用することがある。<br>繰り返しといえばwhile文やfor文であるが、ここではfor文を例に解説してみたい。<br>既にint<span data-unlink> x =  new int[10];が宣言されているとする。<br>for (int i=0 ; i&lt;10 ; i++ ) {<br />  x[i] = 0;<br />}<br />これにより、全ての要素に0を代入することができる。ちなみに、i&lt;10では10を含んでいないので誤ってx[10]を指定してしまうことはない。<br>x[i] = 0; をx[i] = i*10; のように i を絡ませた式にすることで番号ごとに規則的な変化のつけた代入をすることも可能である。このようなテクニックはぜひ実践で身につけて欲しい。<br>★2次元配列<br>今まではいわば直線のような味方で1次元の配列を考えていたが、時に2次元の配列を考えることがある。例えば、ｎ行ｍ列に円を敷き詰めるときに「ｎ行目のｍ列目」をそのまま指定するには2次元の配列であったほうが都合がいいだろう。</p>\n<p>宣言</p>\n<p>型 変数</span><span data-unlink> = new 型[要素の数][要素の数];<br>例としては、<br>float x</span>[] = new float[100][100];<br>である。<br>ちなみに、繰り返しと組み合わせるときは繰り返しのなかでさらに繰り返しをする「二重繰り返し」が使われる。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>僕がプログラミングをやっていて初めて壁にぶつかったのは、この配列のところである。<br>人によっては簡単に理解できるのかもしれないが、僕には扱いづらそうに見えてなかなか実践することができなかった。<br>「はじめに」で述べた通りデータ構造の適切な利用はプログラミングをスマートにしてくれる。実際にプログラミングしてみることで配列の頼もしさを実感してほしい。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>以前に、「プログラミングで重要なのはデータ構造とアルゴリズムである。（受け売り）」と述べたが、配列とはそのデータ構造の一つである。<br>プログラミングをする時、自分にあったデータ構造を知っていると、作業効率を大きく上げることができる。</p>\n<h2 id=\"配列という考え方\"><a href=\"#配列という考え方\" class=\"headerlink\" title=\"配列という考え方\"></a>配列という考え方</h2><p>プログラミングをしていると、同じような種類の変数をたくさん扱うことがある。<br>例えばインベーダーゲームを作るとすると、同じような敵がたくさんでてくるので、そのそれぞれの座標を管理する変数が必要になる。ここで、<br>int teki1X;<br>int teki2X;<br>int teki3X;<br>：<br>などと記述していては（実際にはｙ座標も必要である）変数だけでもプログラムが長くなり見にくくなるばかりか、一つ一つの変数にあとで初期化や代入をすることを考えると、相当な労力を使うことになるだろう。<br>そこで、配列の出番である。<br>配列の宣言方法は言語によって異なるが、その本質てきな仕組みは変わらないのでここではProcessingによる一例を示したい。</p>\n<p>宣言</p>\n<p>型<span data-unlink> 変数 = new 型[要素の数];<br>例としては、<br>int</span> x = new int[10];<br>これにより、int型の変数を10個まとめた配列が定義される。<br>代入方法は簡単で、<br>x[0] = 5;<br>これで0番目の変数ｘに5を代入することができる。<br>このように、宣言した後は変数の番号を指定して通常通りに扱うことができる。<br>ところで、配列を扱うにあたって一つ注意して欲しいことがある。それは、配列の番号についてだ。先ほどの例では10個の変数を用意したが、実際には0~9の10個の変数ができあがている。つまりこの場合では、x[10]は存在していないということである。</p>\n<h2 id=\"配列と繰り返し\"><a href=\"#配列と繰り返し\" class=\"headerlink\" title=\"配列と繰り返し\"></a>配列と繰り返し</h2><p>さて、配列を宣言することで数行にわたって変数を宣言する手間は省けたが、代入となるとまだ大変である。例えば初期化をするだけでも<br>x[0] = 0;<br>x[1] = 0;<br>x[2] = 0;<br>：<br>という具合である。<br>これをより効率的にする方法として、繰り返しを利用することがある。<br>繰り返しといえばwhile文やfor文であるが、ここではfor文を例に解説してみたい。<br>既にint<span data-unlink> x =  new int[10];が宣言されているとする。<br>for (int i=0 ; i&lt;10 ; i++ ) {<br />  x[i] = 0;<br />}<br />これにより、全ての要素に0を代入することができる。ちなみに、i&lt;10では10を含んでいないので誤ってx[10]を指定してしまうことはない。<br>x[i] = 0; をx[i] = i*10; のように i を絡ませた式にすることで番号ごとに規則的な変化のつけた代入をすることも可能である。このようなテクニックはぜひ実践で身につけて欲しい。<br>★2次元配列<br>今まではいわば直線のような味方で1次元の配列を考えていたが、時に2次元の配列を考えることがある。例えば、ｎ行ｍ列に円を敷き詰めるときに「ｎ行目のｍ列目」をそのまま指定するには2次元の配列であったほうが都合がいいだろう。</p>\n<p>宣言</p>\n<p>型 変数</span><span data-unlink> = new 型[要素の数][要素の数];<br>例としては、<br>float x</span>[] = new float[100][100];<br>である。<br>ちなみに、繰り返しと組み合わせるときは繰り返しのなかでさらに繰り返しをする「二重繰り返し」が使われる。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>僕がプログラミングをやっていて初めて壁にぶつかったのは、この配列のところである。<br>人によっては簡単に理解できるのかもしれないが、僕には扱いづらそうに見えてなかなか実践することができなかった。<br>「はじめに」で述べた通りデータ構造の適切な利用はプログラミングをスマートにしてくれる。実際にプログラミングしてみることで配列の頼もしさを実感してほしい。</p>\n<hr>\n"},{"title":"Processing mousePressedとkeyPressed","date":"2014-01-02T06:55:10.000Z","_content":"\n## はじめに\n以前にマウスの使い方と称してmouseX,mouseYについて述べたことがあるが、マウスといえばクリックである。\n対話性のある（インタラクティブな）プログラムをつくろうとした場合、マウスがクリックされたりキーボードが押されたりといった判定が欲しくなることがあるだろう。\n今回は、Processingにおけるマウスのクリック、キーボード入力の判定に焦点をあててみたい。\n \n## mousePressedについて\n後ろの単語の頭文字が大文字になっていることから予想がつく人もいると思うが、mousePressedとはProcessingに用意されているメソッドと呼ばれるもので、マウスのクリックを判定することができる。\nここでは、メソッドが何かよりもmousePressedの具体的な使い方について解説しよう。\n使用法はsetup,drawと同じで、\nvoid mousePressed(){\n「マウスが押された時の処理」\n}\nである。\nそれでは、さっそくmousePressedを使ったプログラムを書いてみよう。\n<br />int r;<br />void setup() {<br />  size(400, 400);<br />  r = 1;<br />}\nvoid draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(200, 200, r*5, r*5);<br />}\nvoid mousePressed() {<br />  r = r+1;<br />}\n例によって、上記をコピペまたは記述して実行してみて欲しい。ウィンドウの真ん中に小さい円が表示されていれば成功である。では、ウィンドウのなかでクリックをしてみよう。円が大きくなるはずである。\n楽しい。\n これを応用することで、プログラミングの幅が大きく広がることは間違いないだろう。\n \n## keyPressedについて\nいうまでもなく、こちらもProseccingに用意されているメソッドのひとつで、キーボード入力の判定をすることができる。\n使用法もまた、\nvoid keyPressed() {<br />  「キーボード入力がされた時の処理」<br />}\nと扱いやすい。\nしかし、これだけでは全てのキーについて判定がされてしまう。\nRPGゲームを作りたかったらカーソルキーで進行方向を分ける、というようにキーを判別したいことがあるだろう。その方法についても解説したい。\nアルファベットや数字の場合、\nvoid keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">key</span> ==  '「判定するキー」' ){<br />「そのキーが押された時の処理」  <br />  }<br />}\nである。\nこの時、判定するキーを ’　’ で囲むことを忘れないように注意しよう。\n \nENTERキーやカーソルキーを判定したい場合、\nvoid keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">keyCode</span> ==  「判定するキー」 ){<br />「そのキーが押された時の処理」  <br />  }<br />}\nである。\nこの時、判定するキーは、全て大文字で入力する（ '　'で囲む必要はない ）。具体例をしめそう。\nENTER\nSPACE\nUP\nDOWN\nRIGHT\nLEFT\nこのあたりがよく使われるのではないだろうか。ちなみに、下４つはカーソルキーである。\nそれでは、さっそくkeyPressedをつかったプログラムを書いてみよう。\n<br />int x;<br />int y;\nvoid setup() {<br />  size(400, 400);<br />  x = 20;<br />  y = 20;<br />}\nvoid draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(x*10, y*10, 50, 50);<br />}\nvoid keyPressed() {<br />  if (keyCode == UP) {<br />    y--;<br />  }<br />  if (keyCode == DOWN) {<br />    y++;<br />  }<br />  if (keyCode == RIGHT) {<br />    x++;<br />  }<br />  if (keyCode == LEFT) {<br />    x--;<br />  }<br />}\n多少長めのプログラムになった。カーソルキーによって中心の円を移動させることができれば成功である。\n簡単に解説すると、変数xとyを用意し、カーソルキーの判定でそれらを増減させている（x++;のような書き方は覚えているだろうか？）。\nまるでRPGの主人公を操作している気分を味わえる。\n \n## 終わりに\nマウスのクリックやキーボード入力を判定することで、現実世界からの情報を取得することができ、このことはプログラミング感、というよりはインタラクション性をより感じさせてくれるだろう。\n \n \n---\n","source":"_posts/2014-01-02-Processing mousePressedとkeyPressed.md","raw":"---\ntitle: Processing mousePressedとkeyPressed\ndate: 2014-01-02 15:55:10\n---\n\n## はじめに\n以前にマウスの使い方と称してmouseX,mouseYについて述べたことがあるが、マウスといえばクリックである。\n対話性のある（インタラクティブな）プログラムをつくろうとした場合、マウスがクリックされたりキーボードが押されたりといった判定が欲しくなることがあるだろう。\n今回は、Processingにおけるマウスのクリック、キーボード入力の判定に焦点をあててみたい。\n \n## mousePressedについて\n後ろの単語の頭文字が大文字になっていることから予想がつく人もいると思うが、mousePressedとはProcessingに用意されているメソッドと呼ばれるもので、マウスのクリックを判定することができる。\nここでは、メソッドが何かよりもmousePressedの具体的な使い方について解説しよう。\n使用法はsetup,drawと同じで、\nvoid mousePressed(){\n「マウスが押された時の処理」\n}\nである。\nそれでは、さっそくmousePressedを使ったプログラムを書いてみよう。\n<br />int r;<br />void setup() {<br />  size(400, 400);<br />  r = 1;<br />}\nvoid draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(200, 200, r*5, r*5);<br />}\nvoid mousePressed() {<br />  r = r+1;<br />}\n例によって、上記をコピペまたは記述して実行してみて欲しい。ウィンドウの真ん中に小さい円が表示されていれば成功である。では、ウィンドウのなかでクリックをしてみよう。円が大きくなるはずである。\n楽しい。\n これを応用することで、プログラミングの幅が大きく広がることは間違いないだろう。\n \n## keyPressedについて\nいうまでもなく、こちらもProseccingに用意されているメソッドのひとつで、キーボード入力の判定をすることができる。\n使用法もまた、\nvoid keyPressed() {<br />  「キーボード入力がされた時の処理」<br />}\nと扱いやすい。\nしかし、これだけでは全てのキーについて判定がされてしまう。\nRPGゲームを作りたかったらカーソルキーで進行方向を分ける、というようにキーを判別したいことがあるだろう。その方法についても解説したい。\nアルファベットや数字の場合、\nvoid keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">key</span> ==  '「判定するキー」' ){<br />「そのキーが押された時の処理」  <br />  }<br />}\nである。\nこの時、判定するキーを ’　’ で囲むことを忘れないように注意しよう。\n \nENTERキーやカーソルキーを判定したい場合、\nvoid keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">keyCode</span> ==  「判定するキー」 ){<br />「そのキーが押された時の処理」  <br />  }<br />}\nである。\nこの時、判定するキーは、全て大文字で入力する（ '　'で囲む必要はない ）。具体例をしめそう。\nENTER\nSPACE\nUP\nDOWN\nRIGHT\nLEFT\nこのあたりがよく使われるのではないだろうか。ちなみに、下４つはカーソルキーである。\nそれでは、さっそくkeyPressedをつかったプログラムを書いてみよう。\n<br />int x;<br />int y;\nvoid setup() {<br />  size(400, 400);<br />  x = 20;<br />  y = 20;<br />}\nvoid draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(x*10, y*10, 50, 50);<br />}\nvoid keyPressed() {<br />  if (keyCode == UP) {<br />    y--;<br />  }<br />  if (keyCode == DOWN) {<br />    y++;<br />  }<br />  if (keyCode == RIGHT) {<br />    x++;<br />  }<br />  if (keyCode == LEFT) {<br />    x--;<br />  }<br />}\n多少長めのプログラムになった。カーソルキーによって中心の円を移動させることができれば成功である。\n簡単に解説すると、変数xとyを用意し、カーソルキーの判定でそれらを増減させている（x++;のような書き方は覚えているだろうか？）。\nまるでRPGの主人公を操作している気分を味わえる。\n \n## 終わりに\nマウスのクリックやキーボード入力を判定することで、現実世界からの情報を取得することができ、このことはプログラミング感、というよりはインタラクション性をより感じさせてくれるだろう。\n \n \n---\n","slug":"Processing mousePressedとkeyPressed","published":1,"updated":"2020-05-16T07:33:29.441Z","_id":"cka9bdkcx000rxgtvg6u9av1b","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>以前にマウスの使い方と称してmouseX,mouseYについて述べたことがあるが、マウスといえばクリックである。<br>対話性のある（インタラクティブな）プログラムをつくろうとした場合、マウスがクリックされたりキーボードが押されたりといった判定が欲しくなることがあるだろう。<br>今回は、Processingにおけるマウスのクリック、キーボード入力の判定に焦点をあててみたい。</p>\n<h2 id=\"mousePressedについて\"><a href=\"#mousePressedについて\" class=\"headerlink\" title=\"mousePressedについて\"></a>mousePressedについて</h2><p>後ろの単語の頭文字が大文字になっていることから予想がつく人もいると思うが、mousePressedとはProcessingに用意されているメソッドと呼ばれるもので、マウスのクリックを判定することができる。<br>ここでは、メソッドが何かよりもmousePressedの具体的な使い方について解説しよう。<br>使用法はsetup,drawと同じで、<br>void mousePressed(){<br>「マウスが押された時の処理」<br>}<br>である。<br>それでは、さっそくmousePressedを使ったプログラムを書いてみよう。<br><br />int r;<br />void setup() {<br />  size(400, 400);<br />  r = 1;<br />}<br>void draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(200, 200, r<em>5, r</em>5);<br />}<br>void mousePressed() {<br />  r = r+1;<br />}<br>例によって、上記をコピペまたは記述して実行してみて欲しい。ウィンドウの真ん中に小さい円が表示されていれば成功である。では、ウィンドウのなかでクリックをしてみよう。円が大きくなるはずである。<br>楽しい。<br> これを応用することで、プログラミングの幅が大きく広がることは間違いないだろう。</p>\n<h2 id=\"keyPressedについて\"><a href=\"#keyPressedについて\" class=\"headerlink\" title=\"keyPressedについて\"></a>keyPressedについて</h2><p>いうまでもなく、こちらもProseccingに用意されているメソッドのひとつで、キーボード入力の判定をすることができる。<br>使用法もまた、<br>void keyPressed() {<br />  「キーボード入力がされた時の処理」<br />}<br>と扱いやすい。<br>しかし、これだけでは全てのキーについて判定がされてしまう。<br>RPGゲームを作りたかったらカーソルキーで進行方向を分ける、というようにキーを判別したいことがあるだろう。その方法についても解説したい。<br>アルファベットや数字の場合、<br>void keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">key</span> ==  ‘「判定するキー」’ ){<br />「そのキーが押された時の処理」  <br />  }<br />}<br>である。<br>この時、判定するキーを ’　’ で囲むことを忘れないように注意しよう。</p>\n<p>ENTERキーやカーソルキーを判定したい場合、<br>void keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">keyCode</span> ==  「判定するキー」 ){<br />「そのキーが押された時の処理」  <br />  }<br />}<br>である。<br>この時、判定するキーは、全て大文字で入力する（ ‘　‘で囲む必要はない ）。具体例をしめそう。<br>ENTER<br>SPACE<br>UP<br>DOWN<br>RIGHT<br>LEFT<br>このあたりがよく使われるのではないだろうか。ちなみに、下４つはカーソルキーである。<br>それでは、さっそくkeyPressedをつかったプログラムを書いてみよう。<br><br />int x;<br />int y;<br>void setup() {<br />  size(400, 400);<br />  x = 20;<br />  y = 20;<br />}<br>void draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(x<em>10, y</em>10, 50, 50);<br />}<br>void keyPressed() {<br />  if (keyCode == UP) {<br />    y–;<br />  }<br />  if (keyCode == DOWN) {<br />    y++;<br />  }<br />  if (keyCode == RIGHT) {<br />    x++;<br />  }<br />  if (keyCode == LEFT) {<br />    x–;<br />  }<br />}<br>多少長めのプログラムになった。カーソルキーによって中心の円を移動させることができれば成功である。<br>簡単に解説すると、変数xとyを用意し、カーソルキーの判定でそれらを増減させている（x++;のような書き方は覚えているだろうか？）。<br>まるでRPGの主人公を操作している気分を味わえる。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>マウスのクリックやキーボード入力を判定することで、現実世界からの情報を取得することができ、このことはプログラミング感、というよりはインタラクション性をより感じさせてくれるだろう。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>以前にマウスの使い方と称してmouseX,mouseYについて述べたことがあるが、マウスといえばクリックである。<br>対話性のある（インタラクティブな）プログラムをつくろうとした場合、マウスがクリックされたりキーボードが押されたりといった判定が欲しくなることがあるだろう。<br>今回は、Processingにおけるマウスのクリック、キーボード入力の判定に焦点をあててみたい。</p>\n<h2 id=\"mousePressedについて\"><a href=\"#mousePressedについて\" class=\"headerlink\" title=\"mousePressedについて\"></a>mousePressedについて</h2><p>後ろの単語の頭文字が大文字になっていることから予想がつく人もいると思うが、mousePressedとはProcessingに用意されているメソッドと呼ばれるもので、マウスのクリックを判定することができる。<br>ここでは、メソッドが何かよりもmousePressedの具体的な使い方について解説しよう。<br>使用法はsetup,drawと同じで、<br>void mousePressed(){<br>「マウスが押された時の処理」<br>}<br>である。<br>それでは、さっそくmousePressedを使ったプログラムを書いてみよう。<br><br />int r;<br />void setup() {<br />  size(400, 400);<br />  r = 1;<br />}<br>void draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(200, 200, r<em>5, r</em>5);<br />}<br>void mousePressed() {<br />  r = r+1;<br />}<br>例によって、上記をコピペまたは記述して実行してみて欲しい。ウィンドウの真ん中に小さい円が表示されていれば成功である。では、ウィンドウのなかでクリックをしてみよう。円が大きくなるはずである。<br>楽しい。<br> これを応用することで、プログラミングの幅が大きく広がることは間違いないだろう。</p>\n<h2 id=\"keyPressedについて\"><a href=\"#keyPressedについて\" class=\"headerlink\" title=\"keyPressedについて\"></a>keyPressedについて</h2><p>いうまでもなく、こちらもProseccingに用意されているメソッドのひとつで、キーボード入力の判定をすることができる。<br>使用法もまた、<br>void keyPressed() {<br />  「キーボード入力がされた時の処理」<br />}<br>と扱いやすい。<br>しかし、これだけでは全てのキーについて判定がされてしまう。<br>RPGゲームを作りたかったらカーソルキーで進行方向を分ける、というようにキーを判別したいことがあるだろう。その方法についても解説したい。<br>アルファベットや数字の場合、<br>void keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">key</span> ==  ‘「判定するキー」’ ){<br />「そのキーが押された時の処理」  <br />  }<br />}<br>である。<br>この時、判定するキーを ’　’ で囲むことを忘れないように注意しよう。</p>\n<p>ENTERキーやカーソルキーを判定したい場合、<br>void keyPressed() {<br />  if(<span style=\"color: #cc00cc;\">keyCode</span> ==  「判定するキー」 ){<br />「そのキーが押された時の処理」  <br />  }<br />}<br>である。<br>この時、判定するキーは、全て大文字で入力する（ ‘　‘で囲む必要はない ）。具体例をしめそう。<br>ENTER<br>SPACE<br>UP<br>DOWN<br>RIGHT<br>LEFT<br>このあたりがよく使われるのではないだろうか。ちなみに、下４つはカーソルキーである。<br>それでは、さっそくkeyPressedをつかったプログラムを書いてみよう。<br><br />int x;<br />int y;<br>void setup() {<br />  size(400, 400);<br />  x = 20;<br />  y = 20;<br />}<br>void draw() {<br />  background(255);<br />  fill(255, 0, 0);<br />  ellipse(x<em>10, y</em>10, 50, 50);<br />}<br>void keyPressed() {<br />  if (keyCode == UP) {<br />    y–;<br />  }<br />  if (keyCode == DOWN) {<br />    y++;<br />  }<br />  if (keyCode == RIGHT) {<br />    x++;<br />  }<br />  if (keyCode == LEFT) {<br />    x–;<br />  }<br />}<br>多少長めのプログラムになった。カーソルキーによって中心の円を移動させることができれば成功である。<br>簡単に解説すると、変数xとyを用意し、カーソルキーの判定でそれらを増減させている（x++;のような書き方は覚えているだろうか？）。<br>まるでRPGの主人公を操作している気分を味わえる。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>マウスのクリックやキーボード入力を判定することで、現実世界からの情報を取得することができ、このことはプログラミング感、というよりはインタラクション性をより感じさせてくれるだろう。</p>\n<hr>\n"},{"title":"Processing　関数をつくる","date":"2014-01-03T03:57:29.000Z","_content":"\n## はじめに\nこれまでは、あらかじめ用意されている命令（関数）を使ってきた。\n今回は、「自分で関数をつくって使ってみる」ということをしてみたいと思う。\n \n## Processingにおける関数\nellipse();やbackground();のような今まで扱ってきた命令は、Processingの開発者があらかじめ用意してくれた関数である。\n例えばellipse();は「中心点から決められた距離にある点を全て塗りつぶす」という処理がまとめられていて、僕らはそれに数値（パラメーター）を代入することで利用してきたのだ。\n関数はしばしばメソッドと呼ばれる。となるとsetup,drawも関数（の仲間）といえる。実際にはProcessingを使うにあたってこの辺りを厳密に定義することはあまりなく、僕も自信がない。\n \n## 関数を作る\nそれでは、さっそく関数を作ってみよう…といっても、今回は自由度が高くて一言に説明するのが難しい。\nそれを踏まえた上で関数の作り方を抽象的に示してみようと思う。\n \n返り値　名前(入力される変数){\n「処理」\nreturn←返り値があった場合\n}\n \nである。名前は基本的に自由である。\n正直、これだけで理解するのは困難だと思われるので、一つ一つピックアップして説明していこうと思う。\n \n## 返り値とは\n返り値とは、その関数で処理された結果がどのような型で返されるのかを示したものである。つまり、返り値の場所にはProcessingにおける変数の型（intなど）を記述する。\n例えば、入力された数字を２倍にして返す関数をつくったとする。\n \n<span style=\"color: #0000cc;\">float</span> doubleNumber(int x) {<br />  x = x*2;<br />  <span style=\"color: #0000cc;\">return</span> x;<br />}\nこの場合、返り値はfloatである。2倍されたｘが返ってくる。\n返り値を記述する場合は「return」とセットにしてやる必要があり、\n返り値は必須ではなく、ない場合（図形を描くだけなど）は代わりに「void」と記述する。setup,drawの「void」はこれである。\n \n## 入力される変数について\nこちらはProcessingにおける変数<span style=\"color: #cc0000;\">またはオブジェクト</span>を記述する。\n「オブジェクト」については「オブジェクト指向」を考えるときに出てくる概念なので、とりあえずは触れないでおこうと思う。\nこれらはいわゆるパラメーターのことで、ellipse(x,y,r,l);と記述した時のｘやｙやｒやｌである。\n \n## 関数の使用について\n関数を作ることができたら、それをつかってみよう。\nvoid型の場合は、今までつかってきたrect();やtriangle();のように記述することで利用できる。\n返り値がある場合、例えば上記の「入力された数字を２倍にして返す関数」はそのまま数値などのデータとして使えるが、変数に代入する形で記述するのが一般的である。\n \nfloat a;\na = doubleNumber(5);\n \n上記のように記述した場合はaに10が代入される。\nちなみに、関数をつくるときに宣言した変数（この場合はx）とそれを代入する変数（この場合はa）は違う名前でもよいが、型はそろえなけれえばならない。\n \n## おわりに\n今回の内容については抽象的なことが多く、この説明だけで実際にプログラムに組み込むのは難しいばかりかそのメリットさえ少なく感じられると思う。\n他の記事のプログラム中で関数がでてきた際には積極的に言及していこうと思うので、今回の記事は読み流す程度にするのがいいかもしれない。\n \n---\n","source":"_posts/2014-01-03-Processing　関数をつくる.md","raw":"---\ntitle: Processing　関数をつくる\ndate: 2014-01-03 12:57:29\n---\n\n## はじめに\nこれまでは、あらかじめ用意されている命令（関数）を使ってきた。\n今回は、「自分で関数をつくって使ってみる」ということをしてみたいと思う。\n \n## Processingにおける関数\nellipse();やbackground();のような今まで扱ってきた命令は、Processingの開発者があらかじめ用意してくれた関数である。\n例えばellipse();は「中心点から決められた距離にある点を全て塗りつぶす」という処理がまとめられていて、僕らはそれに数値（パラメーター）を代入することで利用してきたのだ。\n関数はしばしばメソッドと呼ばれる。となるとsetup,drawも関数（の仲間）といえる。実際にはProcessingを使うにあたってこの辺りを厳密に定義することはあまりなく、僕も自信がない。\n \n## 関数を作る\nそれでは、さっそく関数を作ってみよう…といっても、今回は自由度が高くて一言に説明するのが難しい。\nそれを踏まえた上で関数の作り方を抽象的に示してみようと思う。\n \n返り値　名前(入力される変数){\n「処理」\nreturn←返り値があった場合\n}\n \nである。名前は基本的に自由である。\n正直、これだけで理解するのは困難だと思われるので、一つ一つピックアップして説明していこうと思う。\n \n## 返り値とは\n返り値とは、その関数で処理された結果がどのような型で返されるのかを示したものである。つまり、返り値の場所にはProcessingにおける変数の型（intなど）を記述する。\n例えば、入力された数字を２倍にして返す関数をつくったとする。\n \n<span style=\"color: #0000cc;\">float</span> doubleNumber(int x) {<br />  x = x*2;<br />  <span style=\"color: #0000cc;\">return</span> x;<br />}\nこの場合、返り値はfloatである。2倍されたｘが返ってくる。\n返り値を記述する場合は「return」とセットにしてやる必要があり、\n返り値は必須ではなく、ない場合（図形を描くだけなど）は代わりに「void」と記述する。setup,drawの「void」はこれである。\n \n## 入力される変数について\nこちらはProcessingにおける変数<span style=\"color: #cc0000;\">またはオブジェクト</span>を記述する。\n「オブジェクト」については「オブジェクト指向」を考えるときに出てくる概念なので、とりあえずは触れないでおこうと思う。\nこれらはいわゆるパラメーターのことで、ellipse(x,y,r,l);と記述した時のｘやｙやｒやｌである。\n \n## 関数の使用について\n関数を作ることができたら、それをつかってみよう。\nvoid型の場合は、今までつかってきたrect();やtriangle();のように記述することで利用できる。\n返り値がある場合、例えば上記の「入力された数字を２倍にして返す関数」はそのまま数値などのデータとして使えるが、変数に代入する形で記述するのが一般的である。\n \nfloat a;\na = doubleNumber(5);\n \n上記のように記述した場合はaに10が代入される。\nちなみに、関数をつくるときに宣言した変数（この場合はx）とそれを代入する変数（この場合はa）は違う名前でもよいが、型はそろえなけれえばならない。\n \n## おわりに\n今回の内容については抽象的なことが多く、この説明だけで実際にプログラムに組み込むのは難しいばかりかそのメリットさえ少なく感じられると思う。\n他の記事のプログラム中で関数がでてきた際には積極的に言及していこうと思うので、今回の記事は読み流す程度にするのがいいかもしれない。\n \n---\n","slug":"Processing　関数をつくる","published":1,"updated":"2020-05-16T07:33:33.496Z","_id":"cka9bdnhk000sxgtv3o1m9474","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>これまでは、あらかじめ用意されている命令（関数）を使ってきた。<br>今回は、「自分で関数をつくって使ってみる」ということをしてみたいと思う。</p>\n<h2 id=\"Processingにおける関数\"><a href=\"#Processingにおける関数\" class=\"headerlink\" title=\"Processingにおける関数\"></a>Processingにおける関数</h2><p>ellipse();やbackground();のような今まで扱ってきた命令は、Processingの開発者があらかじめ用意してくれた関数である。<br>例えばellipse();は「中心点から決められた距離にある点を全て塗りつぶす」という処理がまとめられていて、僕らはそれに数値（パラメーター）を代入することで利用してきたのだ。<br>関数はしばしばメソッドと呼ばれる。となるとsetup,drawも関数（の仲間）といえる。実際にはProcessingを使うにあたってこの辺りを厳密に定義することはあまりなく、僕も自信がない。</p>\n<h2 id=\"関数を作る\"><a href=\"#関数を作る\" class=\"headerlink\" title=\"関数を作る\"></a>関数を作る</h2><p>それでは、さっそく関数を作ってみよう…といっても、今回は自由度が高くて一言に説明するのが難しい。<br>それを踏まえた上で関数の作り方を抽象的に示してみようと思う。</p>\n<p>返り値　名前(入力される変数){<br>「処理」<br>return←返り値があった場合<br>}</p>\n<p>である。名前は基本的に自由である。<br>正直、これだけで理解するのは困難だと思われるので、一つ一つピックアップして説明していこうと思う。</p>\n<h2 id=\"返り値とは\"><a href=\"#返り値とは\" class=\"headerlink\" title=\"返り値とは\"></a>返り値とは</h2><p>返り値とは、その関数で処理された結果がどのような型で返されるのかを示したものである。つまり、返り値の場所にはProcessingにおける変数の型（intなど）を記述する。<br>例えば、入力された数字を２倍にして返す関数をつくったとする。</p>\n<p><span style=\"color: #0000cc;\">float</span> doubleNumber(int x) {<br />  x = x*2;<br />  <span style=\"color: #0000cc;\">return</span> x;<br />}<br>この場合、返り値はfloatである。2倍されたｘが返ってくる。<br>返り値を記述する場合は「return」とセットにしてやる必要があり、<br>返り値は必須ではなく、ない場合（図形を描くだけなど）は代わりに「void」と記述する。setup,drawの「void」はこれである。</p>\n<h2 id=\"入力される変数について\"><a href=\"#入力される変数について\" class=\"headerlink\" title=\"入力される変数について\"></a>入力される変数について</h2><p>こちらはProcessingにおける変数<span style=\"color: #cc0000;\">またはオブジェクト</span>を記述する。<br>「オブジェクト」については「オブジェクト指向」を考えるときに出てくる概念なので、とりあえずは触れないでおこうと思う。<br>これらはいわゆるパラメーターのことで、ellipse(x,y,r,l);と記述した時のｘやｙやｒやｌである。</p>\n<h2 id=\"関数の使用について\"><a href=\"#関数の使用について\" class=\"headerlink\" title=\"関数の使用について\"></a>関数の使用について</h2><p>関数を作ることができたら、それをつかってみよう。<br>void型の場合は、今までつかってきたrect();やtriangle();のように記述することで利用できる。<br>返り値がある場合、例えば上記の「入力された数字を２倍にして返す関数」はそのまま数値などのデータとして使えるが、変数に代入する形で記述するのが一般的である。</p>\n<p>float a;<br>a = doubleNumber(5);</p>\n<p>上記のように記述した場合はaに10が代入される。<br>ちなみに、関数をつくるときに宣言した変数（この場合はx）とそれを代入する変数（この場合はa）は違う名前でもよいが、型はそろえなけれえばならない。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今回の内容については抽象的なことが多く、この説明だけで実際にプログラムに組み込むのは難しいばかりかそのメリットさえ少なく感じられると思う。<br>他の記事のプログラム中で関数がでてきた際には積極的に言及していこうと思うので、今回の記事は読み流す程度にするのがいいかもしれない。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>これまでは、あらかじめ用意されている命令（関数）を使ってきた。<br>今回は、「自分で関数をつくって使ってみる」ということをしてみたいと思う。</p>\n<h2 id=\"Processingにおける関数\"><a href=\"#Processingにおける関数\" class=\"headerlink\" title=\"Processingにおける関数\"></a>Processingにおける関数</h2><p>ellipse();やbackground();のような今まで扱ってきた命令は、Processingの開発者があらかじめ用意してくれた関数である。<br>例えばellipse();は「中心点から決められた距離にある点を全て塗りつぶす」という処理がまとめられていて、僕らはそれに数値（パラメーター）を代入することで利用してきたのだ。<br>関数はしばしばメソッドと呼ばれる。となるとsetup,drawも関数（の仲間）といえる。実際にはProcessingを使うにあたってこの辺りを厳密に定義することはあまりなく、僕も自信がない。</p>\n<h2 id=\"関数を作る\"><a href=\"#関数を作る\" class=\"headerlink\" title=\"関数を作る\"></a>関数を作る</h2><p>それでは、さっそく関数を作ってみよう…といっても、今回は自由度が高くて一言に説明するのが難しい。<br>それを踏まえた上で関数の作り方を抽象的に示してみようと思う。</p>\n<p>返り値　名前(入力される変数){<br>「処理」<br>return←返り値があった場合<br>}</p>\n<p>である。名前は基本的に自由である。<br>正直、これだけで理解するのは困難だと思われるので、一つ一つピックアップして説明していこうと思う。</p>\n<h2 id=\"返り値とは\"><a href=\"#返り値とは\" class=\"headerlink\" title=\"返り値とは\"></a>返り値とは</h2><p>返り値とは、その関数で処理された結果がどのような型で返されるのかを示したものである。つまり、返り値の場所にはProcessingにおける変数の型（intなど）を記述する。<br>例えば、入力された数字を２倍にして返す関数をつくったとする。</p>\n<p><span style=\"color: #0000cc;\">float</span> doubleNumber(int x) {<br />  x = x*2;<br />  <span style=\"color: #0000cc;\">return</span> x;<br />}<br>この場合、返り値はfloatである。2倍されたｘが返ってくる。<br>返り値を記述する場合は「return」とセットにしてやる必要があり、<br>返り値は必須ではなく、ない場合（図形を描くだけなど）は代わりに「void」と記述する。setup,drawの「void」はこれである。</p>\n<h2 id=\"入力される変数について\"><a href=\"#入力される変数について\" class=\"headerlink\" title=\"入力される変数について\"></a>入力される変数について</h2><p>こちらはProcessingにおける変数<span style=\"color: #cc0000;\">またはオブジェクト</span>を記述する。<br>「オブジェクト」については「オブジェクト指向」を考えるときに出てくる概念なので、とりあえずは触れないでおこうと思う。<br>これらはいわゆるパラメーターのことで、ellipse(x,y,r,l);と記述した時のｘやｙやｒやｌである。</p>\n<h2 id=\"関数の使用について\"><a href=\"#関数の使用について\" class=\"headerlink\" title=\"関数の使用について\"></a>関数の使用について</h2><p>関数を作ることができたら、それをつかってみよう。<br>void型の場合は、今までつかってきたrect();やtriangle();のように記述することで利用できる。<br>返り値がある場合、例えば上記の「入力された数字を２倍にして返す関数」はそのまま数値などのデータとして使えるが、変数に代入する形で記述するのが一般的である。</p>\n<p>float a;<br>a = doubleNumber(5);</p>\n<p>上記のように記述した場合はaに10が代入される。<br>ちなみに、関数をつくるときに宣言した変数（この場合はx）とそれを代入する変数（この場合はa）は違う名前でもよいが、型はそろえなけれえばならない。</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>今回の内容については抽象的なことが多く、この説明だけで実際にプログラムに組み込むのは難しいばかりかそのメリットさえ少なく感じられると思う。<br>他の記事のプログラム中で関数がでてきた際には積極的に言及していこうと思うので、今回の記事は読み流す程度にするのがいいかもしれない。</p>\n<hr>\n"},{"title":"Processing 便利な機能を使う","date":"2014-01-04T02:20:14.000Z","_content":"\n## はじめに\nProcessingには、便利な機能やあらかじめ用意された変数（システム変数）が存在する。これらを利用することにより、プログラミングの効率をよくするばかりか他人からの可読性をあげることもできる。\nこれは結構重要で、人からアドバイスをもらうときにスムーズに話を進めることができるし、あとからプログラムを再利用するときも利便性があがる。\n高いモチベーションでプログラミングに臨むことができるのだ。\n \n## 便利な機能\nProcessingにはプログラミングを楽に、見やすくするための機能がある。まずはショートカットキーから紹介しよう。\n \nCtrl + R　…　実行（再生ボタンと同じ）\nCtrl + T　…　インデント（改行やスペースを自動で挿入してくれる）\nCtrl + C　…　コピー\nCtrl + X　…　カット（切り取り）\nCtrl + V　…　ペースト（貼り付け）\n \n続いてタブ機能を紹介しよう。\nProcessingでは、ブラウザのようにタブを作ることができ、そこに記述したプログラムは一つの同じプログラムとして扱われる。ちなみに、保存されるファイルは複数に分かれる。\nプログラムを機能ごと（多くの場合は関数やクラスごと）に分けることで、目的の箇所を素早く見つけられるようにできる。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131229113018j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131229/20131229113018.jpg\" alt=\"f:id:salmon2073:20131229113018j:plain\" /></span>\n上の画像で赤丸のところをクリック\nNew tab を選ぶ\n上の画像の状態になるので、名前を入力してOK\n同じところからリネーム、削除も可能\n \n## システム変数\nシステム変数とはプログラミング言語があらかじめ用意してくれている数字が代入される変数のことである。使用法は簡単で、決められた名前を記述するだけでよい。\n例としては、以前とりあげたmouseXやmouseYがある。\n他の例をあげていこう。\n \nwidth　…　size();で決めた横の長さ\nheight 　…　size();で決めた縦の長さ\ndisplayWidth　…　ディスプレイの横の長さ\ndisplayHeight　…　ディスプレイの縦の長さ\n \n★以前、キーボードのカーソルキーをUP,DOWN…というように判定したが、マウスのボタンを分けることもできる\nmouseButton　…　マウスのおボタンを識別。RIGHT,LEFT,CENTERが代入される。\n \n## 終わりに\nプログラミングをしていると、スペースや改行の扱いに困ることがある。とくに、条件文を記述する時などは｛｝の数を見失わないように気をつけなければならない。\nまた、変数も困りものである。ウィンドウのサイズに合わせて400,400でプログラムを記述していたら、あとからウィンドウのサイズを変えたくなった（変えざるを得なくなった）というのはざらにある。\nそんな時にこれらの便利な機能があるととても捗るのだ。\nちなみに僕はショートカットキーで実行したりコピペをやっていると、「ちょっと慣れた感じ」を出せて楽しく感じる。\nぜひお試しいただきたい。\n \n \n \n \n \n \n---\n","source":"_posts/2014-01-04-Processing 便利な機能を使う.md","raw":"---\ntitle: Processing 便利な機能を使う\ndate: 2014-01-04 11:20:14\n---\n\n## はじめに\nProcessingには、便利な機能やあらかじめ用意された変数（システム変数）が存在する。これらを利用することにより、プログラミングの効率をよくするばかりか他人からの可読性をあげることもできる。\nこれは結構重要で、人からアドバイスをもらうときにスムーズに話を進めることができるし、あとからプログラムを再利用するときも利便性があがる。\n高いモチベーションでプログラミングに臨むことができるのだ。\n \n## 便利な機能\nProcessingにはプログラミングを楽に、見やすくするための機能がある。まずはショートカットキーから紹介しよう。\n \nCtrl + R　…　実行（再生ボタンと同じ）\nCtrl + T　…　インデント（改行やスペースを自動で挿入してくれる）\nCtrl + C　…　コピー\nCtrl + X　…　カット（切り取り）\nCtrl + V　…　ペースト（貼り付け）\n \n続いてタブ機能を紹介しよう。\nProcessingでは、ブラウザのようにタブを作ることができ、そこに記述したプログラムは一つの同じプログラムとして扱われる。ちなみに、保存されるファイルは複数に分かれる。\nプログラムを機能ごと（多くの場合は関数やクラスごと）に分けることで、目的の箇所を素早く見つけられるようにできる。\n<span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131229113018j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131229/20131229113018.jpg\" alt=\"f:id:salmon2073:20131229113018j:plain\" /></span>\n上の画像で赤丸のところをクリック\nNew tab を選ぶ\n上の画像の状態になるので、名前を入力してOK\n同じところからリネーム、削除も可能\n \n## システム変数\nシステム変数とはプログラミング言語があらかじめ用意してくれている数字が代入される変数のことである。使用法は簡単で、決められた名前を記述するだけでよい。\n例としては、以前とりあげたmouseXやmouseYがある。\n他の例をあげていこう。\n \nwidth　…　size();で決めた横の長さ\nheight 　…　size();で決めた縦の長さ\ndisplayWidth　…　ディスプレイの横の長さ\ndisplayHeight　…　ディスプレイの縦の長さ\n \n★以前、キーボードのカーソルキーをUP,DOWN…というように判定したが、マウスのボタンを分けることもできる\nmouseButton　…　マウスのおボタンを識別。RIGHT,LEFT,CENTERが代入される。\n \n## 終わりに\nプログラミングをしていると、スペースや改行の扱いに困ることがある。とくに、条件文を記述する時などは｛｝の数を見失わないように気をつけなければならない。\nまた、変数も困りものである。ウィンドウのサイズに合わせて400,400でプログラムを記述していたら、あとからウィンドウのサイズを変えたくなった（変えざるを得なくなった）というのはざらにある。\nそんな時にこれらの便利な機能があるととても捗るのだ。\nちなみに僕はショートカットキーで実行したりコピペをやっていると、「ちょっと慣れた感じ」を出せて楽しく感じる。\nぜひお試しいただきたい。\n \n \n \n \n \n \n---\n","slug":"Processing 便利な機能を使う","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bdpuy000txgtv06xp48ro","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>Processingには、便利な機能やあらかじめ用意された変数（システム変数）が存在する。これらを利用することにより、プログラミングの効率をよくするばかりか他人からの可読性をあげることもできる。<br>これは結構重要で、人からアドバイスをもらうときにスムーズに話を進めることができるし、あとからプログラムを再利用するときも利便性があがる。<br>高いモチベーションでプログラミングに臨むことができるのだ。</p>\n<h2 id=\"便利な機能\"><a href=\"#便利な機能\" class=\"headerlink\" title=\"便利な機能\"></a>便利な機能</h2><p>Processingにはプログラミングを楽に、見やすくするための機能がある。まずはショートカットキーから紹介しよう。</p>\n<p>Ctrl + R　…　実行（再生ボタンと同じ）<br>Ctrl + T　…　インデント（改行やスペースを自動で挿入してくれる）<br>Ctrl + C　…　コピー<br>Ctrl + X　…　カット（切り取り）<br>Ctrl + V　…　ペースト（貼り付け）</p>\n<p>続いてタブ機能を紹介しよう。<br>Processingでは、ブラウザのようにタブを作ることができ、そこに記述したプログラムは一つの同じプログラムとして扱われる。ちなみに、保存されるファイルは複数に分かれる。<br>プログラムを機能ごと（多くの場合は関数やクラスごと）に分けることで、目的の箇所を素早く見つけられるようにできる。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131229113018j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131229/20131229113018.jpg\" alt=\"f:id:salmon2073:20131229113018j:plain\" /></span><br>上の画像で赤丸のところをクリック<br>New tab を選ぶ<br>上の画像の状態になるので、名前を入力してOK<br>同じところからリネーム、削除も可能</p>\n<h2 id=\"システム変数\"><a href=\"#システム変数\" class=\"headerlink\" title=\"システム変数\"></a>システム変数</h2><p>システム変数とはプログラミング言語があらかじめ用意してくれている数字が代入される変数のことである。使用法は簡単で、決められた名前を記述するだけでよい。<br>例としては、以前とりあげたmouseXやmouseYがある。<br>他の例をあげていこう。</p>\n<p>width　…　size();で決めた横の長さ<br>height 　…　size();で決めた縦の長さ<br>displayWidth　…　ディスプレイの横の長さ<br>displayHeight　…　ディスプレイの縦の長さ</p>\n<p>★以前、キーボードのカーソルキーをUP,DOWN…というように判定したが、マウスのボタンを分けることもできる<br>mouseButton　…　マウスのおボタンを識別。RIGHT,LEFT,CENTERが代入される。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>プログラミングをしていると、スペースや改行の扱いに困ることがある。とくに、条件文を記述する時などは｛｝の数を見失わないように気をつけなければならない。<br>また、変数も困りものである。ウィンドウのサイズに合わせて400,400でプログラムを記述していたら、あとからウィンドウのサイズを変えたくなった（変えざるを得なくなった）というのはざらにある。<br>そんな時にこれらの便利な機能があるととても捗るのだ。<br>ちなみに僕はショートカットキーで実行したりコピペをやっていると、「ちょっと慣れた感じ」を出せて楽しく感じる。<br>ぜひお試しいただきたい。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>Processingには、便利な機能やあらかじめ用意された変数（システム変数）が存在する。これらを利用することにより、プログラミングの効率をよくするばかりか他人からの可読性をあげることもできる。<br>これは結構重要で、人からアドバイスをもらうときにスムーズに話を進めることができるし、あとからプログラムを再利用するときも利便性があがる。<br>高いモチベーションでプログラミングに臨むことができるのだ。</p>\n<h2 id=\"便利な機能\"><a href=\"#便利な機能\" class=\"headerlink\" title=\"便利な機能\"></a>便利な機能</h2><p>Processingにはプログラミングを楽に、見やすくするための機能がある。まずはショートカットキーから紹介しよう。</p>\n<p>Ctrl + R　…　実行（再生ボタンと同じ）<br>Ctrl + T　…　インデント（改行やスペースを自動で挿入してくれる）<br>Ctrl + C　…　コピー<br>Ctrl + X　…　カット（切り取り）<br>Ctrl + V　…　ペースト（貼り付け）</p>\n<p>続いてタブ機能を紹介しよう。<br>Processingでは、ブラウザのようにタブを作ることができ、そこに記述したプログラムは一つの同じプログラムとして扱われる。ちなみに、保存されるファイルは複数に分かれる。<br>プログラムを機能ごと（多くの場合は関数やクラスごと）に分けることで、目的の箇所を素早く見つけられるようにできる。<br><span><img class=\"hatena-fotolife\" title=\"f:id:salmon2073:20131229113018j:plain\" src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20131229/20131229113018.jpg\" alt=\"f:id:salmon2073:20131229113018j:plain\" /></span><br>上の画像で赤丸のところをクリック<br>New tab を選ぶ<br>上の画像の状態になるので、名前を入力してOK<br>同じところからリネーム、削除も可能</p>\n<h2 id=\"システム変数\"><a href=\"#システム変数\" class=\"headerlink\" title=\"システム変数\"></a>システム変数</h2><p>システム変数とはプログラミング言語があらかじめ用意してくれている数字が代入される変数のことである。使用法は簡単で、決められた名前を記述するだけでよい。<br>例としては、以前とりあげたmouseXやmouseYがある。<br>他の例をあげていこう。</p>\n<p>width　…　size();で決めた横の長さ<br>height 　…　size();で決めた縦の長さ<br>displayWidth　…　ディスプレイの横の長さ<br>displayHeight　…　ディスプレイの縦の長さ</p>\n<p>★以前、キーボードのカーソルキーをUP,DOWN…というように判定したが、マウスのボタンを分けることもできる<br>mouseButton　…　マウスのおボタンを識別。RIGHT,LEFT,CENTERが代入される。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>プログラミングをしていると、スペースや改行の扱いに困ることがある。とくに、条件文を記述する時などは｛｝の数を見失わないように気をつけなければならない。<br>また、変数も困りものである。ウィンドウのサイズに合わせて400,400でプログラムを記述していたら、あとからウィンドウのサイズを変えたくなった（変えざるを得なくなった）というのはざらにある。<br>そんな時にこれらの便利な機能があるととても捗るのだ。<br>ちなみに僕はショートカットキーで実行したりコピペをやっていると、「ちょっと慣れた感じ」を出せて楽しく感じる。<br>ぜひお試しいただきたい。</p>\n<hr>\n"},{"title":"Processing 3Dを使ってみる","date":"2014-01-26T05:02:08.000Z","_content":"\n## はじめに\nProcessingには、3Dを扱う命令が標準で多く存在する。これらを使うことで3Dを使用したプログラミングが手軽に行える。今回は、具体的な例を用いて解説してみたい。\n \n## 3Dでスケッチを開始する\n3Dを利用するのは簡単である。基本的には次のように記述すればよい。\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\nサイズの3つ目のパラメーターでは、レンダラを指定することができる。\n以前は４つほど種類があってOpenGLとP3Dが使い分けられていたりしたが、バージョン2.0からはP2DとP3Dに統合された。\n \n## 3D上でスケッチしてみる\nでは、さっそく3D上で描画をしてみよう。シンプルに、直方体を描いてみよう。\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\nようこそ3Dの世界へ。\nシンプルにという割には一見難しそうにみえるが、実際にやっていることは簡単である。\nまず、translate()について\n\n命令\n\ntranslate(ｘ座標, ｙ座標, ｚ座標);\n指定した座標の位置が（０，０，０）となるように座標を動かす。3D描画では、物体ではなく紙のほうを動かして描画位置をずらすことで物体がうごいているように見える。\nちなみに、ｚ座標のパラメーターはなくてもよい。\n続いてrotateについて\n\n命令\n\nrotateX(回転角度);\nrottateY(回転角度);\nrotateZ(回転角度);\nそれぞれ、ｘ、ｙ、ｚ座標に対して回転角度分座標を回転させる。\n最後にbox()について\n\n命令\n\nbox(縦, 横, 高さ);\n記述されたとおりの直方体が今の（0,0,0）を<span style=\"color: #cc0000;\">中心</span>に描画される。\n \n## 立体を複数個描く　pushMatrixとpopMatrix\n複数立体を描く場合、それぞれの物体を描く前に座標を元に戻す必要がある。\n他にもやり方があるかもしれないが、僕は以下のようにして複数個立体を描いている。\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8ed4cdbb3232feca2b3d.js\"></script>\n ここで使われているpushMatrix();は今の座標を保存してくれる命令である。popMatrix();でそれを呼び出すことができる。\nつまり、pushMatrix();からpopMatrix();までをひと塊と考えれば理解しやすいと思う。\n \n## 終わりに\nprocessingで3Dを使う際には座標に気をつけなければならない。\nとはいえ、この間隔をマスターしてしまえば基本的には2Dと同じである。\nちなみに、点や線などもz座標のパラメーターを追加することで3D上で利用できる。\nスケッチの世界を広げてみよう。\n \n \n---\n","source":"_posts/2014-01-26-Processing 3Dを使ってみる.md","raw":"---\ntitle: Processing 3Dを使ってみる\ndate: 2014-01-26 14:02:08\ncategory: Processing\n---\n\n## はじめに\nProcessingには、3Dを扱う命令が標準で多く存在する。これらを使うことで3Dを使用したプログラミングが手軽に行える。今回は、具体的な例を用いて解説してみたい。\n \n## 3Dでスケッチを開始する\n3Dを利用するのは簡単である。基本的には次のように記述すればよい。\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\nサイズの3つ目のパラメーターでは、レンダラを指定することができる。\n以前は４つほど種類があってOpenGLとP3Dが使い分けられていたりしたが、バージョン2.0からはP2DとP3Dに統合された。\n \n## 3D上でスケッチしてみる\nでは、さっそく3D上で描画をしてみよう。シンプルに、直方体を描いてみよう。\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\nようこそ3Dの世界へ。\nシンプルにという割には一見難しそうにみえるが、実際にやっていることは簡単である。\nまず、translate()について\n\n命令\n\ntranslate(ｘ座標, ｙ座標, ｚ座標);\n指定した座標の位置が（０，０，０）となるように座標を動かす。3D描画では、物体ではなく紙のほうを動かして描画位置をずらすことで物体がうごいているように見える。\nちなみに、ｚ座標のパラメーターはなくてもよい。\n続いてrotateについて\n\n命令\n\nrotateX(回転角度);\nrottateY(回転角度);\nrotateZ(回転角度);\nそれぞれ、ｘ、ｙ、ｚ座標に対して回転角度分座標を回転させる。\n最後にbox()について\n\n命令\n\nbox(縦, 横, 高さ);\n記述されたとおりの直方体が今の（0,0,0）を<span style=\"color: #cc0000;\">中心</span>に描画される。\n \n## 立体を複数個描く　pushMatrixとpopMatrix\n複数立体を描く場合、それぞれの物体を描く前に座標を元に戻す必要がある。\n他にもやり方があるかもしれないが、僕は以下のようにして複数個立体を描いている。\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8ed4cdbb3232feca2b3d.js\"></script>\n ここで使われているpushMatrix();は今の座標を保存してくれる命令である。popMatrix();でそれを呼び出すことができる。\nつまり、pushMatrix();からpopMatrix();までをひと塊と考えれば理解しやすいと思う。\n \n## 終わりに\nprocessingで3Dを使う際には座標に気をつけなければならない。\nとはいえ、この間隔をマスターしてしまえば基本的には2Dと同じである。\nちなみに、点や線などもz座標のパラメーターを追加することで3D上で利用できる。\nスケッチの世界を広げてみよう。\n \n \n---\n","slug":"Processing 3Dを使ってみる","published":1,"updated":"2020-05-16T07:33:38.714Z","_id":"cka9bdrii000uxgtvfip89fym","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>Processingには、3Dを扱う命令が標準で多く存在する。これらを使うことで3Dを使用したプログラミングが手軽に行える。今回は、具体的な例を用いて解説してみたい。</p>\n<h2 id=\"3Dでスケッチを開始する\"><a href=\"#3Dでスケッチを開始する\" class=\"headerlink\" title=\"3Dでスケッチを開始する\"></a>3Dでスケッチを開始する</h2><p>3Dを利用するのは簡単である。基本的には次のように記述すればよい。</p>\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\n<p>サイズの3つ目のパラメーターでは、レンダラを指定することができる。<br>以前は４つほど種類があってOpenGLとP3Dが使い分けられていたりしたが、バージョン2.0からはP2DとP3Dに統合された。</p>\n<h2 id=\"3D上でスケッチしてみる\"><a href=\"#3D上でスケッチしてみる\" class=\"headerlink\" title=\"3D上でスケッチしてみる\"></a>3D上でスケッチしてみる</h2><p>では、さっそく3D上で描画をしてみよう。シンプルに、直方体を描いてみよう。</p>\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\n<p>ようこそ3Dの世界へ。<br>シンプルにという割には一見難しそうにみえるが、実際にやっていることは簡単である。<br>まず、translate()について</p>\n<p>命令</p>\n<p>translate(ｘ座標, ｙ座標, ｚ座標);<br>指定した座標の位置が（０，０，０）となるように座標を動かす。3D描画では、物体ではなく紙のほうを動かして描画位置をずらすことで物体がうごいているように見える。<br>ちなみに、ｚ座標のパラメーターはなくてもよい。<br>続いてrotateについて</p>\n<p>命令</p>\n<p>rotateX(回転角度);<br>rottateY(回転角度);<br>rotateZ(回転角度);<br>それぞれ、ｘ、ｙ、ｚ座標に対して回転角度分座標を回転させる。<br>最後にbox()について</p>\n<p>命令</p>\n<p>box(縦, 横, 高さ);<br>記述されたとおりの直方体が今の（0,0,0）を<span style=\"color: #cc0000;\">中心</span>に描画される。</p>\n<h2 id=\"立体を複数個描く-pushMatrixとpopMatrix\"><a href=\"#立体を複数個描く-pushMatrixとpopMatrix\" class=\"headerlink\" title=\"立体を複数個描く　pushMatrixとpopMatrix\"></a>立体を複数個描く　pushMatrixとpopMatrix</h2><p>複数立体を描く場合、それぞれの物体を描く前に座標を元に戻す必要がある。<br>他にもやり方があるかもしれないが、僕は以下のようにして複数個立体を描いている。</p>\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8ed4cdbb3232feca2b3d.js\"></script>\n<p> ここで使われているpushMatrix();は今の座標を保存してくれる命令である。popMatrix();でそれを呼び出すことができる。<br>つまり、pushMatrix();からpopMatrix();までをひと塊と考えれば理解しやすいと思う。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>processingで3Dを使う際には座標に気をつけなければならない。<br>とはいえ、この間隔をマスターしてしまえば基本的には2Dと同じである。<br>ちなみに、点や線などもz座標のパラメーターを追加することで3D上で利用できる。<br>スケッチの世界を広げてみよう。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>Processingには、3Dを扱う命令が標準で多く存在する。これらを使うことで3Dを使用したプログラミングが手軽に行える。今回は、具体的な例を用いて解説してみたい。</p>\n<h2 id=\"3Dでスケッチを開始する\"><a href=\"#3Dでスケッチを開始する\" class=\"headerlink\" title=\"3Dでスケッチを開始する\"></a>3Dでスケッチを開始する</h2><p>3Dを利用するのは簡単である。基本的には次のように記述すればよい。</p>\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\n<p>サイズの3つ目のパラメーターでは、レンダラを指定することができる。<br>以前は４つほど種類があってOpenGLとP3Dが使い分けられていたりしたが、バージョン2.0からはP2DとP3Dに統合された。</p>\n<h2 id=\"3D上でスケッチしてみる\"><a href=\"#3D上でスケッチしてみる\" class=\"headerlink\" title=\"3D上でスケッチしてみる\"></a>3D上でスケッチしてみる</h2><p>では、さっそく3D上で描画をしてみよう。シンプルに、直方体を描いてみよう。</p>\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8628747.js\"></script>\n<p>ようこそ3Dの世界へ。<br>シンプルにという割には一見難しそうにみえるが、実際にやっていることは簡単である。<br>まず、translate()について</p>\n<p>命令</p>\n<p>translate(ｘ座標, ｙ座標, ｚ座標);<br>指定した座標の位置が（０，０，０）となるように座標を動かす。3D描画では、物体ではなく紙のほうを動かして描画位置をずらすことで物体がうごいているように見える。<br>ちなみに、ｚ座標のパラメーターはなくてもよい。<br>続いてrotateについて</p>\n<p>命令</p>\n<p>rotateX(回転角度);<br>rottateY(回転角度);<br>rotateZ(回転角度);<br>それぞれ、ｘ、ｙ、ｚ座標に対して回転角度分座標を回転させる。<br>最後にbox()について</p>\n<p>命令</p>\n<p>box(縦, 横, 高さ);<br>記述されたとおりの直方体が今の（0,0,0）を<span style=\"color: #cc0000;\">中心</span>に描画される。</p>\n<h2 id=\"立体を複数個描く-pushMatrixとpopMatrix\"><a href=\"#立体を複数個描く-pushMatrixとpopMatrix\" class=\"headerlink\" title=\"立体を複数個描く　pushMatrixとpopMatrix\"></a>立体を複数個描く　pushMatrixとpopMatrix</h2><p>複数立体を描く場合、それぞれの物体を描く前に座標を元に戻す必要がある。<br>他にもやり方があるかもしれないが、僕は以下のようにして複数個立体を描いている。</p>\n<script type=\"text/javascript\" src=\"https://gist.github.com/salmon2073/8ed4cdbb3232feca2b3d.js\"></script>\n<p> ここで使われているpushMatrix();は今の座標を保存してくれる命令である。popMatrix();でそれを呼び出すことができる。<br>つまり、pushMatrix();からpopMatrix();までをひと塊と考えれば理解しやすいと思う。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>processingで3Dを使う際には座標に気をつけなければならない。<br>とはいえ、この間隔をマスターしてしまえば基本的には2Dと同じである。<br>ちなみに、点や線などもz座標のパラメーターを追加することで3D上で利用できる。<br>スケッチの世界を広げてみよう。</p>\n<hr>\n"},{"title":"三角関数とは","date":"2014-02-24T13:31:16.000Z","_content":"\nはじめに\n三角関数は誰でも高校の時に一度は習うと思う。\n 僕も高校一年のときに初めて出てきたサイン、コサイン、タンジェントがいまいち理解できず苦労した覚えがある。\nプログラミングをしているとき、数学を知っていると知っていないのとではできることに大きく壁ができるように感じる。特にスケッチプログラミングの場合、はじめから座標があるので、いやでも数学的な考え方をすることになる。\nこれから数回にわたって高校数学を見直して行きたいと思う。\n \n三角関数とは\nまずは具体的にいくのが僕のモットーである。\n以下の画像を見て欲しい。\n \n直角三角形である。分かりやすい形から進めていこう。\nまず、cとbについては名前を知っている人が多いと思う。\n \n \n三角関数は何なのか？というのは高校では習わず（ひょっとしたら習った人もいるかもかもしれないが）、僕にも正直よくわからない。そもそも、これらは何か「もの」を示している訳ではなく、辺や角の「関係」を表しているようだ。\nこんなことを言われると数学好きには怒られるかもしれないが、円周率や円錐の体積をもとめるときに出現する1/3、ピタゴラス数なんかと同じような感覚である。\n \n \n---\n","source":"_posts/2014-02-24-三角関数とは.md","raw":"---\ntitle: 三角関数とは\ndate: 2014-02-24 22:31:16\n---\n\nはじめに\n三角関数は誰でも高校の時に一度は習うと思う。\n 僕も高校一年のときに初めて出てきたサイン、コサイン、タンジェントがいまいち理解できず苦労した覚えがある。\nプログラミングをしているとき、数学を知っていると知っていないのとではできることに大きく壁ができるように感じる。特にスケッチプログラミングの場合、はじめから座標があるので、いやでも数学的な考え方をすることになる。\nこれから数回にわたって高校数学を見直して行きたいと思う。\n \n三角関数とは\nまずは具体的にいくのが僕のモットーである。\n以下の画像を見て欲しい。\n \n直角三角形である。分かりやすい形から進めていこう。\nまず、cとbについては名前を知っている人が多いと思う。\n \n \n三角関数は何なのか？というのは高校では習わず（ひょっとしたら習った人もいるかもかもしれないが）、僕にも正直よくわからない。そもそも、これらは何か「もの」を示している訳ではなく、辺や角の「関係」を表しているようだ。\nこんなことを言われると数学好きには怒られるかもしれないが、円周率や円錐の体積をもとめるときに出現する1/3、ピタゴラス数なんかと同じような感覚である。\n \n \n---\n","slug":"三角関数とは","published":1,"updated":"2020-05-16T07:33:40.783Z","_id":"cka9bdt3z000wxgtv4ikpbpo4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>はじめに<br>三角関数は誰でも高校の時に一度は習うと思う。<br> 僕も高校一年のときに初めて出てきたサイン、コサイン、タンジェントがいまいち理解できず苦労した覚えがある。<br>プログラミングをしているとき、数学を知っていると知っていないのとではできることに大きく壁ができるように感じる。特にスケッチプログラミングの場合、はじめから座標があるので、いやでも数学的な考え方をすることになる。<br>これから数回にわたって高校数学を見直して行きたいと思う。</p>\n<p>三角関数とは<br>まずは具体的にいくのが僕のモットーである。<br>以下の画像を見て欲しい。</p>\n<p>直角三角形である。分かりやすい形から進めていこう。<br>まず、cとbについては名前を知っている人が多いと思う。</p>\n<p>三角関数は何なのか？というのは高校では習わず（ひょっとしたら習った人もいるかもかもしれないが）、僕にも正直よくわからない。そもそも、これらは何か「もの」を示している訳ではなく、辺や角の「関係」を表しているようだ。<br>こんなことを言われると数学好きには怒られるかもしれないが、円周率や円錐の体積をもとめるときに出現する1/3、ピタゴラス数なんかと同じような感覚である。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>はじめに<br>三角関数は誰でも高校の時に一度は習うと思う。<br> 僕も高校一年のときに初めて出てきたサイン、コサイン、タンジェントがいまいち理解できず苦労した覚えがある。<br>プログラミングをしているとき、数学を知っていると知っていないのとではできることに大きく壁ができるように感じる。特にスケッチプログラミングの場合、はじめから座標があるので、いやでも数学的な考え方をすることになる。<br>これから数回にわたって高校数学を見直して行きたいと思う。</p>\n<p>三角関数とは<br>まずは具体的にいくのが僕のモットーである。<br>以下の画像を見て欲しい。</p>\n<p>直角三角形である。分かりやすい形から進めていこう。<br>まず、cとbについては名前を知っている人が多いと思う。</p>\n<p>三角関数は何なのか？というのは高校では習わず（ひょっとしたら習った人もいるかもかもしれないが）、僕にも正直よくわからない。そもそも、これらは何か「もの」を示している訳ではなく、辺や角の「関係」を表しているようだ。<br>こんなことを言われると数学好きには怒られるかもしれないが、円周率や円錐の体積をもとめるときに出現する1/3、ピタゴラス数なんかと同じような感覚である。</p>\n<hr>\n"},{"title":"生存報告","date":"2014-07-06T16:08:16.000Z","_content":"\nまさか数か月放置することになるとは思わなかったが、とりあえず記事を描く時間ができたので生存報告しておこうと思う。\nところで、アクセスカウンタを少しのぞいてみたら、思いのほかほぼ毎日訪問者はいるようで驚いた。どうやらprocessingの初歩で躓いた人が検索からやってくるようだ。\n去年もそうだったが、現在processingの情報はネットで簡単に見つけることができる。\nただし、それは既にほかの言語（特にJava）を知っている人向けのものであるか、コピペしたら動くコードが公開されているだけの場合が多い。リファレンスに関しても、旧バージョンのドキュメントは日本語であるが、2.x系は英語しかない。\n当然といえば当然だし英語が読めなくてプログラミングはできないといわれるのも頷けるが、やはりお偉いさん方が口をそろえて「入門用」というからには、もう少し初心者に配慮のある説明をしていいただきたく思う。\nそんな中でこのブログが少しでも役に立っていたら嬉しいと思うのだが、実はこのことがぼくにとって一つの悩みの種になっている。\n本題に入ろう。\nもともと僕は自分が情報技術を扱う立場でありながら外部のブログサービスを使うことに納得できず、自分のサイトを持つためにサーバ管理の」勉強をしていた。こっちの方は文章を書く練習と勉強したことの覚書にしようと思っていたのだ。\nそして今、まさに自分のサイトを発信させる準備が整ったのである。\n書くネタもそれなりにあるし、さっそく記事をあれこれ書きたいと思うのだが、ここで問題となるのがこのブログである。\nどう使うか模索していきたいと思う。\n \n---\n","source":"_posts/2014-07-07-生存報告.md","raw":"---\ntitle: 生存報告\ndate: 2014-07-07 01:08:16\n---\n\nまさか数か月放置することになるとは思わなかったが、とりあえず記事を描く時間ができたので生存報告しておこうと思う。\nところで、アクセスカウンタを少しのぞいてみたら、思いのほかほぼ毎日訪問者はいるようで驚いた。どうやらprocessingの初歩で躓いた人が検索からやってくるようだ。\n去年もそうだったが、現在processingの情報はネットで簡単に見つけることができる。\nただし、それは既にほかの言語（特にJava）を知っている人向けのものであるか、コピペしたら動くコードが公開されているだけの場合が多い。リファレンスに関しても、旧バージョンのドキュメントは日本語であるが、2.x系は英語しかない。\n当然といえば当然だし英語が読めなくてプログラミングはできないといわれるのも頷けるが、やはりお偉いさん方が口をそろえて「入門用」というからには、もう少し初心者に配慮のある説明をしていいただきたく思う。\nそんな中でこのブログが少しでも役に立っていたら嬉しいと思うのだが、実はこのことがぼくにとって一つの悩みの種になっている。\n本題に入ろう。\nもともと僕は自分が情報技術を扱う立場でありながら外部のブログサービスを使うことに納得できず、自分のサイトを持つためにサーバ管理の」勉強をしていた。こっちの方は文章を書く練習と勉強したことの覚書にしようと思っていたのだ。\nそして今、まさに自分のサイトを発信させる準備が整ったのである。\n書くネタもそれなりにあるし、さっそく記事をあれこれ書きたいと思うのだが、ここで問題となるのがこのブログである。\nどう使うか模索していきたいと思う。\n \n---\n","slug":"生存報告","published":1,"updated":"2020-05-16T07:33:43.811Z","_id":"cka9bdvg3000xxgtvck07ebwd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>まさか数か月放置することになるとは思わなかったが、とりあえず記事を描く時間ができたので生存報告しておこうと思う。<br>ところで、アクセスカウンタを少しのぞいてみたら、思いのほかほぼ毎日訪問者はいるようで驚いた。どうやらprocessingの初歩で躓いた人が検索からやってくるようだ。<br>去年もそうだったが、現在processingの情報はネットで簡単に見つけることができる。<br>ただし、それは既にほかの言語（特にJava）を知っている人向けのものであるか、コピペしたら動くコードが公開されているだけの場合が多い。リファレンスに関しても、旧バージョンのドキュメントは日本語であるが、2.x系は英語しかない。<br>当然といえば当然だし英語が読めなくてプログラミングはできないといわれるのも頷けるが、やはりお偉いさん方が口をそろえて「入門用」というからには、もう少し初心者に配慮のある説明をしていいただきたく思う。<br>そんな中でこのブログが少しでも役に立っていたら嬉しいと思うのだが、実はこのことがぼくにとって一つの悩みの種になっている。<br>本題に入ろう。<br>もともと僕は自分が情報技術を扱う立場でありながら外部のブログサービスを使うことに納得できず、自分のサイトを持つためにサーバ管理の」勉強をしていた。こっちの方は文章を書く練習と勉強したことの覚書にしようと思っていたのだ。<br>そして今、まさに自分のサイトを発信させる準備が整ったのである。<br>書くネタもそれなりにあるし、さっそく記事をあれこれ書きたいと思うのだが、ここで問題となるのがこのブログである。<br>どう使うか模索していきたいと思う。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>まさか数か月放置することになるとは思わなかったが、とりあえず記事を描く時間ができたので生存報告しておこうと思う。<br>ところで、アクセスカウンタを少しのぞいてみたら、思いのほかほぼ毎日訪問者はいるようで驚いた。どうやらprocessingの初歩で躓いた人が検索からやってくるようだ。<br>去年もそうだったが、現在processingの情報はネットで簡単に見つけることができる。<br>ただし、それは既にほかの言語（特にJava）を知っている人向けのものであるか、コピペしたら動くコードが公開されているだけの場合が多い。リファレンスに関しても、旧バージョンのドキュメントは日本語であるが、2.x系は英語しかない。<br>当然といえば当然だし英語が読めなくてプログラミングはできないといわれるのも頷けるが、やはりお偉いさん方が口をそろえて「入門用」というからには、もう少し初心者に配慮のある説明をしていいただきたく思う。<br>そんな中でこのブログが少しでも役に立っていたら嬉しいと思うのだが、実はこのことがぼくにとって一つの悩みの種になっている。<br>本題に入ろう。<br>もともと僕は自分が情報技術を扱う立場でありながら外部のブログサービスを使うことに納得できず、自分のサイトを持つためにサーバ管理の」勉強をしていた。こっちの方は文章を書く練習と勉強したことの覚書にしようと思っていたのだ。<br>そして今、まさに自分のサイトを発信させる準備が整ったのである。<br>書くネタもそれなりにあるし、さっそく記事をあれこれ書きたいと思うのだが、ここで問題となるのがこのブログである。<br>どう使うか模索していきたいと思う。</p>\n<hr>\n"},{"title":"創造的生活者シンポジウムを見に行った","date":"2014-07-11T16:15:12.000Z","thumbnail":"https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4492533354&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=salmon2073-22","_content":"\n## はじめに\n今日は「<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">創造的生活者シンポジウム」という、<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">COIのプロジェクトが主催するシンポジウムに行ってきた。3Dプリンターとかその辺の未来についての話がかなり具体的にされていたんじゃないかと思う。</span></span>\nうちの学科の先生たちや慶應義塾大学環境情報学部長、Mozilla Japan 代表理事という僕から見たらとんでもなく凄そうな方々が講演・LTをしてくださった。\n\n## 内容\n僕が一番関心を持ったのは、エリック・フォン・ヒッペル氏のビデオ講演である。彼の話は、企業によるイノベーションの原点にはユーザーによるイノベーションがあることが少なくない（むしろ多い）というものである。\n\nここで「個人」と言わずに「ユーザー」と言っている点が重要で、「ユーザー」は必ずしも「個人」ではないとも述べられた。「ユーザー」とは「販売者」の対義語であり、すなわち”はじめから営利を目的とせず、自分たちのためにアイディアを出す者”であるのだ。\nシンポジウムの前半で、個人の考えやセンスが引き出される場面ばかりに注目していた僕は、考えが浅はかだということに気付かされてしまった。\n\nこのプロジェクトが考えるものは、便利なものがあふれる未来ではなく、自分から便利なものをつくる人がたくさんいる未来なのである。\n自分たちのために何かをつくる…このワクワクの伝染力は計り知れないものがある。誰かが何かをやって（例えば、友人がゲーム機を改造しているなど）成功しているのを見て自分もやってみたくなったり、また自分がしたことを人につい言いふらしたくなったりといった、文化の中で僕たちに自然に発生する感情がその文化の原動力となるのだ。\nこのような共鳴体験が友人間や閉じた共同体だけでなく、世界中の人たちと共有できるとしたら、そりゃ面白くないわけがないだろう。\nここで、前半の講演に出てきた「高度な科学技術が前提とされた社会」が思い出される。\n\nぼくたち若い世代の中で「Twitterやってる？」と聞かれて「やってないよ」と答える人はいても、「スマホ（またはPC）持ってないからやってない」と答える人はほとんど見かけなくなった。\nこの会話の中では、\"スマホやPCを持っていること\"、そして\"Twitterとはそれらの上で動いているサービスのこと\"であるという前提が成り立っているのである。\n<span style=\"line-height: 24px;\">「高度な科学技術が前提とされた社会」とは、さらにその先の社会を表している。</span>\n一家に一台3Dプリンタがあるような社会において、「○○というファイルをダウンロードし、PCから転送して3Dプリンターで出力してください。」などという会話は不要なのである。それこそ、「あれ欲しいな」「じゃああとで送るね」でことが足りるわけである。\n\nここで先ほど述べたユーザイノベーションを起こそうとすれば、”層”を考えるのがばかばかしくなるほど老若男女が巻き込まれていくだろう。\nそして講演者によれば、それは決して遠い未来の話ではないのである。\n\n## 終わりに\nシンポジウムに行くこと自体はじめてなので、どこまで書いていいのか少し悩んだ。でも、皆どんどんtsudaってたし、生放送も無料で流れてたみたいなので大丈夫だろう。\n\nそれよりも、語彙の少なさが災いして語弊を招かないかが心配である。少しでも興味のわいた方は他のちゃんとしたページ、例えば\n<a href=\"https://www.fms.meiji.ac.jp/create/?page_id=11\">COI-T「感性に基く個別化循環型社会の創造」 » TOP</a>\nなどを見ていただけると幸いである。\n\nその他シンポジウムでは以下の本が紹介されていたので、精読したいと思う。\n\n<a href=\"https://www.amazon.co.jp/gp/product/4492533354/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4492533354&amp;linkCode=as2&amp;tag=salmon2073-22\"><img src=\"https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4492533354&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=salmon2073-22\" alt=\"\" border=\"0\" /><img style=\"border: none !important; margin: 0px !important;\" src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=salmon2073-22&amp;l=as2&amp;o=9&amp;a=4492533354\" alt=\"\" width=\"1\" height=\"1\" border=\"0\" /></a>\n","source":"_posts/2014-07-12-創造的生活者シンポジウムを見に行った.md","raw":"---\ntitle: 創造的生活者シンポジウムを見に行った\ndate: 2014-07-12 01:15:12\nthumbnail: https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4492533354&amp;Format=_SL110_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=salmon2073-22\n---\n\n## はじめに\n今日は「<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">創造的生活者シンポジウム」という、<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">COIのプロジェクトが主催するシンポジウムに行ってきた。3Dプリンターとかその辺の未来についての話がかなり具体的にされていたんじゃないかと思う。</span></span>\nうちの学科の先生たちや慶應義塾大学環境情報学部長、Mozilla Japan 代表理事という僕から見たらとんでもなく凄そうな方々が講演・LTをしてくださった。\n\n## 内容\n僕が一番関心を持ったのは、エリック・フォン・ヒッペル氏のビデオ講演である。彼の話は、企業によるイノベーションの原点にはユーザーによるイノベーションがあることが少なくない（むしろ多い）というものである。\n\nここで「個人」と言わずに「ユーザー」と言っている点が重要で、「ユーザー」は必ずしも「個人」ではないとも述べられた。「ユーザー」とは「販売者」の対義語であり、すなわち”はじめから営利を目的とせず、自分たちのためにアイディアを出す者”であるのだ。\nシンポジウムの前半で、個人の考えやセンスが引き出される場面ばかりに注目していた僕は、考えが浅はかだということに気付かされてしまった。\n\nこのプロジェクトが考えるものは、便利なものがあふれる未来ではなく、自分から便利なものをつくる人がたくさんいる未来なのである。\n自分たちのために何かをつくる…このワクワクの伝染力は計り知れないものがある。誰かが何かをやって（例えば、友人がゲーム機を改造しているなど）成功しているのを見て自分もやってみたくなったり、また自分がしたことを人につい言いふらしたくなったりといった、文化の中で僕たちに自然に発生する感情がその文化の原動力となるのだ。\nこのような共鳴体験が友人間や閉じた共同体だけでなく、世界中の人たちと共有できるとしたら、そりゃ面白くないわけがないだろう。\nここで、前半の講演に出てきた「高度な科学技術が前提とされた社会」が思い出される。\n\nぼくたち若い世代の中で「Twitterやってる？」と聞かれて「やってないよ」と答える人はいても、「スマホ（またはPC）持ってないからやってない」と答える人はほとんど見かけなくなった。\nこの会話の中では、\"スマホやPCを持っていること\"、そして\"Twitterとはそれらの上で動いているサービスのこと\"であるという前提が成り立っているのである。\n<span style=\"line-height: 24px;\">「高度な科学技術が前提とされた社会」とは、さらにその先の社会を表している。</span>\n一家に一台3Dプリンタがあるような社会において、「○○というファイルをダウンロードし、PCから転送して3Dプリンターで出力してください。」などという会話は不要なのである。それこそ、「あれ欲しいな」「じゃああとで送るね」でことが足りるわけである。\n\nここで先ほど述べたユーザイノベーションを起こそうとすれば、”層”を考えるのがばかばかしくなるほど老若男女が巻き込まれていくだろう。\nそして講演者によれば、それは決して遠い未来の話ではないのである。\n\n## 終わりに\nシンポジウムに行くこと自体はじめてなので、どこまで書いていいのか少し悩んだ。でも、皆どんどんtsudaってたし、生放送も無料で流れてたみたいなので大丈夫だろう。\n\nそれよりも、語彙の少なさが災いして語弊を招かないかが心配である。少しでも興味のわいた方は他のちゃんとしたページ、例えば\n<a href=\"https://www.fms.meiji.ac.jp/create/?page_id=11\">COI-T「感性に基く個別化循環型社会の創造」 » TOP</a>\nなどを見ていただけると幸いである。\n\nその他シンポジウムでは以下の本が紹介されていたので、精読したいと思う。\n\n<a href=\"https://www.amazon.co.jp/gp/product/4492533354/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4492533354&amp;linkCode=as2&amp;tag=salmon2073-22\"><img src=\"https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4492533354&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=salmon2073-22\" alt=\"\" border=\"0\" /><img style=\"border: none !important; margin: 0px !important;\" src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=salmon2073-22&amp;l=as2&amp;o=9&amp;a=4492533354\" alt=\"\" width=\"1\" height=\"1\" border=\"0\" /></a>\n","slug":"創造的生活者シンポジウムを見に行った","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bdx4f000yxgtvbhy69fll","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今日は「<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">創造的生活者シンポジウム」という、<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">COIのプロジェクトが主催するシンポジウムに行ってきた。3Dプリンターとかその辺の未来についての話がかなり具体的にされていたんじゃないかと思う。</span></span><br>うちの学科の先生たちや慶應義塾大学環境情報学部長、Mozilla Japan 代表理事という僕から見たらとんでもなく凄そうな方々が講演・LTをしてくださった。</p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><p>僕が一番関心を持ったのは、エリック・フォン・ヒッペル氏のビデオ講演である。彼の話は、企業によるイノベーションの原点にはユーザーによるイノベーションがあることが少なくない（むしろ多い）というものである。</p>\n<p>ここで「個人」と言わずに「ユーザー」と言っている点が重要で、「ユーザー」は必ずしも「個人」ではないとも述べられた。「ユーザー」とは「販売者」の対義語であり、すなわち”はじめから営利を目的とせず、自分たちのためにアイディアを出す者”であるのだ。<br>シンポジウムの前半で、個人の考えやセンスが引き出される場面ばかりに注目していた僕は、考えが浅はかだということに気付かされてしまった。</p>\n<p>このプロジェクトが考えるものは、便利なものがあふれる未来ではなく、自分から便利なものをつくる人がたくさんいる未来なのである。<br>自分たちのために何かをつくる…このワクワクの伝染力は計り知れないものがある。誰かが何かをやって（例えば、友人がゲーム機を改造しているなど）成功しているのを見て自分もやってみたくなったり、また自分がしたことを人につい言いふらしたくなったりといった、文化の中で僕たちに自然に発生する感情がその文化の原動力となるのだ。<br>このような共鳴体験が友人間や閉じた共同体だけでなく、世界中の人たちと共有できるとしたら、そりゃ面白くないわけがないだろう。<br>ここで、前半の講演に出てきた「高度な科学技術が前提とされた社会」が思い出される。</p>\n<p>ぼくたち若い世代の中で「Twitterやってる？」と聞かれて「やってないよ」と答える人はいても、「スマホ（またはPC）持ってないからやってない」と答える人はほとんど見かけなくなった。<br>この会話の中では、”スマホやPCを持っていること”、そして”Twitterとはそれらの上で動いているサービスのこと”であるという前提が成り立っているのである。<br><span style=\"line-height: 24px;\">「高度な科学技術が前提とされた社会」とは、さらにその先の社会を表している。</span><br>一家に一台3Dプリンタがあるような社会において、「○○というファイルをダウンロードし、PCから転送して3Dプリンターで出力してください。」などという会話は不要なのである。それこそ、「あれ欲しいな」「じゃああとで送るね」でことが足りるわけである。</p>\n<p>ここで先ほど述べたユーザイノベーションを起こそうとすれば、”層”を考えるのがばかばかしくなるほど老若男女が巻き込まれていくだろう。<br>そして講演者によれば、それは決して遠い未来の話ではないのである。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>シンポジウムに行くこと自体はじめてなので、どこまで書いていいのか少し悩んだ。でも、皆どんどんtsudaってたし、生放送も無料で流れてたみたいなので大丈夫だろう。</p>\n<p>それよりも、語彙の少なさが災いして語弊を招かないかが心配である。少しでも興味のわいた方は他のちゃんとしたページ、例えば<br><a href=\"https://www.fms.meiji.ac.jp/create/?page_id=11\">COI-T「感性に基く個別化循環型社会の創造」 » TOP</a><br>などを見ていただけると幸いである。</p>\n<p>その他シンポジウムでは以下の本が紹介されていたので、精読したいと思う。</p>\n<p><a href=\"https://www.amazon.co.jp/gp/product/4492533354/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4492533354&amp;linkCode=as2&amp;tag=salmon2073-22\"><img src=\"https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4492533354&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=salmon2073-22\" alt=\"\" border=\"0\" /><img style=\"border: none !important; margin: 0px !important;\" src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=salmon2073-22&amp;l=as2&amp;o=9&amp;a=4492533354\" alt=\"\" width=\"1\" height=\"1\" border=\"0\" /></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>今日は「<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">創造的生活者シンポジウム」という、<span style=\"font-family: 'Lucida Grande', 'Lucida Sans Unicode', Arial, Meiryo, 'Meiryo UI', sans-serif; font-size: 14px; letter-spacing: -0.014000000432133675px; line-height: 21px;\">COIのプロジェクトが主催するシンポジウムに行ってきた。3Dプリンターとかその辺の未来についての話がかなり具体的にされていたんじゃないかと思う。</span></span><br>うちの学科の先生たちや慶應義塾大学環境情報学部長、Mozilla Japan 代表理事という僕から見たらとんでもなく凄そうな方々が講演・LTをしてくださった。</p>\n<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><p>僕が一番関心を持ったのは、エリック・フォン・ヒッペル氏のビデオ講演である。彼の話は、企業によるイノベーションの原点にはユーザーによるイノベーションがあることが少なくない（むしろ多い）というものである。</p>\n<p>ここで「個人」と言わずに「ユーザー」と言っている点が重要で、「ユーザー」は必ずしも「個人」ではないとも述べられた。「ユーザー」とは「販売者」の対義語であり、すなわち”はじめから営利を目的とせず、自分たちのためにアイディアを出す者”であるのだ。<br>シンポジウムの前半で、個人の考えやセンスが引き出される場面ばかりに注目していた僕は、考えが浅はかだということに気付かされてしまった。</p>\n<p>このプロジェクトが考えるものは、便利なものがあふれる未来ではなく、自分から便利なものをつくる人がたくさんいる未来なのである。<br>自分たちのために何かをつくる…このワクワクの伝染力は計り知れないものがある。誰かが何かをやって（例えば、友人がゲーム機を改造しているなど）成功しているのを見て自分もやってみたくなったり、また自分がしたことを人につい言いふらしたくなったりといった、文化の中で僕たちに自然に発生する感情がその文化の原動力となるのだ。<br>このような共鳴体験が友人間や閉じた共同体だけでなく、世界中の人たちと共有できるとしたら、そりゃ面白くないわけがないだろう。<br>ここで、前半の講演に出てきた「高度な科学技術が前提とされた社会」が思い出される。</p>\n<p>ぼくたち若い世代の中で「Twitterやってる？」と聞かれて「やってないよ」と答える人はいても、「スマホ（またはPC）持ってないからやってない」と答える人はほとんど見かけなくなった。<br>この会話の中では、”スマホやPCを持っていること”、そして”Twitterとはそれらの上で動いているサービスのこと”であるという前提が成り立っているのである。<br><span style=\"line-height: 24px;\">「高度な科学技術が前提とされた社会」とは、さらにその先の社会を表している。</span><br>一家に一台3Dプリンタがあるような社会において、「○○というファイルをダウンロードし、PCから転送して3Dプリンターで出力してください。」などという会話は不要なのである。それこそ、「あれ欲しいな」「じゃああとで送るね」でことが足りるわけである。</p>\n<p>ここで先ほど述べたユーザイノベーションを起こそうとすれば、”層”を考えるのがばかばかしくなるほど老若男女が巻き込まれていくだろう。<br>そして講演者によれば、それは決して遠い未来の話ではないのである。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>シンポジウムに行くこと自体はじめてなので、どこまで書いていいのか少し悩んだ。でも、皆どんどんtsudaってたし、生放送も無料で流れてたみたいなので大丈夫だろう。</p>\n<p>それよりも、語彙の少なさが災いして語弊を招かないかが心配である。少しでも興味のわいた方は他のちゃんとしたページ、例えば<br><a href=\"https://www.fms.meiji.ac.jp/create/?page_id=11\">COI-T「感性に基く個別化循環型社会の創造」 » TOP</a><br>などを見ていただけると幸いである。</p>\n<p>その他シンポジウムでは以下の本が紹介されていたので、精読したいと思う。</p>\n<p><a href=\"https://www.amazon.co.jp/gp/product/4492533354/ref=as_li_qf_sp_asin_il?ie=UTF8&amp;camp=247&amp;creative=1211&amp;creativeASIN=4492533354&amp;linkCode=as2&amp;tag=salmon2073-22\"><img src=\"https://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=4492533354&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=JP&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=salmon2073-22\" alt=\"\" border=\"0\" /><img style=\"border: none !important; margin: 0px !important;\" src=\"https://ir-jp.amazon-adsystem.com/e/ir?t=salmon2073-22&amp;l=as2&amp;o=9&amp;a=4492533354\" alt=\"\" width=\"1\" height=\"1\" border=\"0\" /></a></p>\n"},{"title":"Processingで複数のwebカメラを扱う","date":"2014-07-13T02:05:31.000Z","_content":"\n今回はprocessingでカメラを起動、複数のカメラをあつかうところまでやってみたい。\n\n## カメラを使う\n\nProcessingでは、webカメラや内蔵カメラをとても簡単に扱うことができる。\n標準のライブラリだけで動くので、以下のコードを張り付ければよい。\n\n<script src=\"https://gist.github.com/salmon2073/5ba5fb34123076b9186d.js\"></script>\n\nカメラを名前から指定してつかう場合は、まずカメラのリストを表示する。<script src=\"https://gist.github.com/salmon2073/3b84652ffa2c909bcb11.js\"></script>\nつづいて、表示したいカメラのname= の部分を以下のコードに組み込めばok\n\n<script src=\"https://gist.github.com/salmon2073/54c37ed762cd5ebbb755.js\"></script>\n\n## 複数のカメラを表示する\n\n先ほどカメラの一覧表示をしたが、コンソールには接続されているカメラが全て表示される。 カメラのオブジェクトを増やせば、簡単に複数のカメラを表示することができる。 二つのカメラを扱う場合はこうなる<script src=\"https://gist.github.com/salmon2073/7914538e0e710879d801.js\"></script>\n\n","source":"_posts/2014-07-13-Processingで複数のwebカメラを扱う.md","raw":"---\ntitle: Processingで複数のwebカメラを扱う\ndate: 2014-07-13 11:05:31\ncategory: Processing\n---\n\n今回はprocessingでカメラを起動、複数のカメラをあつかうところまでやってみたい。\n\n## カメラを使う\n\nProcessingでは、webカメラや内蔵カメラをとても簡単に扱うことができる。\n標準のライブラリだけで動くので、以下のコードを張り付ければよい。\n\n<script src=\"https://gist.github.com/salmon2073/5ba5fb34123076b9186d.js\"></script>\n\nカメラを名前から指定してつかう場合は、まずカメラのリストを表示する。<script src=\"https://gist.github.com/salmon2073/3b84652ffa2c909bcb11.js\"></script>\nつづいて、表示したいカメラのname= の部分を以下のコードに組み込めばok\n\n<script src=\"https://gist.github.com/salmon2073/54c37ed762cd5ebbb755.js\"></script>\n\n## 複数のカメラを表示する\n\n先ほどカメラの一覧表示をしたが、コンソールには接続されているカメラが全て表示される。 カメラのオブジェクトを増やせば、簡単に複数のカメラを表示することができる。 二つのカメラを扱う場合はこうなる<script src=\"https://gist.github.com/salmon2073/7914538e0e710879d801.js\"></script>\n\n","slug":"Processingで複数のwebカメラを扱う","published":1,"updated":"2020-05-16T07:33:48.049Z","_id":"cka9bdyo8000zxgtv6uix56s1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今回はprocessingでカメラを起動、複数のカメラをあつかうところまでやってみたい。</p>\n<h2 id=\"カメラを使う\"><a href=\"#カメラを使う\" class=\"headerlink\" title=\"カメラを使う\"></a>カメラを使う</h2><p>Processingでは、webカメラや内蔵カメラをとても簡単に扱うことができる。<br>標準のライブラリだけで動くので、以下のコードを張り付ければよい。</p>\n<script src=\"https://gist.github.com/salmon2073/5ba5fb34123076b9186d.js\"></script>\n\n<p>カメラを名前から指定してつかう場合は、まずカメラのリストを表示する。<script src=\"https://gist.github.com/salmon2073/3b84652ffa2c909bcb11.js\"></script><br>つづいて、表示したいカメラのname= の部分を以下のコードに組み込めばok</p>\n<script src=\"https://gist.github.com/salmon2073/54c37ed762cd5ebbb755.js\"></script>\n\n<h2 id=\"複数のカメラを表示する\"><a href=\"#複数のカメラを表示する\" class=\"headerlink\" title=\"複数のカメラを表示する\"></a>複数のカメラを表示する</h2><p>先ほどカメラの一覧表示をしたが、コンソールには接続されているカメラが全て表示される。 カメラのオブジェクトを増やせば、簡単に複数のカメラを表示することができる。 二つのカメラを扱う場合はこうなる<script src=\"https://gist.github.com/salmon2073/7914538e0e710879d801.js\"></script></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今回はprocessingでカメラを起動、複数のカメラをあつかうところまでやってみたい。</p>\n<h2 id=\"カメラを使う\"><a href=\"#カメラを使う\" class=\"headerlink\" title=\"カメラを使う\"></a>カメラを使う</h2><p>Processingでは、webカメラや内蔵カメラをとても簡単に扱うことができる。<br>標準のライブラリだけで動くので、以下のコードを張り付ければよい。</p>\n<script src=\"https://gist.github.com/salmon2073/5ba5fb34123076b9186d.js\"></script>\n\n<p>カメラを名前から指定してつかう場合は、まずカメラのリストを表示する。<script src=\"https://gist.github.com/salmon2073/3b84652ffa2c909bcb11.js\"></script><br>つづいて、表示したいカメラのname= の部分を以下のコードに組み込めばok</p>\n<script src=\"https://gist.github.com/salmon2073/54c37ed762cd5ebbb755.js\"></script>\n\n<h2 id=\"複数のカメラを表示する\"><a href=\"#複数のカメラを表示する\" class=\"headerlink\" title=\"複数のカメラを表示する\"></a>複数のカメラを表示する</h2><p>先ほどカメラの一覧表示をしたが、コンソールには接続されているカメラが全て表示される。 カメラのオブジェクトを増やせば、簡単に複数のカメラを表示することができる。 二つのカメラを扱う場合はこうなる<script src=\"https://gist.github.com/salmon2073/7914538e0e710879d801.js\"></script></p>\n"},{"title":"Processingでmidiを扱う","date":"2014-07-14T15:48:42.000Z","_content":"\nprocessingでmidiを扱う方法はいくつかあるが、僕が今まで使った中では「proMIDI」というライブラリが一番使い勝手が良かった。\n今回はこのライブラリの使い方を説明しようと思う。\n\n## proMIDIをスケッチに加える\n\nまずは以下のページからライブラリをダウンロードしよう。\n\n<a href=\"https://creativecomputing.cc/p5libs/promidi/\">proMIDI</a>\n\n展開してlibraryフォルダの中のpromidi.jarをprocessingのスケッチにドラッグ＆ドロップ。\n念のためスケッチを保存しておこう。\n\n## 音を鳴らしてみる\n\nimportして、単音を鳴らすまでのコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/aa9f793eefa07196b9cd.js\"></script>\n\n楽器やノート（音符）を変えることで、PC上の音をいろいろ出せるだけでなく、PCに接続された外部midi音源から出力することもできる。\n逆に、外部機器からmidi信号も受け取ることもできる。詳しくは上述のサイトのリファレンスを見ていただきたい。\n\n## 終わりに\n\nうまく使えばゲームやアプリケーションにも組み込めるだろうし、外部機器との連帯やmidiそのものを勉強する際にも役立つだろう。\nまた、導入が簡単なので、外部ライブラリを初めて扱う人などにはおすすめである。\n\n","source":"_posts/2014-07-15-Processingでmidiを扱う.md","raw":"---\ntitle: Processingでmidiを扱う\ndate: 2014-07-15 00:48:42\ncategory: Processing\n---\n\nprocessingでmidiを扱う方法はいくつかあるが、僕が今まで使った中では「proMIDI」というライブラリが一番使い勝手が良かった。\n今回はこのライブラリの使い方を説明しようと思う。\n\n## proMIDIをスケッチに加える\n\nまずは以下のページからライブラリをダウンロードしよう。\n\n<a href=\"https://creativecomputing.cc/p5libs/promidi/\">proMIDI</a>\n\n展開してlibraryフォルダの中のpromidi.jarをprocessingのスケッチにドラッグ＆ドロップ。\n念のためスケッチを保存しておこう。\n\n## 音を鳴らしてみる\n\nimportして、単音を鳴らすまでのコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/aa9f793eefa07196b9cd.js\"></script>\n\n楽器やノート（音符）を変えることで、PC上の音をいろいろ出せるだけでなく、PCに接続された外部midi音源から出力することもできる。\n逆に、外部機器からmidi信号も受け取ることもできる。詳しくは上述のサイトのリファレンスを見ていただきたい。\n\n## 終わりに\n\nうまく使えばゲームやアプリケーションにも組み込めるだろうし、外部機器との連帯やmidiそのものを勉強する際にも役立つだろう。\nまた、導入が簡単なので、外部ライブラリを初めて扱う人などにはおすすめである。\n\n","slug":"Processingでmidiを扱う","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9be3sa0011xgtv5tst7ftw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>processingでmidiを扱う方法はいくつかあるが、僕が今まで使った中では「proMIDI」というライブラリが一番使い勝手が良かった。<br>今回はこのライブラリの使い方を説明しようと思う。</p>\n<h2 id=\"proMIDIをスケッチに加える\"><a href=\"#proMIDIをスケッチに加える\" class=\"headerlink\" title=\"proMIDIをスケッチに加える\"></a>proMIDIをスケッチに加える</h2><p>まずは以下のページからライブラリをダウンロードしよう。</p>\n<p><a href=\"https://creativecomputing.cc/p5libs/promidi/\">proMIDI</a></p>\n<p>展開してlibraryフォルダの中のpromidi.jarをprocessingのスケッチにドラッグ＆ドロップ。<br>念のためスケッチを保存しておこう。</p>\n<h2 id=\"音を鳴らしてみる\"><a href=\"#音を鳴らしてみる\" class=\"headerlink\" title=\"音を鳴らしてみる\"></a>音を鳴らしてみる</h2><p>importして、単音を鳴らすまでのコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/aa9f793eefa07196b9cd.js\"></script>\n\n<p>楽器やノート（音符）を変えることで、PC上の音をいろいろ出せるだけでなく、PCに接続された外部midi音源から出力することもできる。<br>逆に、外部機器からmidi信号も受け取ることもできる。詳しくは上述のサイトのリファレンスを見ていただきたい。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>うまく使えばゲームやアプリケーションにも組み込めるだろうし、外部機器との連帯やmidiそのものを勉強する際にも役立つだろう。<br>また、導入が簡単なので、外部ライブラリを初めて扱う人などにはおすすめである。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>processingでmidiを扱う方法はいくつかあるが、僕が今まで使った中では「proMIDI」というライブラリが一番使い勝手が良かった。<br>今回はこのライブラリの使い方を説明しようと思う。</p>\n<h2 id=\"proMIDIをスケッチに加える\"><a href=\"#proMIDIをスケッチに加える\" class=\"headerlink\" title=\"proMIDIをスケッチに加える\"></a>proMIDIをスケッチに加える</h2><p>まずは以下のページからライブラリをダウンロードしよう。</p>\n<p><a href=\"https://creativecomputing.cc/p5libs/promidi/\">proMIDI</a></p>\n<p>展開してlibraryフォルダの中のpromidi.jarをprocessingのスケッチにドラッグ＆ドロップ。<br>念のためスケッチを保存しておこう。</p>\n<h2 id=\"音を鳴らしてみる\"><a href=\"#音を鳴らしてみる\" class=\"headerlink\" title=\"音を鳴らしてみる\"></a>音を鳴らしてみる</h2><p>importして、単音を鳴らすまでのコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/aa9f793eefa07196b9cd.js\"></script>\n\n<p>楽器やノート（音符）を変えることで、PC上の音をいろいろ出せるだけでなく、PCに接続された外部midi音源から出力することもできる。<br>逆に、外部機器からmidi信号も受け取ることもできる。詳しくは上述のサイトのリファレンスを見ていただきたい。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>うまく使えばゲームやアプリケーションにも組み込めるだろうし、外部機器との連帯やmidiそのものを勉強する際にも役立つだろう。<br>また、導入が簡単なので、外部ライブラリを初めて扱う人などにはおすすめである。</p>\n"},{"title":"Processingで画像処理をする","date":"2014-07-16T07:54:58.000Z","_content":"\nprocessingはビジュアルデザインのための言語であるが、それだけに画像処理も得意としている。\n今回は僕がprocessingを用いて画像処理を学ぶ際の主な手法を紹介したいと思う。\n\n## 画像を表示する\n\nprocessingで画像を表示するには、まずスケッチに画像をドラッグ&amp;ドロップする。\n画像の拡張子は、.gif, .jpg, .tga, .png がいいだろう。\nそれでは、さっそく画像を表示してみよう。Girl.jpgを表示するコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/ae7447048e64892606ed.js\"></script>\n\n実行結果は以下のようになる\n\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl.png\" alt=\"そのままの画像\" />\n\n## 画像のサイズについて\n\n画像のサイズは画像を表示させる関数image()で指定することができる。画面全体に表示したいときはwidth,heightを指定すればいいのだが、 縦横の比率を維持したかったりn倍という形で表現したかったりすることもある。 そのようなときは、サイズを取得するメソッドを使うことで画像の元のサイズを取得するとよい。\n\n<script src=\"https://gist.github.com/salmon2073/49783ef7f593efb81206.js\"></script>\n\n## 画像のピクセルデータを取得、セットする\n\nprocessingの場合、画像ファイル自体のデータを扱うよりも、画面のピクセルデータを取得して扱うことが多い。\nピクセルデータを取得するには get(x座標,ｙ座標) セットするには set(x座標,ｙ座標) を使う。\n\n## 色を反転、2値化\n\nそれでは簡単に画像処理を行ってみよう。まずはピクセルデータを取得し、それからR,G,Bの成分を取り出す。\nそれらに変更を加えたものを表示する　という作業をウィンドウ全体のピクセルに対して行う。\n画像の色をを反転させるコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/1b0e5e54ab39f6a9378b.js\"></script>\n\n実行結果は以下のようになる\n\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_reverse.png\" alt=\"反転した画像\" />\n\n続いて2値化してみよう。get() から得られたRGBを求め、任意の値より小さければ黒、大きければ白にセットする。 画像を2値化するコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/c00ff3d42c27f16c22d4.js\"></script>\n\n実行結果は以下のようになる\n\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_grayScale.png\" alt=\"反転した画像\" />\n\n輝度については以下のページに詳しく書いてある。\n\n## 画像を出力する\n\n処理した画像を出力するには、いろいろな方法がある。僕は主にsaveFrame()で出力しているが、processingの公式リファレンスを読むのがいいと思う。\n\n## 終わりに\n\n上記のコードから、基本はget()とset()で間に様々な処理を挟めることが分かる。\nもっといろいろなことがしたい人は信号処理の理論的な勉強をしてみることをおすすめする。\n\n","source":"_posts/2014-07-16-Processingで画像処理をする.md","raw":"---\ntitle: Processingで画像処理をする\ndate: 2014-7-16 16:54:58\ncategory: Processing\n---\n\nprocessingはビジュアルデザインのための言語であるが、それだけに画像処理も得意としている。\n今回は僕がprocessingを用いて画像処理を学ぶ際の主な手法を紹介したいと思う。\n\n## 画像を表示する\n\nprocessingで画像を表示するには、まずスケッチに画像をドラッグ&amp;ドロップする。\n画像の拡張子は、.gif, .jpg, .tga, .png がいいだろう。\nそれでは、さっそく画像を表示してみよう。Girl.jpgを表示するコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/ae7447048e64892606ed.js\"></script>\n\n実行結果は以下のようになる\n\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl.png\" alt=\"そのままの画像\" />\n\n## 画像のサイズについて\n\n画像のサイズは画像を表示させる関数image()で指定することができる。画面全体に表示したいときはwidth,heightを指定すればいいのだが、 縦横の比率を維持したかったりn倍という形で表現したかったりすることもある。 そのようなときは、サイズを取得するメソッドを使うことで画像の元のサイズを取得するとよい。\n\n<script src=\"https://gist.github.com/salmon2073/49783ef7f593efb81206.js\"></script>\n\n## 画像のピクセルデータを取得、セットする\n\nprocessingの場合、画像ファイル自体のデータを扱うよりも、画面のピクセルデータを取得して扱うことが多い。\nピクセルデータを取得するには get(x座標,ｙ座標) セットするには set(x座標,ｙ座標) を使う。\n\n## 色を反転、2値化\n\nそれでは簡単に画像処理を行ってみよう。まずはピクセルデータを取得し、それからR,G,Bの成分を取り出す。\nそれらに変更を加えたものを表示する　という作業をウィンドウ全体のピクセルに対して行う。\n画像の色をを反転させるコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/1b0e5e54ab39f6a9378b.js\"></script>\n\n実行結果は以下のようになる\n\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_reverse.png\" alt=\"反転した画像\" />\n\n続いて2値化してみよう。get() から得られたRGBを求め、任意の値より小さければ黒、大きければ白にセットする。 画像を2値化するコードは以下のようになる。\n\n<script src=\"https://gist.github.com/salmon2073/c00ff3d42c27f16c22d4.js\"></script>\n\n実行結果は以下のようになる\n\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_grayScale.png\" alt=\"反転した画像\" />\n\n輝度については以下のページに詳しく書いてある。\n\n## 画像を出力する\n\n処理した画像を出力するには、いろいろな方法がある。僕は主にsaveFrame()で出力しているが、processingの公式リファレンスを読むのがいいと思う。\n\n## 終わりに\n\n上記のコードから、基本はget()とset()で間に様々な処理を挟めることが分かる。\nもっといろいろなことがしたい人は信号処理の理論的な勉強をしてみることをおすすめする。\n\n","slug":"Processingで画像処理をする","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9be5c50013xgtv7tdje6nu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>processingはビジュアルデザインのための言語であるが、それだけに画像処理も得意としている。<br>今回は僕がprocessingを用いて画像処理を学ぶ際の主な手法を紹介したいと思う。</p>\n<h2 id=\"画像を表示する\"><a href=\"#画像を表示する\" class=\"headerlink\" title=\"画像を表示する\"></a>画像を表示する</h2><p>processingで画像を表示するには、まずスケッチに画像をドラッグ&amp;ドロップする。<br>画像の拡張子は、.gif, .jpg, .tga, .png がいいだろう。<br>それでは、さっそく画像を表示してみよう。Girl.jpgを表示するコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/ae7447048e64892606ed.js\"></script>\n\n<p>実行結果は以下のようになる</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl.png\" alt=\"そのままの画像\" />\n\n<h2 id=\"画像のサイズについて\"><a href=\"#画像のサイズについて\" class=\"headerlink\" title=\"画像のサイズについて\"></a>画像のサイズについて</h2><p>画像のサイズは画像を表示させる関数image()で指定することができる。画面全体に表示したいときはwidth,heightを指定すればいいのだが、 縦横の比率を維持したかったりn倍という形で表現したかったりすることもある。 そのようなときは、サイズを取得するメソッドを使うことで画像の元のサイズを取得するとよい。</p>\n<script src=\"https://gist.github.com/salmon2073/49783ef7f593efb81206.js\"></script>\n\n<h2 id=\"画像のピクセルデータを取得、セットする\"><a href=\"#画像のピクセルデータを取得、セットする\" class=\"headerlink\" title=\"画像のピクセルデータを取得、セットする\"></a>画像のピクセルデータを取得、セットする</h2><p>processingの場合、画像ファイル自体のデータを扱うよりも、画面のピクセルデータを取得して扱うことが多い。<br>ピクセルデータを取得するには get(x座標,ｙ座標) セットするには set(x座標,ｙ座標) を使う。</p>\n<h2 id=\"色を反転、2値化\"><a href=\"#色を反転、2値化\" class=\"headerlink\" title=\"色を反転、2値化\"></a>色を反転、2値化</h2><p>それでは簡単に画像処理を行ってみよう。まずはピクセルデータを取得し、それからR,G,Bの成分を取り出す。<br>それらに変更を加えたものを表示する　という作業をウィンドウ全体のピクセルに対して行う。<br>画像の色をを反転させるコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/1b0e5e54ab39f6a9378b.js\"></script>\n\n<p>実行結果は以下のようになる</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_reverse.png\" alt=\"反転した画像\" />\n\n<p>続いて2値化してみよう。get() から得られたRGBを求め、任意の値より小さければ黒、大きければ白にセットする。 画像を2値化するコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/c00ff3d42c27f16c22d4.js\"></script>\n\n<p>実行結果は以下のようになる</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_grayScale.png\" alt=\"反転した画像\" />\n\n<p>輝度については以下のページに詳しく書いてある。</p>\n<h2 id=\"画像を出力する\"><a href=\"#画像を出力する\" class=\"headerlink\" title=\"画像を出力する\"></a>画像を出力する</h2><p>処理した画像を出力するには、いろいろな方法がある。僕は主にsaveFrame()で出力しているが、processingの公式リファレンスを読むのがいいと思う。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>上記のコードから、基本はget()とset()で間に様々な処理を挟めることが分かる。<br>もっといろいろなことがしたい人は信号処理の理論的な勉強をしてみることをおすすめする。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>processingはビジュアルデザインのための言語であるが、それだけに画像処理も得意としている。<br>今回は僕がprocessingを用いて画像処理を学ぶ際の主な手法を紹介したいと思う。</p>\n<h2 id=\"画像を表示する\"><a href=\"#画像を表示する\" class=\"headerlink\" title=\"画像を表示する\"></a>画像を表示する</h2><p>processingで画像を表示するには、まずスケッチに画像をドラッグ&amp;ドロップする。<br>画像の拡張子は、.gif, .jpg, .tga, .png がいいだろう。<br>それでは、さっそく画像を表示してみよう。Girl.jpgを表示するコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/ae7447048e64892606ed.js\"></script>\n\n<p>実行結果は以下のようになる</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl.png\" alt=\"そのままの画像\" />\n\n<h2 id=\"画像のサイズについて\"><a href=\"#画像のサイズについて\" class=\"headerlink\" title=\"画像のサイズについて\"></a>画像のサイズについて</h2><p>画像のサイズは画像を表示させる関数image()で指定することができる。画面全体に表示したいときはwidth,heightを指定すればいいのだが、 縦横の比率を維持したかったりn倍という形で表現したかったりすることもある。 そのようなときは、サイズを取得するメソッドを使うことで画像の元のサイズを取得するとよい。</p>\n<script src=\"https://gist.github.com/salmon2073/49783ef7f593efb81206.js\"></script>\n\n<h2 id=\"画像のピクセルデータを取得、セットする\"><a href=\"#画像のピクセルデータを取得、セットする\" class=\"headerlink\" title=\"画像のピクセルデータを取得、セットする\"></a>画像のピクセルデータを取得、セットする</h2><p>processingの場合、画像ファイル自体のデータを扱うよりも、画面のピクセルデータを取得して扱うことが多い。<br>ピクセルデータを取得するには get(x座標,ｙ座標) セットするには set(x座標,ｙ座標) を使う。</p>\n<h2 id=\"色を反転、2値化\"><a href=\"#色を反転、2値化\" class=\"headerlink\" title=\"色を反転、2値化\"></a>色を反転、2値化</h2><p>それでは簡単に画像処理を行ってみよう。まずはピクセルデータを取得し、それからR,G,Bの成分を取り出す。<br>それらに変更を加えたものを表示する　という作業をウィンドウ全体のピクセルに対して行う。<br>画像の色をを反転させるコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/1b0e5e54ab39f6a9378b.js\"></script>\n\n<p>実行結果は以下のようになる</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_reverse.png\" alt=\"反転した画像\" />\n\n<p>続いて2値化してみよう。get() から得られたRGBを求め、任意の値より小さければ黒、大きければ白にセットする。 画像を2値化するコードは以下のようになる。</p>\n<script src=\"https://gist.github.com/salmon2073/c00ff3d42c27f16c22d4.js\"></script>\n\n<p>実行結果は以下のようになる</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/Girl_grayScale.png\" alt=\"反転した画像\" />\n\n<p>輝度については以下のページに詳しく書いてある。</p>\n<h2 id=\"画像を出力する\"><a href=\"#画像を出力する\" class=\"headerlink\" title=\"画像を出力する\"></a>画像を出力する</h2><p>処理した画像を出力するには、いろいろな方法がある。僕は主にsaveFrame()で出力しているが、processingの公式リファレンスを読むのがいいと思う。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>上記のコードから、基本はget()とset()で間に様々な処理を挟めることが分かる。<br>もっといろいろなことがしたい人は信号処理の理論的な勉強をしてみることをおすすめする。</p>\n"},{"title":"ケルト音楽勉強中","date":"2014-08-19T14:23:19.000Z","_content":"\n夏休みに入って半月以上経つが、この頃は音楽の勉強に没頭している。最近はケルト音楽に興味を持っている。\nというわけでメモ代わりにケルトについてざっくり書いてみようと思う。\n\n## 身近なケルト音楽\n\n面白いことに、他の人にケルトを聞かせると「ああ、こういうやつね」という反応が返ってくることが多々ある。\nゲームやテレビなどで使われることが多いのだろう。具体的に、「FFやモンハンのBGMっぽい」という人もいた。\nケルトの定義は非常に広く、あちこちの国の音楽が混ざって表されることが常である。個人的に有名どころはアイリッシュ音楽だと思う。\n\n## 特徴\n\nなんといってもスウィング感である。コードよりも旋律が先にくるという感じである。\n今回僕が聞いてみてる中ではダンスに使われているようなアップテンポな曲が多いが、癒される曲も多くあるし、バラードなんかもある。テンポが遅い方はバラッドと呼ばれる。\n\n楽曲の構成としては8拍子のセットが2回ずつ繰り返される。BGMに適していて、ずっと終わらないんじゃないかというような気分になる。\n\n## 使われている楽器\n\n- フィドル\n- ティン・ホイッスル\n- バグパイプ\n- イリアンパイプス\n- ギター・ベース\n\nこのあたりが代表的な楽器であり、演奏の際の組み合わせや数は様々である。\nちなみに、フィドルはそのつくり自体はヴァイオリンと同じである。ただし、出だしのはっきりした演奏をしなければならないので、DTMで作ろうとする場合は切実な問題になりそうだ。\n\n## 音階\n\nざっと調べてみたところ、主に使われているのは民俗音楽らしく47抜き音階、マイナー（ドリアン？）スケールだった。\nとはいえ、やはり旋律のリズムが最も重視されている印象である。\n\n## リズム\n\n独特でありつつも単純に聞こえて、実は複雑である。細かい3拍子が集まった変拍子で構成される。\n代表的なリズムにはジグ、リールといった名前がついている。\n\n## 他の音楽との関係\n\nカントリーミュージックの起源の一つであるといわれている。ゴスペルや賛美歌の影響を取り入れて変化していったようだ。この周辺の音楽を見てもわかるように、ケルトの歴史は非常に長い。\n\n## まとめ\n\n聞いていて修行のような感じはなく、「楽しい音楽」である。たくさん聞いても飽きることがなく、ますます好きになった。\n\nゲーム音楽のような打ち込みも現物の演奏も両方おすすめしたい。\n\n<iframe src=\"//www.youtube.com/embed/usm6n6WYpdg\" width=\"420\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n<iframe src=\"//www.youtube.com/embed/eWLjhXXr68E?list=FL7ttuAt0osVq2OEFkfDdFqQ\" width=\"470\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n","source":"_posts/2014-08-19-ケルト音楽勉強中.md","raw":"---\ntitle: ケルト音楽勉強中\ndate: 2014-08-19 23:23:19\ncategory: Music\n---\n\n夏休みに入って半月以上経つが、この頃は音楽の勉強に没頭している。最近はケルト音楽に興味を持っている。\nというわけでメモ代わりにケルトについてざっくり書いてみようと思う。\n\n## 身近なケルト音楽\n\n面白いことに、他の人にケルトを聞かせると「ああ、こういうやつね」という反応が返ってくることが多々ある。\nゲームやテレビなどで使われることが多いのだろう。具体的に、「FFやモンハンのBGMっぽい」という人もいた。\nケルトの定義は非常に広く、あちこちの国の音楽が混ざって表されることが常である。個人的に有名どころはアイリッシュ音楽だと思う。\n\n## 特徴\n\nなんといってもスウィング感である。コードよりも旋律が先にくるという感じである。\n今回僕が聞いてみてる中ではダンスに使われているようなアップテンポな曲が多いが、癒される曲も多くあるし、バラードなんかもある。テンポが遅い方はバラッドと呼ばれる。\n\n楽曲の構成としては8拍子のセットが2回ずつ繰り返される。BGMに適していて、ずっと終わらないんじゃないかというような気分になる。\n\n## 使われている楽器\n\n- フィドル\n- ティン・ホイッスル\n- バグパイプ\n- イリアンパイプス\n- ギター・ベース\n\nこのあたりが代表的な楽器であり、演奏の際の組み合わせや数は様々である。\nちなみに、フィドルはそのつくり自体はヴァイオリンと同じである。ただし、出だしのはっきりした演奏をしなければならないので、DTMで作ろうとする場合は切実な問題になりそうだ。\n\n## 音階\n\nざっと調べてみたところ、主に使われているのは民俗音楽らしく47抜き音階、マイナー（ドリアン？）スケールだった。\nとはいえ、やはり旋律のリズムが最も重視されている印象である。\n\n## リズム\n\n独特でありつつも単純に聞こえて、実は複雑である。細かい3拍子が集まった変拍子で構成される。\n代表的なリズムにはジグ、リールといった名前がついている。\n\n## 他の音楽との関係\n\nカントリーミュージックの起源の一つであるといわれている。ゴスペルや賛美歌の影響を取り入れて変化していったようだ。この周辺の音楽を見てもわかるように、ケルトの歴史は非常に長い。\n\n## まとめ\n\n聞いていて修行のような感じはなく、「楽しい音楽」である。たくさん聞いても飽きることがなく、ますます好きになった。\n\nゲーム音楽のような打ち込みも現物の演奏も両方おすすめしたい。\n\n<iframe src=\"//www.youtube.com/embed/usm6n6WYpdg\" width=\"420\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n<iframe src=\"//www.youtube.com/embed/eWLjhXXr68E?list=FL7ttuAt0osVq2OEFkfDdFqQ\" width=\"470\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n","slug":"ケルト音楽勉強中","published":1,"updated":"2020-05-16T07:33:59.071Z","_id":"cka9be77u0015xgtv6d8v33r0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>夏休みに入って半月以上経つが、この頃は音楽の勉強に没頭している。最近はケルト音楽に興味を持っている。<br>というわけでメモ代わりにケルトについてざっくり書いてみようと思う。</p>\n<h2 id=\"身近なケルト音楽\"><a href=\"#身近なケルト音楽\" class=\"headerlink\" title=\"身近なケルト音楽\"></a>身近なケルト音楽</h2><p>面白いことに、他の人にケルトを聞かせると「ああ、こういうやつね」という反応が返ってくることが多々ある。<br>ゲームやテレビなどで使われることが多いのだろう。具体的に、「FFやモンハンのBGMっぽい」という人もいた。<br>ケルトの定義は非常に広く、あちこちの国の音楽が混ざって表されることが常である。個人的に有名どころはアイリッシュ音楽だと思う。</p>\n<h2 id=\"特徴\"><a href=\"#特徴\" class=\"headerlink\" title=\"特徴\"></a>特徴</h2><p>なんといってもスウィング感である。コードよりも旋律が先にくるという感じである。<br>今回僕が聞いてみてる中ではダンスに使われているようなアップテンポな曲が多いが、癒される曲も多くあるし、バラードなんかもある。テンポが遅い方はバラッドと呼ばれる。</p>\n<p>楽曲の構成としては8拍子のセットが2回ずつ繰り返される。BGMに適していて、ずっと終わらないんじゃないかというような気分になる。</p>\n<h2 id=\"使われている楽器\"><a href=\"#使われている楽器\" class=\"headerlink\" title=\"使われている楽器\"></a>使われている楽器</h2><ul>\n<li>フィドル</li>\n<li>ティン・ホイッスル</li>\n<li>バグパイプ</li>\n<li>イリアンパイプス</li>\n<li>ギター・ベース</li>\n</ul>\n<p>このあたりが代表的な楽器であり、演奏の際の組み合わせや数は様々である。<br>ちなみに、フィドルはそのつくり自体はヴァイオリンと同じである。ただし、出だしのはっきりした演奏をしなければならないので、DTMで作ろうとする場合は切実な問題になりそうだ。</p>\n<h2 id=\"音階\"><a href=\"#音階\" class=\"headerlink\" title=\"音階\"></a>音階</h2><p>ざっと調べてみたところ、主に使われているのは民俗音楽らしく47抜き音階、マイナー（ドリアン？）スケールだった。<br>とはいえ、やはり旋律のリズムが最も重視されている印象である。</p>\n<h2 id=\"リズム\"><a href=\"#リズム\" class=\"headerlink\" title=\"リズム\"></a>リズム</h2><p>独特でありつつも単純に聞こえて、実は複雑である。細かい3拍子が集まった変拍子で構成される。<br>代表的なリズムにはジグ、リールといった名前がついている。</p>\n<h2 id=\"他の音楽との関係\"><a href=\"#他の音楽との関係\" class=\"headerlink\" title=\"他の音楽との関係\"></a>他の音楽との関係</h2><p>カントリーミュージックの起源の一つであるといわれている。ゴスペルや賛美歌の影響を取り入れて変化していったようだ。この周辺の音楽を見てもわかるように、ケルトの歴史は非常に長い。</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>聞いていて修行のような感じはなく、「楽しい音楽」である。たくさん聞いても飽きることがなく、ますます好きになった。</p>\n<p>ゲーム音楽のような打ち込みも現物の演奏も両方おすすめしたい。</p>\n<iframe src=\"//www.youtube.com/embed/usm6n6WYpdg\" width=\"420\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n<iframe src=\"//www.youtube.com/embed/eWLjhXXr68E?list=FL7ttuAt0osVq2OEFkfDdFqQ\" width=\"470\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n","site":{"data":{}},"excerpt":"","more":"<p>夏休みに入って半月以上経つが、この頃は音楽の勉強に没頭している。最近はケルト音楽に興味を持っている。<br>というわけでメモ代わりにケルトについてざっくり書いてみようと思う。</p>\n<h2 id=\"身近なケルト音楽\"><a href=\"#身近なケルト音楽\" class=\"headerlink\" title=\"身近なケルト音楽\"></a>身近なケルト音楽</h2><p>面白いことに、他の人にケルトを聞かせると「ああ、こういうやつね」という反応が返ってくることが多々ある。<br>ゲームやテレビなどで使われることが多いのだろう。具体的に、「FFやモンハンのBGMっぽい」という人もいた。<br>ケルトの定義は非常に広く、あちこちの国の音楽が混ざって表されることが常である。個人的に有名どころはアイリッシュ音楽だと思う。</p>\n<h2 id=\"特徴\"><a href=\"#特徴\" class=\"headerlink\" title=\"特徴\"></a>特徴</h2><p>なんといってもスウィング感である。コードよりも旋律が先にくるという感じである。<br>今回僕が聞いてみてる中ではダンスに使われているようなアップテンポな曲が多いが、癒される曲も多くあるし、バラードなんかもある。テンポが遅い方はバラッドと呼ばれる。</p>\n<p>楽曲の構成としては8拍子のセットが2回ずつ繰り返される。BGMに適していて、ずっと終わらないんじゃないかというような気分になる。</p>\n<h2 id=\"使われている楽器\"><a href=\"#使われている楽器\" class=\"headerlink\" title=\"使われている楽器\"></a>使われている楽器</h2><ul>\n<li>フィドル</li>\n<li>ティン・ホイッスル</li>\n<li>バグパイプ</li>\n<li>イリアンパイプス</li>\n<li>ギター・ベース</li>\n</ul>\n<p>このあたりが代表的な楽器であり、演奏の際の組み合わせや数は様々である。<br>ちなみに、フィドルはそのつくり自体はヴァイオリンと同じである。ただし、出だしのはっきりした演奏をしなければならないので、DTMで作ろうとする場合は切実な問題になりそうだ。</p>\n<h2 id=\"音階\"><a href=\"#音階\" class=\"headerlink\" title=\"音階\"></a>音階</h2><p>ざっと調べてみたところ、主に使われているのは民俗音楽らしく47抜き音階、マイナー（ドリアン？）スケールだった。<br>とはいえ、やはり旋律のリズムが最も重視されている印象である。</p>\n<h2 id=\"リズム\"><a href=\"#リズム\" class=\"headerlink\" title=\"リズム\"></a>リズム</h2><p>独特でありつつも単純に聞こえて、実は複雑である。細かい3拍子が集まった変拍子で構成される。<br>代表的なリズムにはジグ、リールといった名前がついている。</p>\n<h2 id=\"他の音楽との関係\"><a href=\"#他の音楽との関係\" class=\"headerlink\" title=\"他の音楽との関係\"></a>他の音楽との関係</h2><p>カントリーミュージックの起源の一つであるといわれている。ゴスペルや賛美歌の影響を取り入れて変化していったようだ。この周辺の音楽を見てもわかるように、ケルトの歴史は非常に長い。</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>聞いていて修行のような感じはなく、「楽しい音楽」である。たくさん聞いても飽きることがなく、ますます好きになった。</p>\n<p>ゲーム音楽のような打ち込みも現物の演奏も両方おすすめしたい。</p>\n<iframe src=\"//www.youtube.com/embed/usm6n6WYpdg\" width=\"420\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n<iframe src=\"//www.youtube.com/embed/eWLjhXXr68E?list=FL7ttuAt0osVq2OEFkfDdFqQ\" width=\"470\" height=\"315\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe>\n\n"},{"title":"Processingで画像処理をする - クロスプロセス","date":"2014-08-31T08:39:36.000Z","_content":"\n今回は「procesingで画像処理をする」の続編になるが、「デジタルクロスプロセス」という処理方法を述べたい。\n\nいや、実はこの画像処理は手法が確立されていない技術で、大学で僕が考えた方法を改めてここに書き留めておきたいと思うのだ。\n\n## クロスプロセスとは\n\nそもそもクロスプロセスとは、## 写真を現像する際に用いられる技術である。写真を現像するときに持っていくフィルムにはポジフィルムとネガフィルムがある。いわゆる「ネガ」である。\n\nこれらにはそれぞれ対応する現像方法があり、それによって正しく現像されるのである。\n\nクロスプロセスとは、この現像方法を入れかえてしまおうという手法である。\n\nそして、これを現実のフィルムを使わずにデジタルで表現しようというのがデジタルクロスプロセスである。\n\n## デジタルにおけるクロスプロセス\n\nおそらくもっとも身近なデジタルクロスプロセスといえば「Instagram」というアプリだろう。画像を共有するサービスで、\n\nTwitterやFacebookなどへスマホの写真を投稿する時に画像を「ちょっといい感じ」に加工することができる。\n\nこちらは専用のフィルターが用意されていて、非常にクロスプロセスっぽい画像ができあがる。ただ輝度をいじったりするのとは違い、独特の雰囲気が好まれているようだ。\n\n<a href=\"https://instagram.com/\">Instagram</a>\n\n## Processingでクロスプロセス\n\n前回、Processingを使うことで比較的簡単に画像処理ができることを述べた。\n\n今回も、get()した情報に何らかの変更を加え、それをset()することで反映させる1ピクセル対1ピクセルの処理で実装したいと思う。\n\n## どう実装するか\n\n前述したとおり、デジタルクロスプロセスには決まった手法がない。そこで、僕はまず既存のデジタルクロスプロセスがどのように行われているのかを調べてみた。\n\n僕が参考になると思ったのはPhotoshopによる処理方法であった。Photoshopにはトーンカーブでのコントラスト調整をする際に、クロスプロセスのテンプレートがあるらしいのだ。\n\n僕はPhotoshopのテンプレートの値をそのままプログラムに落とし込めば簡単に作れるのではないかと考えた。しかし、これではただのパクリだ。それによく調べてみると、多くの場合はこのテンプレートを画像によって好みになるように調節しながら使うらしいことが分かった。\n\nそこで僕は、トーンカーブを使うというのはそのままに既存の数値にとらわれない新しい方法でデジタルクロスプロセスを実装することに決めた\n\n## トーンカーブ\n\nいきなり「トーンカーブ」という言葉を出してしまったが、まずはこれがどんなものか説明したい。トーンカーブとは、入力されるデータ値をx軸に、出力されるデータ値をy軸にとった時のxとyの関係をグラフに表したものである。多くの場合は曲線になる（例外ももちろんある）ため、トーン（色調）のカーブ（曲線）ということでトーンカーブと呼ばれる。\n\n画像処理をするときに、r,g,bの全域に対して、一つ一つ数字を対応させるのは大変である。そこで、曲線をマウスをつかってグニャグニャいじることで感覚的にフィルターを作れるのである。\n\nそれでは、トーンカーブを数式と考えてみたらどうだろう？もしデジタルクロスプロセスに使われるテンプレートの”形”を数式で定義できれば、パラメータを変えることでより本物のクロスプロセスに近い処理をすることができるのでないだろうか。\n\n## キーワードは”S字”\n\nさっそくいろんなサイトでトーンカーブについてみて回る。そして気付いたのだが、デジタルクロスプロセスに使われるトーンカーブはS字の形をしていることが多い。曲率は違えど皆S字を使っている。これはラッキーである。S字なら高校数学で散々付き合ったではないか。「3次関数」があるじゃないか！\n\nと、ここまでは安易に考えていたのだが、すぐに問題が発覚した。\n\n3次関数では自由度が高すぎるのだ。高校のときに極値だか変曲点だか習ったが、いずれも「無い」場合がある。つまり、3次関数は必ずしもS字になるとは限らないのだ。\n\nなんとかS字だけになるようにパラメータ（各項の係数）を制限しようと試みたものの、あれこれ数字が動くので難しすぎる。東工大の奴とかに解かせてみたいぐらいだ。「3次関数がS字となる係数を全てあげ、数式でその条件を述べよ」こんな問題を解く頭は僕にはないので、他の数式でS字を作るものはないかと考える。\n\n## シグモイド関数\n\nそんな中で採用することにしたのがこのシグモイド関数。まさにS字を描く関数で、パラメータも2つですむことが分かった。\n\n数式は以下の通りである。まず、\n\n```\nG0 = 255/(1+exp(-γ(u-127.5)))\n```\n\nとおく。ここでγ（ガンマ）を1/30にすることで、uが0~1のときちょうどgが0~255になる。\n\nこれを以下の式のように組み込む。\n\n```\nyc=kc{xc+bc(G0(xc)-xc)}\n```\n\nxcが入力でycが出力である。kc,bcがパラメータとなり、それぞれ0~1で指定すればよい。\n\nこれで準備は整った。\n\n## コーディングする\n\n以下がコードである。\n\n<script src=\"https://gist.github.com/salmon2073/8a8caa6d59938369c31e.js\"></script>\n\n上のコードをただ写しただけでは真黒な画像になってしまう。パラメータとして、k<em>(r,g,b),b</em>(r,g,b)に0~1の値を入れることで、きちんと動くようになる。\n\n処理前\n\n<img src=\"https://www5469up.sakura.ne.jp/file/before_process.png\" alt=\"\" />\n\n処理後\n\n<img src=\"https://www5469up.sakura.ne.jp/file/after_process.png\" alt=\"\" />\n\n## 終わりに\n\n今回はデジタルクロスプロセスに焦点を当ててみた。実はこの勉強は続きがあるのだが…\n\n次に画像処理について扱うときはグリッチとかテーマにしてみようと思う。\n\n","source":"_posts/2014-08-31-Processingで画像処理をする - クロスプロセス.md","raw":"---\ntitle: Processingで画像処理をする - クロスプロセス\ndate: 2014-08-31 17:39:36\ncategory: Processing\n---\n\n今回は「procesingで画像処理をする」の続編になるが、「デジタルクロスプロセス」という処理方法を述べたい。\n\nいや、実はこの画像処理は手法が確立されていない技術で、大学で僕が考えた方法を改めてここに書き留めておきたいと思うのだ。\n\n## クロスプロセスとは\n\nそもそもクロスプロセスとは、## 写真を現像する際に用いられる技術である。写真を現像するときに持っていくフィルムにはポジフィルムとネガフィルムがある。いわゆる「ネガ」である。\n\nこれらにはそれぞれ対応する現像方法があり、それによって正しく現像されるのである。\n\nクロスプロセスとは、この現像方法を入れかえてしまおうという手法である。\n\nそして、これを現実のフィルムを使わずにデジタルで表現しようというのがデジタルクロスプロセスである。\n\n## デジタルにおけるクロスプロセス\n\nおそらくもっとも身近なデジタルクロスプロセスといえば「Instagram」というアプリだろう。画像を共有するサービスで、\n\nTwitterやFacebookなどへスマホの写真を投稿する時に画像を「ちょっといい感じ」に加工することができる。\n\nこちらは専用のフィルターが用意されていて、非常にクロスプロセスっぽい画像ができあがる。ただ輝度をいじったりするのとは違い、独特の雰囲気が好まれているようだ。\n\n<a href=\"https://instagram.com/\">Instagram</a>\n\n## Processingでクロスプロセス\n\n前回、Processingを使うことで比較的簡単に画像処理ができることを述べた。\n\n今回も、get()した情報に何らかの変更を加え、それをset()することで反映させる1ピクセル対1ピクセルの処理で実装したいと思う。\n\n## どう実装するか\n\n前述したとおり、デジタルクロスプロセスには決まった手法がない。そこで、僕はまず既存のデジタルクロスプロセスがどのように行われているのかを調べてみた。\n\n僕が参考になると思ったのはPhotoshopによる処理方法であった。Photoshopにはトーンカーブでのコントラスト調整をする際に、クロスプロセスのテンプレートがあるらしいのだ。\n\n僕はPhotoshopのテンプレートの値をそのままプログラムに落とし込めば簡単に作れるのではないかと考えた。しかし、これではただのパクリだ。それによく調べてみると、多くの場合はこのテンプレートを画像によって好みになるように調節しながら使うらしいことが分かった。\n\nそこで僕は、トーンカーブを使うというのはそのままに既存の数値にとらわれない新しい方法でデジタルクロスプロセスを実装することに決めた\n\n## トーンカーブ\n\nいきなり「トーンカーブ」という言葉を出してしまったが、まずはこれがどんなものか説明したい。トーンカーブとは、入力されるデータ値をx軸に、出力されるデータ値をy軸にとった時のxとyの関係をグラフに表したものである。多くの場合は曲線になる（例外ももちろんある）ため、トーン（色調）のカーブ（曲線）ということでトーンカーブと呼ばれる。\n\n画像処理をするときに、r,g,bの全域に対して、一つ一つ数字を対応させるのは大変である。そこで、曲線をマウスをつかってグニャグニャいじることで感覚的にフィルターを作れるのである。\n\nそれでは、トーンカーブを数式と考えてみたらどうだろう？もしデジタルクロスプロセスに使われるテンプレートの”形”を数式で定義できれば、パラメータを変えることでより本物のクロスプロセスに近い処理をすることができるのでないだろうか。\n\n## キーワードは”S字”\n\nさっそくいろんなサイトでトーンカーブについてみて回る。そして気付いたのだが、デジタルクロスプロセスに使われるトーンカーブはS字の形をしていることが多い。曲率は違えど皆S字を使っている。これはラッキーである。S字なら高校数学で散々付き合ったではないか。「3次関数」があるじゃないか！\n\nと、ここまでは安易に考えていたのだが、すぐに問題が発覚した。\n\n3次関数では自由度が高すぎるのだ。高校のときに極値だか変曲点だか習ったが、いずれも「無い」場合がある。つまり、3次関数は必ずしもS字になるとは限らないのだ。\n\nなんとかS字だけになるようにパラメータ（各項の係数）を制限しようと試みたものの、あれこれ数字が動くので難しすぎる。東工大の奴とかに解かせてみたいぐらいだ。「3次関数がS字となる係数を全てあげ、数式でその条件を述べよ」こんな問題を解く頭は僕にはないので、他の数式でS字を作るものはないかと考える。\n\n## シグモイド関数\n\nそんな中で採用することにしたのがこのシグモイド関数。まさにS字を描く関数で、パラメータも2つですむことが分かった。\n\n数式は以下の通りである。まず、\n\n```\nG0 = 255/(1+exp(-γ(u-127.5)))\n```\n\nとおく。ここでγ（ガンマ）を1/30にすることで、uが0~1のときちょうどgが0~255になる。\n\nこれを以下の式のように組み込む。\n\n```\nyc=kc{xc+bc(G0(xc)-xc)}\n```\n\nxcが入力でycが出力である。kc,bcがパラメータとなり、それぞれ0~1で指定すればよい。\n\nこれで準備は整った。\n\n## コーディングする\n\n以下がコードである。\n\n<script src=\"https://gist.github.com/salmon2073/8a8caa6d59938369c31e.js\"></script>\n\n上のコードをただ写しただけでは真黒な画像になってしまう。パラメータとして、k<em>(r,g,b),b</em>(r,g,b)に0~1の値を入れることで、きちんと動くようになる。\n\n処理前\n\n<img src=\"https://www5469up.sakura.ne.jp/file/before_process.png\" alt=\"\" />\n\n処理後\n\n<img src=\"https://www5469up.sakura.ne.jp/file/after_process.png\" alt=\"\" />\n\n## 終わりに\n\n今回はデジタルクロスプロセスに焦点を当ててみた。実はこの勉強は続きがあるのだが…\n\n次に画像処理について扱うときはグリッチとかテーマにしてみようと思う。\n\n","slug":"Processingで画像処理をする - クロスプロセス","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9be8ra0018xgtv1pjr6y4j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今回は「procesingで画像処理をする」の続編になるが、「デジタルクロスプロセス」という処理方法を述べたい。</p>\n<p>いや、実はこの画像処理は手法が確立されていない技術で、大学で僕が考えた方法を改めてここに書き留めておきたいと思うのだ。</p>\n<h2 id=\"クロスプロセスとは\"><a href=\"#クロスプロセスとは\" class=\"headerlink\" title=\"クロスプロセスとは\"></a>クロスプロセスとは</h2><p>そもそもクロスプロセスとは、## 写真を現像する際に用いられる技術である。写真を現像するときに持っていくフィルムにはポジフィルムとネガフィルムがある。いわゆる「ネガ」である。</p>\n<p>これらにはそれぞれ対応する現像方法があり、それによって正しく現像されるのである。</p>\n<p>クロスプロセスとは、この現像方法を入れかえてしまおうという手法である。</p>\n<p>そして、これを現実のフィルムを使わずにデジタルで表現しようというのがデジタルクロスプロセスである。</p>\n<h2 id=\"デジタルにおけるクロスプロセス\"><a href=\"#デジタルにおけるクロスプロセス\" class=\"headerlink\" title=\"デジタルにおけるクロスプロセス\"></a>デジタルにおけるクロスプロセス</h2><p>おそらくもっとも身近なデジタルクロスプロセスといえば「Instagram」というアプリだろう。画像を共有するサービスで、</p>\n<p>TwitterやFacebookなどへスマホの写真を投稿する時に画像を「ちょっといい感じ」に加工することができる。</p>\n<p>こちらは専用のフィルターが用意されていて、非常にクロスプロセスっぽい画像ができあがる。ただ輝度をいじったりするのとは違い、独特の雰囲気が好まれているようだ。</p>\n<p><a href=\"https://instagram.com/\">Instagram</a></p>\n<h2 id=\"Processingでクロスプロセス\"><a href=\"#Processingでクロスプロセス\" class=\"headerlink\" title=\"Processingでクロスプロセス\"></a>Processingでクロスプロセス</h2><p>前回、Processingを使うことで比較的簡単に画像処理ができることを述べた。</p>\n<p>今回も、get()した情報に何らかの変更を加え、それをset()することで反映させる1ピクセル対1ピクセルの処理で実装したいと思う。</p>\n<h2 id=\"どう実装するか\"><a href=\"#どう実装するか\" class=\"headerlink\" title=\"どう実装するか\"></a>どう実装するか</h2><p>前述したとおり、デジタルクロスプロセスには決まった手法がない。そこで、僕はまず既存のデジタルクロスプロセスがどのように行われているのかを調べてみた。</p>\n<p>僕が参考になると思ったのはPhotoshopによる処理方法であった。Photoshopにはトーンカーブでのコントラスト調整をする際に、クロスプロセスのテンプレートがあるらしいのだ。</p>\n<p>僕はPhotoshopのテンプレートの値をそのままプログラムに落とし込めば簡単に作れるのではないかと考えた。しかし、これではただのパクリだ。それによく調べてみると、多くの場合はこのテンプレートを画像によって好みになるように調節しながら使うらしいことが分かった。</p>\n<p>そこで僕は、トーンカーブを使うというのはそのままに既存の数値にとらわれない新しい方法でデジタルクロスプロセスを実装することに決めた</p>\n<h2 id=\"トーンカーブ\"><a href=\"#トーンカーブ\" class=\"headerlink\" title=\"トーンカーブ\"></a>トーンカーブ</h2><p>いきなり「トーンカーブ」という言葉を出してしまったが、まずはこれがどんなものか説明したい。トーンカーブとは、入力されるデータ値をx軸に、出力されるデータ値をy軸にとった時のxとyの関係をグラフに表したものである。多くの場合は曲線になる（例外ももちろんある）ため、トーン（色調）のカーブ（曲線）ということでトーンカーブと呼ばれる。</p>\n<p>画像処理をするときに、r,g,bの全域に対して、一つ一つ数字を対応させるのは大変である。そこで、曲線をマウスをつかってグニャグニャいじることで感覚的にフィルターを作れるのである。</p>\n<p>それでは、トーンカーブを数式と考えてみたらどうだろう？もしデジタルクロスプロセスに使われるテンプレートの”形”を数式で定義できれば、パラメータを変えることでより本物のクロスプロセスに近い処理をすることができるのでないだろうか。</p>\n<h2 id=\"キーワードは”S字”\"><a href=\"#キーワードは”S字”\" class=\"headerlink\" title=\"キーワードは”S字”\"></a>キーワードは”S字”</h2><p>さっそくいろんなサイトでトーンカーブについてみて回る。そして気付いたのだが、デジタルクロスプロセスに使われるトーンカーブはS字の形をしていることが多い。曲率は違えど皆S字を使っている。これはラッキーである。S字なら高校数学で散々付き合ったではないか。「3次関数」があるじゃないか！</p>\n<p>と、ここまでは安易に考えていたのだが、すぐに問題が発覚した。</p>\n<p>3次関数では自由度が高すぎるのだ。高校のときに極値だか変曲点だか習ったが、いずれも「無い」場合がある。つまり、3次関数は必ずしもS字になるとは限らないのだ。</p>\n<p>なんとかS字だけになるようにパラメータ（各項の係数）を制限しようと試みたものの、あれこれ数字が動くので難しすぎる。東工大の奴とかに解かせてみたいぐらいだ。「3次関数がS字となる係数を全てあげ、数式でその条件を述べよ」こんな問題を解く頭は僕にはないので、他の数式でS字を作るものはないかと考える。</p>\n<h2 id=\"シグモイド関数\"><a href=\"#シグモイド関数\" class=\"headerlink\" title=\"シグモイド関数\"></a>シグモイド関数</h2><p>そんな中で採用することにしたのがこのシグモイド関数。まさにS字を描く関数で、パラメータも2つですむことが分かった。</p>\n<p>数式は以下の通りである。まず、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G0 &#x3D; 255&#x2F;(1+exp(-γ(u-127.5)))</span><br></pre></td></tr></table></figure>\n\n<p>とおく。ここでγ（ガンマ）を1/30にすることで、uが0<del>1のときちょうどgが0</del>255になる。</p>\n<p>これを以下の式のように組み込む。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yc&#x3D;kc&#123;xc+bc(G0(xc)-xc)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>xcが入力でycが出力である。kc,bcがパラメータとなり、それぞれ0~1で指定すればよい。</p>\n<p>これで準備は整った。</p>\n<h2 id=\"コーディングする\"><a href=\"#コーディングする\" class=\"headerlink\" title=\"コーディングする\"></a>コーディングする</h2><p>以下がコードである。</p>\n<script src=\"https://gist.github.com/salmon2073/8a8caa6d59938369c31e.js\"></script>\n\n<p>上のコードをただ写しただけでは真黒な画像になってしまう。パラメータとして、k<em>(r,g,b),b</em>(r,g,b)に0~1の値を入れることで、きちんと動くようになる。</p>\n<p>処理前</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/before_process.png\" alt=\"\" />\n\n<p>処理後</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/after_process.png\" alt=\"\" />\n\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回はデジタルクロスプロセスに焦点を当ててみた。実はこの勉強は続きがあるのだが…</p>\n<p>次に画像処理について扱うときはグリッチとかテーマにしてみようと思う。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今回は「procesingで画像処理をする」の続編になるが、「デジタルクロスプロセス」という処理方法を述べたい。</p>\n<p>いや、実はこの画像処理は手法が確立されていない技術で、大学で僕が考えた方法を改めてここに書き留めておきたいと思うのだ。</p>\n<h2 id=\"クロスプロセスとは\"><a href=\"#クロスプロセスとは\" class=\"headerlink\" title=\"クロスプロセスとは\"></a>クロスプロセスとは</h2><p>そもそもクロスプロセスとは、## 写真を現像する際に用いられる技術である。写真を現像するときに持っていくフィルムにはポジフィルムとネガフィルムがある。いわゆる「ネガ」である。</p>\n<p>これらにはそれぞれ対応する現像方法があり、それによって正しく現像されるのである。</p>\n<p>クロスプロセスとは、この現像方法を入れかえてしまおうという手法である。</p>\n<p>そして、これを現実のフィルムを使わずにデジタルで表現しようというのがデジタルクロスプロセスである。</p>\n<h2 id=\"デジタルにおけるクロスプロセス\"><a href=\"#デジタルにおけるクロスプロセス\" class=\"headerlink\" title=\"デジタルにおけるクロスプロセス\"></a>デジタルにおけるクロスプロセス</h2><p>おそらくもっとも身近なデジタルクロスプロセスといえば「Instagram」というアプリだろう。画像を共有するサービスで、</p>\n<p>TwitterやFacebookなどへスマホの写真を投稿する時に画像を「ちょっといい感じ」に加工することができる。</p>\n<p>こちらは専用のフィルターが用意されていて、非常にクロスプロセスっぽい画像ができあがる。ただ輝度をいじったりするのとは違い、独特の雰囲気が好まれているようだ。</p>\n<p><a href=\"https://instagram.com/\">Instagram</a></p>\n<h2 id=\"Processingでクロスプロセス\"><a href=\"#Processingでクロスプロセス\" class=\"headerlink\" title=\"Processingでクロスプロセス\"></a>Processingでクロスプロセス</h2><p>前回、Processingを使うことで比較的簡単に画像処理ができることを述べた。</p>\n<p>今回も、get()した情報に何らかの変更を加え、それをset()することで反映させる1ピクセル対1ピクセルの処理で実装したいと思う。</p>\n<h2 id=\"どう実装するか\"><a href=\"#どう実装するか\" class=\"headerlink\" title=\"どう実装するか\"></a>どう実装するか</h2><p>前述したとおり、デジタルクロスプロセスには決まった手法がない。そこで、僕はまず既存のデジタルクロスプロセスがどのように行われているのかを調べてみた。</p>\n<p>僕が参考になると思ったのはPhotoshopによる処理方法であった。Photoshopにはトーンカーブでのコントラスト調整をする際に、クロスプロセスのテンプレートがあるらしいのだ。</p>\n<p>僕はPhotoshopのテンプレートの値をそのままプログラムに落とし込めば簡単に作れるのではないかと考えた。しかし、これではただのパクリだ。それによく調べてみると、多くの場合はこのテンプレートを画像によって好みになるように調節しながら使うらしいことが分かった。</p>\n<p>そこで僕は、トーンカーブを使うというのはそのままに既存の数値にとらわれない新しい方法でデジタルクロスプロセスを実装することに決めた</p>\n<h2 id=\"トーンカーブ\"><a href=\"#トーンカーブ\" class=\"headerlink\" title=\"トーンカーブ\"></a>トーンカーブ</h2><p>いきなり「トーンカーブ」という言葉を出してしまったが、まずはこれがどんなものか説明したい。トーンカーブとは、入力されるデータ値をx軸に、出力されるデータ値をy軸にとった時のxとyの関係をグラフに表したものである。多くの場合は曲線になる（例外ももちろんある）ため、トーン（色調）のカーブ（曲線）ということでトーンカーブと呼ばれる。</p>\n<p>画像処理をするときに、r,g,bの全域に対して、一つ一つ数字を対応させるのは大変である。そこで、曲線をマウスをつかってグニャグニャいじることで感覚的にフィルターを作れるのである。</p>\n<p>それでは、トーンカーブを数式と考えてみたらどうだろう？もしデジタルクロスプロセスに使われるテンプレートの”形”を数式で定義できれば、パラメータを変えることでより本物のクロスプロセスに近い処理をすることができるのでないだろうか。</p>\n<h2 id=\"キーワードは”S字”\"><a href=\"#キーワードは”S字”\" class=\"headerlink\" title=\"キーワードは”S字”\"></a>キーワードは”S字”</h2><p>さっそくいろんなサイトでトーンカーブについてみて回る。そして気付いたのだが、デジタルクロスプロセスに使われるトーンカーブはS字の形をしていることが多い。曲率は違えど皆S字を使っている。これはラッキーである。S字なら高校数学で散々付き合ったではないか。「3次関数」があるじゃないか！</p>\n<p>と、ここまでは安易に考えていたのだが、すぐに問題が発覚した。</p>\n<p>3次関数では自由度が高すぎるのだ。高校のときに極値だか変曲点だか習ったが、いずれも「無い」場合がある。つまり、3次関数は必ずしもS字になるとは限らないのだ。</p>\n<p>なんとかS字だけになるようにパラメータ（各項の係数）を制限しようと試みたものの、あれこれ数字が動くので難しすぎる。東工大の奴とかに解かせてみたいぐらいだ。「3次関数がS字となる係数を全てあげ、数式でその条件を述べよ」こんな問題を解く頭は僕にはないので、他の数式でS字を作るものはないかと考える。</p>\n<h2 id=\"シグモイド関数\"><a href=\"#シグモイド関数\" class=\"headerlink\" title=\"シグモイド関数\"></a>シグモイド関数</h2><p>そんな中で採用することにしたのがこのシグモイド関数。まさにS字を描く関数で、パラメータも2つですむことが分かった。</p>\n<p>数式は以下の通りである。まず、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">G0 &#x3D; 255&#x2F;(1+exp(-γ(u-127.5)))</span><br></pre></td></tr></table></figure>\n\n<p>とおく。ここでγ（ガンマ）を1/30にすることで、uが0<del>1のときちょうどgが0</del>255になる。</p>\n<p>これを以下の式のように組み込む。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yc&#x3D;kc&#123;xc+bc(G0(xc)-xc)&#125;</span><br></pre></td></tr></table></figure>\n\n<p>xcが入力でycが出力である。kc,bcがパラメータとなり、それぞれ0~1で指定すればよい。</p>\n<p>これで準備は整った。</p>\n<h2 id=\"コーディングする\"><a href=\"#コーディングする\" class=\"headerlink\" title=\"コーディングする\"></a>コーディングする</h2><p>以下がコードである。</p>\n<script src=\"https://gist.github.com/salmon2073/8a8caa6d59938369c31e.js\"></script>\n\n<p>上のコードをただ写しただけでは真黒な画像になってしまう。パラメータとして、k<em>(r,g,b),b</em>(r,g,b)に0~1の値を入れることで、きちんと動くようになる。</p>\n<p>処理前</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/before_process.png\" alt=\"\" />\n\n<p>処理後</p>\n<img src=\"https://www5469up.sakura.ne.jp/file/after_process.png\" alt=\"\" />\n\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>今回はデジタルクロスプロセスに焦点を当ててみた。実はこの勉強は続きがあるのだが…</p>\n<p>次に画像処理について扱うときはグリッチとかテーマにしてみようと思う。</p>\n"},{"title":"Hack Uに参加してきた","date":"2014-09-20T09:05:40.000Z","_content":"\n先日、自分たちの大学でHack Uというイベントが行われた。自分もチームをつくって参加してきた。\n日頃あまり見ない他の学生たちの成果が見れてよい刺激だったので、ちょっとまとめてみようと思う。\n\n## Hack Uとは\n\nYahoo! JAPANが主催しているハッカソンイベントで、元より開催されている研究者向けハッカソン「Hack Day」の大学生バージョンである。\n1か月ほどでアイディア出しや準備をして3日で開発、次の日には発表というスケジュールになっている。開発時間は3日ともそれぞれ8時間ずつなので、実質24時間で開発をすることになる。今回は開発を自分たちのキャンパスで行い、発表は六本木のアークヒルズ　サウスタワーで行った。\n\n工程別に反省点をまとめたい\n\n## アイディア出し\n\n主に自分がプレ配属されている研究室で行った。アイディア自体は各テーマ100個くらい集まったのだが、結局それらは使わずに直前でSkypeで集まって決めた。\n今回の反省点はここが特に大きく、この段階での情報収集が足りなかったために後に悔しい結果を招いてしまった。\n自分たちのテーマがそのイベントの趣旨に合っているか、スケールとして現実味があるか、新規性があるか等はしっかり検討するべきだった…\n\n## 準備\n\n最初のトラブルはここで起こった。自分たちが作ろうとしているものとほぼ同じものを見つけてしまったのだ。すぐに代案を立てて進めようとしたのだが、資料を集める段階でまた類似物を見つけてしまう始末。これにはかなり参ってしまった。\n普段の授業でつくるような課題と違い、汎用でありながら新規性のあるアイディアを出すことがいかに難しいか思い知らされた。\n\nとはいえ、ここで引き返す余裕はなかったので強行することに。準備することに関してはサーバの調達やドットインストールでの学習など、かなり手際よくできたと思う。\n最終的には皆がそれぞれのタスクをこなせるような技術と資料が整った状態で挑むことができた。\n\n## 開発\n\nいくつか壁にぶつかったものの、目標とするレベルまでは開発することができたと思う。が、これは後からだから言えるのだが、自分たちのチームは他のチームに比べて実装しようとする機能が多すぎた。最優秀作品は「シンプルであること」を評価されていたが、デザインというよりは目的と手段がシンプルであるために使用シチュエーションがはっきりしているという意味だったと思われる。その点、自分たちが作ろうしたものは無駄な（というほどではないが）機能・こだわりが多すぎてアピールポイントがぼけてしまった。\n\nここで問題なのは、「開発の途中で新たなアイディアが浮かんできたらどうするか？」ということである。\n\n今回は僕が余計な提案をしたために見る人たちの視線がそっちに行ってしまい、本来アピールするべきところがサブのようになってしまった。\n長期的な開発ならば方針変更できることもあるかもしれないが、今回のような限られた時間の中で行う場合はどうするべきなんだろうか？\n\n## プレゼン\n\n持ち時間は3分だった。他のチームを見てると短そうだったので話す内容を減らしたところ、一通り喋ったところで1分も余った。余計な情報を追加して突っ込みどころを増やすぐらいなら、質問時間で補足していった方がいいだろうと思ってそこでプレゼンを終えた。\n\nところがいざ質疑応答の時間になると、プレゼンで概要が伝わり切っていなかったのか質問自体が簡素なものしかなく、「これはやってしまった」と思った。\n反省点としてシステムの説明が足りていなかったこと、プレゼンをするときに自分たちが言いたいことと聞き手がもっと聞きたいことを一致させられなかったことがあげられる。\n\n## 反省点まとめ\n\n要点をまとめるとこんな感じである。\n\n- 事前のリサーチが足りていなかった（新規性）\n- 求められているスケールに対して適切でないものを作ろうとしてしまった\n- 土台がきちんとしていないと細かいこだわりは意味がない\n- 一番の売りどころがぼやけていた（中途半端に追加すると必ず突っ込まれる）\n- プレゼンが分かりにくかった（チーム外の人にリハーサルを見てもらったらどうか？）\n\n## まとめ\n\nこうして書いてみると、まあ悲惨だったように見えるかもしれないが、それでも得たものは大きい。\nもちろんすでに次のイベントへの参加も考えていて、この反省を必ず活かしたいと思っている。それが結果につながれば尚良しである。\n\n","source":"_posts/2014-09-20-Hack Uに参加してきた.md","raw":"---\ntitle: Hack Uに参加してきた\ndate: 2014-09-20 18:05:40\ncategory: 日記\n---\n\n先日、自分たちの大学でHack Uというイベントが行われた。自分もチームをつくって参加してきた。\n日頃あまり見ない他の学生たちの成果が見れてよい刺激だったので、ちょっとまとめてみようと思う。\n\n## Hack Uとは\n\nYahoo! JAPANが主催しているハッカソンイベントで、元より開催されている研究者向けハッカソン「Hack Day」の大学生バージョンである。\n1か月ほどでアイディア出しや準備をして3日で開発、次の日には発表というスケジュールになっている。開発時間は3日ともそれぞれ8時間ずつなので、実質24時間で開発をすることになる。今回は開発を自分たちのキャンパスで行い、発表は六本木のアークヒルズ　サウスタワーで行った。\n\n工程別に反省点をまとめたい\n\n## アイディア出し\n\n主に自分がプレ配属されている研究室で行った。アイディア自体は各テーマ100個くらい集まったのだが、結局それらは使わずに直前でSkypeで集まって決めた。\n今回の反省点はここが特に大きく、この段階での情報収集が足りなかったために後に悔しい結果を招いてしまった。\n自分たちのテーマがそのイベントの趣旨に合っているか、スケールとして現実味があるか、新規性があるか等はしっかり検討するべきだった…\n\n## 準備\n\n最初のトラブルはここで起こった。自分たちが作ろうとしているものとほぼ同じものを見つけてしまったのだ。すぐに代案を立てて進めようとしたのだが、資料を集める段階でまた類似物を見つけてしまう始末。これにはかなり参ってしまった。\n普段の授業でつくるような課題と違い、汎用でありながら新規性のあるアイディアを出すことがいかに難しいか思い知らされた。\n\nとはいえ、ここで引き返す余裕はなかったので強行することに。準備することに関してはサーバの調達やドットインストールでの学習など、かなり手際よくできたと思う。\n最終的には皆がそれぞれのタスクをこなせるような技術と資料が整った状態で挑むことができた。\n\n## 開発\n\nいくつか壁にぶつかったものの、目標とするレベルまでは開発することができたと思う。が、これは後からだから言えるのだが、自分たちのチームは他のチームに比べて実装しようとする機能が多すぎた。最優秀作品は「シンプルであること」を評価されていたが、デザインというよりは目的と手段がシンプルであるために使用シチュエーションがはっきりしているという意味だったと思われる。その点、自分たちが作ろうしたものは無駄な（というほどではないが）機能・こだわりが多すぎてアピールポイントがぼけてしまった。\n\nここで問題なのは、「開発の途中で新たなアイディアが浮かんできたらどうするか？」ということである。\n\n今回は僕が余計な提案をしたために見る人たちの視線がそっちに行ってしまい、本来アピールするべきところがサブのようになってしまった。\n長期的な開発ならば方針変更できることもあるかもしれないが、今回のような限られた時間の中で行う場合はどうするべきなんだろうか？\n\n## プレゼン\n\n持ち時間は3分だった。他のチームを見てると短そうだったので話す内容を減らしたところ、一通り喋ったところで1分も余った。余計な情報を追加して突っ込みどころを増やすぐらいなら、質問時間で補足していった方がいいだろうと思ってそこでプレゼンを終えた。\n\nところがいざ質疑応答の時間になると、プレゼンで概要が伝わり切っていなかったのか質問自体が簡素なものしかなく、「これはやってしまった」と思った。\n反省点としてシステムの説明が足りていなかったこと、プレゼンをするときに自分たちが言いたいことと聞き手がもっと聞きたいことを一致させられなかったことがあげられる。\n\n## 反省点まとめ\n\n要点をまとめるとこんな感じである。\n\n- 事前のリサーチが足りていなかった（新規性）\n- 求められているスケールに対して適切でないものを作ろうとしてしまった\n- 土台がきちんとしていないと細かいこだわりは意味がない\n- 一番の売りどころがぼやけていた（中途半端に追加すると必ず突っ込まれる）\n- プレゼンが分かりにくかった（チーム外の人にリハーサルを見てもらったらどうか？）\n\n## まとめ\n\nこうして書いてみると、まあ悲惨だったように見えるかもしれないが、それでも得たものは大きい。\nもちろんすでに次のイベントへの参加も考えていて、この反省を必ず活かしたいと思っている。それが結果につながれば尚良しである。\n\n","slug":"Hack Uに参加してきた","published":1,"updated":"2020-05-16T07:34:03.321Z","_id":"cka9beaf5001axgtv56dm4293","comments":1,"layout":"post","photos":[],"link":"","content":"<p>先日、自分たちの大学でHack Uというイベントが行われた。自分もチームをつくって参加してきた。<br>日頃あまり見ない他の学生たちの成果が見れてよい刺激だったので、ちょっとまとめてみようと思う。</p>\n<h2 id=\"Hack-Uとは\"><a href=\"#Hack-Uとは\" class=\"headerlink\" title=\"Hack Uとは\"></a>Hack Uとは</h2><p>Yahoo! JAPANが主催しているハッカソンイベントで、元より開催されている研究者向けハッカソン「Hack Day」の大学生バージョンである。<br>1か月ほどでアイディア出しや準備をして3日で開発、次の日には発表というスケジュールになっている。開発時間は3日ともそれぞれ8時間ずつなので、実質24時間で開発をすることになる。今回は開発を自分たちのキャンパスで行い、発表は六本木のアークヒルズ　サウスタワーで行った。</p>\n<p>工程別に反省点をまとめたい</p>\n<h2 id=\"アイディア出し\"><a href=\"#アイディア出し\" class=\"headerlink\" title=\"アイディア出し\"></a>アイディア出し</h2><p>主に自分がプレ配属されている研究室で行った。アイディア自体は各テーマ100個くらい集まったのだが、結局それらは使わずに直前でSkypeで集まって決めた。<br>今回の反省点はここが特に大きく、この段階での情報収集が足りなかったために後に悔しい結果を招いてしまった。<br>自分たちのテーマがそのイベントの趣旨に合っているか、スケールとして現実味があるか、新規性があるか等はしっかり検討するべきだった…</p>\n<h2 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h2><p>最初のトラブルはここで起こった。自分たちが作ろうとしているものとほぼ同じものを見つけてしまったのだ。すぐに代案を立てて進めようとしたのだが、資料を集める段階でまた類似物を見つけてしまう始末。これにはかなり参ってしまった。<br>普段の授業でつくるような課題と違い、汎用でありながら新規性のあるアイディアを出すことがいかに難しいか思い知らされた。</p>\n<p>とはいえ、ここで引き返す余裕はなかったので強行することに。準備することに関してはサーバの調達やドットインストールでの学習など、かなり手際よくできたと思う。<br>最終的には皆がそれぞれのタスクをこなせるような技術と資料が整った状態で挑むことができた。</p>\n<h2 id=\"開発\"><a href=\"#開発\" class=\"headerlink\" title=\"開発\"></a>開発</h2><p>いくつか壁にぶつかったものの、目標とするレベルまでは開発することができたと思う。が、これは後からだから言えるのだが、自分たちのチームは他のチームに比べて実装しようとする機能が多すぎた。最優秀作品は「シンプルであること」を評価されていたが、デザインというよりは目的と手段がシンプルであるために使用シチュエーションがはっきりしているという意味だったと思われる。その点、自分たちが作ろうしたものは無駄な（というほどではないが）機能・こだわりが多すぎてアピールポイントがぼけてしまった。</p>\n<p>ここで問題なのは、「開発の途中で新たなアイディアが浮かんできたらどうするか？」ということである。</p>\n<p>今回は僕が余計な提案をしたために見る人たちの視線がそっちに行ってしまい、本来アピールするべきところがサブのようになってしまった。<br>長期的な開発ならば方針変更できることもあるかもしれないが、今回のような限られた時間の中で行う場合はどうするべきなんだろうか？</p>\n<h2 id=\"プレゼン\"><a href=\"#プレゼン\" class=\"headerlink\" title=\"プレゼン\"></a>プレゼン</h2><p>持ち時間は3分だった。他のチームを見てると短そうだったので話す内容を減らしたところ、一通り喋ったところで1分も余った。余計な情報を追加して突っ込みどころを増やすぐらいなら、質問時間で補足していった方がいいだろうと思ってそこでプレゼンを終えた。</p>\n<p>ところがいざ質疑応答の時間になると、プレゼンで概要が伝わり切っていなかったのか質問自体が簡素なものしかなく、「これはやってしまった」と思った。<br>反省点としてシステムの説明が足りていなかったこと、プレゼンをするときに自分たちが言いたいことと聞き手がもっと聞きたいことを一致させられなかったことがあげられる。</p>\n<h2 id=\"反省点まとめ\"><a href=\"#反省点まとめ\" class=\"headerlink\" title=\"反省点まとめ\"></a>反省点まとめ</h2><p>要点をまとめるとこんな感じである。</p>\n<ul>\n<li>事前のリサーチが足りていなかった（新規性）</li>\n<li>求められているスケールに対して適切でないものを作ろうとしてしまった</li>\n<li>土台がきちんとしていないと細かいこだわりは意味がない</li>\n<li>一番の売りどころがぼやけていた（中途半端に追加すると必ず突っ込まれる）</li>\n<li>プレゼンが分かりにくかった（チーム外の人にリハーサルを見てもらったらどうか？）</li>\n</ul>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>こうして書いてみると、まあ悲惨だったように見えるかもしれないが、それでも得たものは大きい。<br>もちろんすでに次のイベントへの参加も考えていて、この反省を必ず活かしたいと思っている。それが結果につながれば尚良しである。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先日、自分たちの大学でHack Uというイベントが行われた。自分もチームをつくって参加してきた。<br>日頃あまり見ない他の学生たちの成果が見れてよい刺激だったので、ちょっとまとめてみようと思う。</p>\n<h2 id=\"Hack-Uとは\"><a href=\"#Hack-Uとは\" class=\"headerlink\" title=\"Hack Uとは\"></a>Hack Uとは</h2><p>Yahoo! JAPANが主催しているハッカソンイベントで、元より開催されている研究者向けハッカソン「Hack Day」の大学生バージョンである。<br>1か月ほどでアイディア出しや準備をして3日で開発、次の日には発表というスケジュールになっている。開発時間は3日ともそれぞれ8時間ずつなので、実質24時間で開発をすることになる。今回は開発を自分たちのキャンパスで行い、発表は六本木のアークヒルズ　サウスタワーで行った。</p>\n<p>工程別に反省点をまとめたい</p>\n<h2 id=\"アイディア出し\"><a href=\"#アイディア出し\" class=\"headerlink\" title=\"アイディア出し\"></a>アイディア出し</h2><p>主に自分がプレ配属されている研究室で行った。アイディア自体は各テーマ100個くらい集まったのだが、結局それらは使わずに直前でSkypeで集まって決めた。<br>今回の反省点はここが特に大きく、この段階での情報収集が足りなかったために後に悔しい結果を招いてしまった。<br>自分たちのテーマがそのイベントの趣旨に合っているか、スケールとして現実味があるか、新規性があるか等はしっかり検討するべきだった…</p>\n<h2 id=\"準備\"><a href=\"#準備\" class=\"headerlink\" title=\"準備\"></a>準備</h2><p>最初のトラブルはここで起こった。自分たちが作ろうとしているものとほぼ同じものを見つけてしまったのだ。すぐに代案を立てて進めようとしたのだが、資料を集める段階でまた類似物を見つけてしまう始末。これにはかなり参ってしまった。<br>普段の授業でつくるような課題と違い、汎用でありながら新規性のあるアイディアを出すことがいかに難しいか思い知らされた。</p>\n<p>とはいえ、ここで引き返す余裕はなかったので強行することに。準備することに関してはサーバの調達やドットインストールでの学習など、かなり手際よくできたと思う。<br>最終的には皆がそれぞれのタスクをこなせるような技術と資料が整った状態で挑むことができた。</p>\n<h2 id=\"開発\"><a href=\"#開発\" class=\"headerlink\" title=\"開発\"></a>開発</h2><p>いくつか壁にぶつかったものの、目標とするレベルまでは開発することができたと思う。が、これは後からだから言えるのだが、自分たちのチームは他のチームに比べて実装しようとする機能が多すぎた。最優秀作品は「シンプルであること」を評価されていたが、デザインというよりは目的と手段がシンプルであるために使用シチュエーションがはっきりしているという意味だったと思われる。その点、自分たちが作ろうしたものは無駄な（というほどではないが）機能・こだわりが多すぎてアピールポイントがぼけてしまった。</p>\n<p>ここで問題なのは、「開発の途中で新たなアイディアが浮かんできたらどうするか？」ということである。</p>\n<p>今回は僕が余計な提案をしたために見る人たちの視線がそっちに行ってしまい、本来アピールするべきところがサブのようになってしまった。<br>長期的な開発ならば方針変更できることもあるかもしれないが、今回のような限られた時間の中で行う場合はどうするべきなんだろうか？</p>\n<h2 id=\"プレゼン\"><a href=\"#プレゼン\" class=\"headerlink\" title=\"プレゼン\"></a>プレゼン</h2><p>持ち時間は3分だった。他のチームを見てると短そうだったので話す内容を減らしたところ、一通り喋ったところで1分も余った。余計な情報を追加して突っ込みどころを増やすぐらいなら、質問時間で補足していった方がいいだろうと思ってそこでプレゼンを終えた。</p>\n<p>ところがいざ質疑応答の時間になると、プレゼンで概要が伝わり切っていなかったのか質問自体が簡素なものしかなく、「これはやってしまった」と思った。<br>反省点としてシステムの説明が足りていなかったこと、プレゼンをするときに自分たちが言いたいことと聞き手がもっと聞きたいことを一致させられなかったことがあげられる。</p>\n<h2 id=\"反省点まとめ\"><a href=\"#反省点まとめ\" class=\"headerlink\" title=\"反省点まとめ\"></a>反省点まとめ</h2><p>要点をまとめるとこんな感じである。</p>\n<ul>\n<li>事前のリサーチが足りていなかった（新規性）</li>\n<li>求められているスケールに対して適切でないものを作ろうとしてしまった</li>\n<li>土台がきちんとしていないと細かいこだわりは意味がない</li>\n<li>一番の売りどころがぼやけていた（中途半端に追加すると必ず突っ込まれる）</li>\n<li>プレゼンが分かりにくかった（チーム外の人にリハーサルを見てもらったらどうか？）</li>\n</ul>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>こうして書いてみると、まあ悲惨だったように見えるかもしれないが、それでも得たものは大きい。<br>もちろんすでに次のイベントへの参加も考えていて、この反省を必ず活かしたいと思っている。それが結果につながれば尚良しである。</p>\n"},{"title":"ProcessingでHSLを扱う","date":"2014-12-18T03:09:05.000Z","_content":"\n僕の所属する研究室では顔画像を処理する研究が行われている。顔画像処理をする際には通常のRGB色空間で処理\nするよりもHSLで処理したほうが便利なことがある（顔検出とか）。\nProcessingでは<a href=\"https://www.processing.org/reference/colorMode_.html\">colorMode()</a>を使うことでRGBやHSBを簡単に扱うことができるが、HSLの扱い方が見つからない。そこでRGB->HSLに変換するメソッドを自作してみた。\n\n## RGBとは\n\n念のため、そもそもRGBとは何かを説明しておきたい。簡単に言えば、赤(Red)、緑(Green)、青(Blue)の混ざり具合のことで、この3原色を用いることでほぼどんな色でも表すことができる。中学の美術の教科書で色のついた円が3つ重なった画像を見かけたと思うがあれのことである。「加法混色」なので、混ざると白に近づき、真っ白は(255,255,255)で真っ黒は(0,0,0)である。\n\nProcessingではデフォルトでこのRGBにアルファ値(A)を加えたRGBAを扱うことができる。\nアルファ値とは透過度のことである。pngなどの画像を読み込むときに、その画像のアルファ値を部分的に0にすることで背景を消したりすることができる。\n\n## HSBとは\n\nこちらは、色相(Hue)、彩度(Saturation)、明度(Value・Lightness・Brightness)で表される色空間で、\n僕はRGBで色をランダムに生成したときに汚い色ばかり出てきていやだな～と思ってドキュメントを読んだら見つけた。\n\n明度がVだったりLだったりして、HSB,やHSLと呼ばれたりもする。つまり本質的には後述のHSLと同じなのだが、僕が期待するHSL空間が錐体型のモデルなのに対し、ProcessingのHSB空間はどうやら円柱型のようなのである。\nそのため、この記事ではあえて明示的にHSBとHSLを分けて書いている。\n\n## HSLとは\n\n上記の通り、HSBと同じである。ちなみに、Wikipediaで調べるとまとめてHSVに転送される。この辺の議論はネットで調べるといろんな情報が（色だけに）でてくるのであまり深く突っ込まないことにする。\n\n## RGB->HSLのメソッド\n\nここからが本題で、「Processingで扱われているRGBを錐体型のHSLに変換する」のが目的である。\n以下がプログラムの全文である。\n\n<script src=\"https://gist.github.com/salmon2073/d0aaa0373cb3f05fc7f5.js\"></script>\n\n3つ値を返したかったのでPVectorを使ったが、もっといい方法があるかもしれない。入力はRGBで、Hは0~360, S,Bは0~100の値で返ってくる。入力がfloat型になってるのはrandomで数値を代入するときにいちいちint型に直すのが面倒だったからで、リアルタイム処理などで速度を気にする場合はintで動くようにしたほうがいいかもしれない。\n\nたまっていたProcessingネタをちょっとずつ消化しているが、そろそろ他のことも書きたい。\n\n","source":"_posts/2014-12-18-ProcessingでHSLを扱う.md","raw":"---\ntitle: ProcessingでHSLを扱う\ndate: 2014-12-18 12:09:05\ncategory: Processing\n---\n\n僕の所属する研究室では顔画像を処理する研究が行われている。顔画像処理をする際には通常のRGB色空間で処理\nするよりもHSLで処理したほうが便利なことがある（顔検出とか）。\nProcessingでは<a href=\"https://www.processing.org/reference/colorMode_.html\">colorMode()</a>を使うことでRGBやHSBを簡単に扱うことができるが、HSLの扱い方が見つからない。そこでRGB->HSLに変換するメソッドを自作してみた。\n\n## RGBとは\n\n念のため、そもそもRGBとは何かを説明しておきたい。簡単に言えば、赤(Red)、緑(Green)、青(Blue)の混ざり具合のことで、この3原色を用いることでほぼどんな色でも表すことができる。中学の美術の教科書で色のついた円が3つ重なった画像を見かけたと思うがあれのことである。「加法混色」なので、混ざると白に近づき、真っ白は(255,255,255)で真っ黒は(0,0,0)である。\n\nProcessingではデフォルトでこのRGBにアルファ値(A)を加えたRGBAを扱うことができる。\nアルファ値とは透過度のことである。pngなどの画像を読み込むときに、その画像のアルファ値を部分的に0にすることで背景を消したりすることができる。\n\n## HSBとは\n\nこちらは、色相(Hue)、彩度(Saturation)、明度(Value・Lightness・Brightness)で表される色空間で、\n僕はRGBで色をランダムに生成したときに汚い色ばかり出てきていやだな～と思ってドキュメントを読んだら見つけた。\n\n明度がVだったりLだったりして、HSB,やHSLと呼ばれたりもする。つまり本質的には後述のHSLと同じなのだが、僕が期待するHSL空間が錐体型のモデルなのに対し、ProcessingのHSB空間はどうやら円柱型のようなのである。\nそのため、この記事ではあえて明示的にHSBとHSLを分けて書いている。\n\n## HSLとは\n\n上記の通り、HSBと同じである。ちなみに、Wikipediaで調べるとまとめてHSVに転送される。この辺の議論はネットで調べるといろんな情報が（色だけに）でてくるのであまり深く突っ込まないことにする。\n\n## RGB->HSLのメソッド\n\nここからが本題で、「Processingで扱われているRGBを錐体型のHSLに変換する」のが目的である。\n以下がプログラムの全文である。\n\n<script src=\"https://gist.github.com/salmon2073/d0aaa0373cb3f05fc7f5.js\"></script>\n\n3つ値を返したかったのでPVectorを使ったが、もっといい方法があるかもしれない。入力はRGBで、Hは0~360, S,Bは0~100の値で返ってくる。入力がfloat型になってるのはrandomで数値を代入するときにいちいちint型に直すのが面倒だったからで、リアルタイム処理などで速度を気にする場合はintで動くようにしたほうがいいかもしれない。\n\nたまっていたProcessingネタをちょっとずつ消化しているが、そろそろ他のことも書きたい。\n\n","slug":"ProcessingでHSLを扱う","published":1,"updated":"2020-05-16T07:34:05.188Z","_id":"cka9bebv4001cxgtv8imj36b9","comments":1,"layout":"post","photos":[],"link":"","content":"<p>僕の所属する研究室では顔画像を処理する研究が行われている。顔画像処理をする際には通常のRGB色空間で処理<br>するよりもHSLで処理したほうが便利なことがある（顔検出とか）。<br>Processingでは<a href=\"https://www.processing.org/reference/colorMode_.html\">colorMode()</a>を使うことでRGBやHSBを簡単に扱うことができるが、HSLの扱い方が見つからない。そこでRGB-&gt;HSLに変換するメソッドを自作してみた。</p>\n<h2 id=\"RGBとは\"><a href=\"#RGBとは\" class=\"headerlink\" title=\"RGBとは\"></a>RGBとは</h2><p>念のため、そもそもRGBとは何かを説明しておきたい。簡単に言えば、赤(Red)、緑(Green)、青(Blue)の混ざり具合のことで、この3原色を用いることでほぼどんな色でも表すことができる。中学の美術の教科書で色のついた円が3つ重なった画像を見かけたと思うがあれのことである。「加法混色」なので、混ざると白に近づき、真っ白は(255,255,255)で真っ黒は(0,0,0)である。</p>\n<p>ProcessingではデフォルトでこのRGBにアルファ値(A)を加えたRGBAを扱うことができる。<br>アルファ値とは透過度のことである。pngなどの画像を読み込むときに、その画像のアルファ値を部分的に0にすることで背景を消したりすることができる。</p>\n<h2 id=\"HSBとは\"><a href=\"#HSBとは\" class=\"headerlink\" title=\"HSBとは\"></a>HSBとは</h2><p>こちらは、色相(Hue)、彩度(Saturation)、明度(Value・Lightness・Brightness)で表される色空間で、<br>僕はRGBで色をランダムに生成したときに汚い色ばかり出てきていやだな～と思ってドキュメントを読んだら見つけた。</p>\n<p>明度がVだったりLだったりして、HSB,やHSLと呼ばれたりもする。つまり本質的には後述のHSLと同じなのだが、僕が期待するHSL空間が錐体型のモデルなのに対し、ProcessingのHSB空間はどうやら円柱型のようなのである。<br>そのため、この記事ではあえて明示的にHSBとHSLを分けて書いている。</p>\n<h2 id=\"HSLとは\"><a href=\"#HSLとは\" class=\"headerlink\" title=\"HSLとは\"></a>HSLとは</h2><p>上記の通り、HSBと同じである。ちなみに、Wikipediaで調べるとまとめてHSVに転送される。この辺の議論はネットで調べるといろんな情報が（色だけに）でてくるのであまり深く突っ込まないことにする。</p>\n<h2 id=\"RGB-gt-HSLのメソッド\"><a href=\"#RGB-gt-HSLのメソッド\" class=\"headerlink\" title=\"RGB-&gt;HSLのメソッド\"></a>RGB-&gt;HSLのメソッド</h2><p>ここからが本題で、「Processingで扱われているRGBを錐体型のHSLに変換する」のが目的である。<br>以下がプログラムの全文である。</p>\n<script src=\"https://gist.github.com/salmon2073/d0aaa0373cb3f05fc7f5.js\"></script>\n\n<p>3つ値を返したかったのでPVectorを使ったが、もっといい方法があるかもしれない。入力はRGBで、Hは0<del>360, S,Bは0</del>100の値で返ってくる。入力がfloat型になってるのはrandomで数値を代入するときにいちいちint型に直すのが面倒だったからで、リアルタイム処理などで速度を気にする場合はintで動くようにしたほうがいいかもしれない。</p>\n<p>たまっていたProcessingネタをちょっとずつ消化しているが、そろそろ他のことも書きたい。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>僕の所属する研究室では顔画像を処理する研究が行われている。顔画像処理をする際には通常のRGB色空間で処理<br>するよりもHSLで処理したほうが便利なことがある（顔検出とか）。<br>Processingでは<a href=\"https://www.processing.org/reference/colorMode_.html\">colorMode()</a>を使うことでRGBやHSBを簡単に扱うことができるが、HSLの扱い方が見つからない。そこでRGB-&gt;HSLに変換するメソッドを自作してみた。</p>\n<h2 id=\"RGBとは\"><a href=\"#RGBとは\" class=\"headerlink\" title=\"RGBとは\"></a>RGBとは</h2><p>念のため、そもそもRGBとは何かを説明しておきたい。簡単に言えば、赤(Red)、緑(Green)、青(Blue)の混ざり具合のことで、この3原色を用いることでほぼどんな色でも表すことができる。中学の美術の教科書で色のついた円が3つ重なった画像を見かけたと思うがあれのことである。「加法混色」なので、混ざると白に近づき、真っ白は(255,255,255)で真っ黒は(0,0,0)である。</p>\n<p>ProcessingではデフォルトでこのRGBにアルファ値(A)を加えたRGBAを扱うことができる。<br>アルファ値とは透過度のことである。pngなどの画像を読み込むときに、その画像のアルファ値を部分的に0にすることで背景を消したりすることができる。</p>\n<h2 id=\"HSBとは\"><a href=\"#HSBとは\" class=\"headerlink\" title=\"HSBとは\"></a>HSBとは</h2><p>こちらは、色相(Hue)、彩度(Saturation)、明度(Value・Lightness・Brightness)で表される色空間で、<br>僕はRGBで色をランダムに生成したときに汚い色ばかり出てきていやだな～と思ってドキュメントを読んだら見つけた。</p>\n<p>明度がVだったりLだったりして、HSB,やHSLと呼ばれたりもする。つまり本質的には後述のHSLと同じなのだが、僕が期待するHSL空間が錐体型のモデルなのに対し、ProcessingのHSB空間はどうやら円柱型のようなのである。<br>そのため、この記事ではあえて明示的にHSBとHSLを分けて書いている。</p>\n<h2 id=\"HSLとは\"><a href=\"#HSLとは\" class=\"headerlink\" title=\"HSLとは\"></a>HSLとは</h2><p>上記の通り、HSBと同じである。ちなみに、Wikipediaで調べるとまとめてHSVに転送される。この辺の議論はネットで調べるといろんな情報が（色だけに）でてくるのであまり深く突っ込まないことにする。</p>\n<h2 id=\"RGB-gt-HSLのメソッド\"><a href=\"#RGB-gt-HSLのメソッド\" class=\"headerlink\" title=\"RGB-&gt;HSLのメソッド\"></a>RGB-&gt;HSLのメソッド</h2><p>ここからが本題で、「Processingで扱われているRGBを錐体型のHSLに変換する」のが目的である。<br>以下がプログラムの全文である。</p>\n<script src=\"https://gist.github.com/salmon2073/d0aaa0373cb3f05fc7f5.js\"></script>\n\n<p>3つ値を返したかったのでPVectorを使ったが、もっといい方法があるかもしれない。入力はRGBで、Hは0<del>360, S,Bは0</del>100の値で返ってくる。入力がfloat型になってるのはrandomで数値を代入するときにいちいちint型に直すのが面倒だったからで、リアルタイム処理などで速度を気にする場合はintで動くようにしたほうがいいかもしれない。</p>\n<p>たまっていたProcessingネタをちょっとずつ消化しているが、そろそろ他のことも書きたい。</p>\n"},{"title":"Genymotionを起動するとエラーが出る","date":"2014-12-21T03:00:25.000Z","_content":"\n12月頃にPCを買い換えた。ちょうどAndroid Studioの1.0(正式版)がリリースされていたのでインストールしてみた。\nデフォルトのエミュレーターでは起動に時間がかかりすぎるのでGenymotionを使おうとしたのだが、いざ起動してみると\n\n```\nWarning: CPU number has been forced to 1.\n```\n\nというエラーが出た。\n\n## 解決法\n\nBIOSの設定から「Virtualization technologies」というのをenableにすればいいらしい。\n\n## BIOSの設定方法\n\nBIOSのメニューといえばPCの起動のときにファンクションキーのどれかを押して入れるものだと記憶していたのだが、windows8では違うらしい。\n「設定」->「PCの設定の変更」->「保守と管理」->「回復」と辿り、「PCの起動をカスタマイズする」の「今すぐ再起動」を選び、再起動する。\n\n<img src=\"https://salmon2073.net/wp/wp-content/img/setting2.png\">\n\n再起動すると見慣れない画面が表示される。\n「トラブルシューティング」->「詳細設定」と辿り、「UEFIファームウェアの設定」を選ぶ。\nここでも「再起動」選ぶとようやくBIOS設定画面が立ち上がる。\nここから先はBIOSによって設定方法が違うが、「Virtualization technologies」という項目を見つけてenableにすればよい。\n設定を変えたら保存することを忘れないように。\n","source":"_posts/2014-12-21-Genymotionを起動するとエラーが出る.md","raw":"---\ntitle: Genymotionを起動するとエラーが出る\ndate: 2014-12-21 12:00:25\ncategory: Android\n---\n\n12月頃にPCを買い換えた。ちょうどAndroid Studioの1.0(正式版)がリリースされていたのでインストールしてみた。\nデフォルトのエミュレーターでは起動に時間がかかりすぎるのでGenymotionを使おうとしたのだが、いざ起動してみると\n\n```\nWarning: CPU number has been forced to 1.\n```\n\nというエラーが出た。\n\n## 解決法\n\nBIOSの設定から「Virtualization technologies」というのをenableにすればいいらしい。\n\n## BIOSの設定方法\n\nBIOSのメニューといえばPCの起動のときにファンクションキーのどれかを押して入れるものだと記憶していたのだが、windows8では違うらしい。\n「設定」->「PCの設定の変更」->「保守と管理」->「回復」と辿り、「PCの起動をカスタマイズする」の「今すぐ再起動」を選び、再起動する。\n\n<img src=\"https://salmon2073.net/wp/wp-content/img/setting2.png\">\n\n再起動すると見慣れない画面が表示される。\n「トラブルシューティング」->「詳細設定」と辿り、「UEFIファームウェアの設定」を選ぶ。\nここでも「再起動」選ぶとようやくBIOS設定画面が立ち上がる。\nここから先はBIOSによって設定方法が違うが、「Virtualization technologies」という項目を見つけてenableにすればよい。\n設定を変えたら保存することを忘れないように。\n","slug":"Genymotionを起動するとエラーが出る","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bedi7001exgtv4i5ndqhw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>12月頃にPCを買い換えた。ちょうどAndroid Studioの1.0(正式版)がリリースされていたのでインストールしてみた。<br>デフォルトのエミュレーターでは起動に時間がかかりすぎるのでGenymotionを使おうとしたのだが、いざ起動してみると</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: CPU number has been forced to 1.</span><br></pre></td></tr></table></figure>\n\n<p>というエラーが出た。</p>\n<h2 id=\"解決法\"><a href=\"#解決法\" class=\"headerlink\" title=\"解決法\"></a>解決法</h2><p>BIOSの設定から「Virtualization technologies」というのをenableにすればいいらしい。</p>\n<h2 id=\"BIOSの設定方法\"><a href=\"#BIOSの設定方法\" class=\"headerlink\" title=\"BIOSの設定方法\"></a>BIOSの設定方法</h2><p>BIOSのメニューといえばPCの起動のときにファンクションキーのどれかを押して入れるものだと記憶していたのだが、windows8では違うらしい。<br>「設定」-&gt;「PCの設定の変更」-&gt;「保守と管理」-&gt;「回復」と辿り、「PCの起動をカスタマイズする」の「今すぐ再起動」を選び、再起動する。</p>\n<img src=\"https://salmon2073.net/wp/wp-content/img/setting2.png\">\n\n<p>再起動すると見慣れない画面が表示される。<br>「トラブルシューティング」-&gt;「詳細設定」と辿り、「UEFIファームウェアの設定」を選ぶ。<br>ここでも「再起動」選ぶとようやくBIOS設定画面が立ち上がる。<br>ここから先はBIOSによって設定方法が違うが、「Virtualization technologies」という項目を見つけてenableにすればよい。<br>設定を変えたら保存することを忘れないように。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>12月頃にPCを買い換えた。ちょうどAndroid Studioの1.0(正式版)がリリースされていたのでインストールしてみた。<br>デフォルトのエミュレーターでは起動に時間がかかりすぎるのでGenymotionを使おうとしたのだが、いざ起動してみると</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: CPU number has been forced to 1.</span><br></pre></td></tr></table></figure>\n\n<p>というエラーが出た。</p>\n<h2 id=\"解決法\"><a href=\"#解決法\" class=\"headerlink\" title=\"解決法\"></a>解決法</h2><p>BIOSの設定から「Virtualization technologies」というのをenableにすればいいらしい。</p>\n<h2 id=\"BIOSの設定方法\"><a href=\"#BIOSの設定方法\" class=\"headerlink\" title=\"BIOSの設定方法\"></a>BIOSの設定方法</h2><p>BIOSのメニューといえばPCの起動のときにファンクションキーのどれかを押して入れるものだと記憶していたのだが、windows8では違うらしい。<br>「設定」-&gt;「PCの設定の変更」-&gt;「保守と管理」-&gt;「回復」と辿り、「PCの起動をカスタマイズする」の「今すぐ再起動」を選び、再起動する。</p>\n<img src=\"https://salmon2073.net/wp/wp-content/img/setting2.png\">\n\n<p>再起動すると見慣れない画面が表示される。<br>「トラブルシューティング」-&gt;「詳細設定」と辿り、「UEFIファームウェアの設定」を選ぶ。<br>ここでも「再起動」選ぶとようやくBIOS設定画面が立ち上がる。<br>ここから先はBIOSによって設定方法が違うが、「Virtualization technologies」という項目を見つけてenableにすればよい。<br>設定を変えたら保存することを忘れないように。</p>\n"},{"title":"2014年を振り返って","date":"2014-12-26T15:08:22.000Z","_content":"\n今年やっていたことを振り返ってみる。\n\n## 1~2月 Processing期\n\nProcessingでJavaを書いていた。この時期は本当にそれしかできなくて、プログラミング自体よくわかっていなかった（今もだが）。\nサークルで作曲することに精を出していた。\n\n## 3~4月 Perl期\n\n春休みに大学の教授がプログラミングのアルバイトを募集していて、しかも講習会までやってくれるというので思い切って参加してみた。\nPerlの講習を受けたのでそのままPerlを使うのかと思っていたら、後々PHPやjsなどもやることになった。「作ったサイトの見た目を何とかして」と言われてhtml/cssもやった。これがweb系を勉強するきっかけになった。\n\nサーバーという概念さえこのとき初めて知ったので、sshやftpについて調べるのに苦労した。\n結構いろいろ詰め込まれて、正規表現や形態素解析、データベースといった技術も勉強することができた。\nGoogleChartを利用してみたり、jqueryUIのカレンダーをカスタマイズしてみたりと、今思えばあの状態でよくこなせたなと思う。\nというかブラックじゃないか（ありがとうございました）。\n\nちなみに、この時期は主食が明大マートで売ってる「ローストチキンのサラダ」だったのでアルバイトが終わる頃には3kgくらい痩せていた。\n\n## 5月 マイクラ期\n\nゴールデンウィークに友人からMinecraft（以下マイクラ）を教えてもらった。今年はこのゲームにかなりハマった。\n内容がめちゃくちゃ面白いというのもあるのだが、自分でサーバーを建ててワールドを作れるというところに興味をひかれた。\n\n春休みバイトをしたときに、「自分のサーバーがあったら便利だろうな」と思っていたので調べてみたら、自宅に構築しなくても使えるvpsというものがあると分かった。\n結果「さくらのvps」と契約することになり、無事にマイクラサーバーを建てることができた。\nもちろん他の様々な用途（このサイトなど）にも大変便利に使っている。\n\n他には、スマホ開発にも手を出していた。Macを持っていないのといきなりjavaで開発は難しそうだったので、html/css/jsで開発できる「Monaca」というサービスを利用した。友人（マイクラを教えてくれた人とは別）と組んで「HTML5 Japan Cup」に出してみた。\n\n## 6~7月 信号処理期\n\n学校の授業では信号処理系のことをやる機会が多くなっていた。研究室もそういう系のところだったので画像処理や音声処理の勉強をした。クロスプロセスとかやっていたのもこの頃である。\n\nいろんな言語を扱うweb系に手を出していたおかげで、cとかjavaとか出されてもわりとついていけた。逆にそれがなければCygwinあたりで挫折していたんじゃないだろうか。自分のPCでできないMATLABはつらかった。\n\n夏休み前に友人が「Raspberry Pi」を買ったので1からサーバーを立ち上げるお手伝いをした。これが予想以上に勉強になって、linux系osに対して免疫がついてきた。\n\n## 夏休み~11月 ハッカソン参加期\n\n夏休みに入ったところでアウトプットする場が欲しくなってきたので、ブログやイベント参加を積極的にやることにした。\n去年はじめたはてなブログを再開しようと思ったが、せっかくvpsを借りているのでWordPressをやってみることにした。\nというわけでできたのがこのサイトである。\n\n以前の記事でも書いたが、イベント参加をするにあたって「意識中くらい」というチームを組んだ。ネーミングはやる気があるとかないとかそういう意味ではない。\n意識中くらいで作ったものはほとんどがwebサービスで、ここでもバイトの経験とvpsが大活躍した。jsを使いこなすためにwebAPIとajaxについても勉強した。\n\nモバイル開発をする機会があったので、Monacaだけでなくネイティブ言語での開発にも挑戦してみた。状況によって使い分けられるようになりたい。\n\n個人でもアイディアソンとかハッカソンに参加してみた。そのたびに「自分が行っても大丈夫なんだろうか…」と不安もあったが、意外となんとかなった。\nコンテストなどに参加すると、他校の人や技術者、美大生といった人たちと話すことができて有意義だった。\n\nこの頃に「マイクラのComputerCraftってどうなの？」とつぶやいている先生がいたのでやってみた。Luaという言語を使ったプログラミングがマイクラ内でできるようになるmod（拡張）で、遊びながらプログラミングを学ぶことができる。Luaは一言でいうと「あっさり」してて、とても好感の持てる言語だった。ComputerCraft以外にもサーバーのログを解析するプログラムをLuaで組んでみたりした。\n\n## 12月 現在（振り返り期）\n\n今である。\n興味本位でVSTとかOculus Riftとかの開発をやっている。これらは来年に持ち越しだろう。\n\n今は来年なにしようかな～と考え中で、もやもやと過ごしている。\n初心者らしく言語に関していうなら、いまだに手ごろなプロトタイピングをProcessingで行っているのでそろそろ汎用スクリプト言語を勉強して使えるようになりたいと思う。2ヶ月くらいPython or Ruby問題で悩んでいたが、学内の強い人たちの意見も聞いてみてPython3でいくことにした。\n\nとはいえ大事なのはどの分野をやるかで、これ本当に悩んでいる。自分がやったことない分野（機械学習、セキュリティ、数理モデルなど）をやってる人が身近に結構いるので、アドバイスをもらう相手には困らないのだけど。\n\n悩んでいることといえば、今は何か開発し始めたら開発し終わった段階で終わっているのだが、たまに「もうちょっと改良して運用とかしないの？」みたいなフィードバックをもらうことがある。これを真に受けてスタートアップして起業…とはいかないまでも、実際に人に使ってもらうところまでやってみたほうがいいのだろうか。\n\nあとは収入先を何とかしたい。最近コンビニバイトをしてる時間がすごくもったいないと感じるようになってきて、なるべくシフトを減らすようにしているのだが、そうすると今度はお金が足りなくなってしまうので困り者である。\n\n## まとめ\n\n今年は大学に慣れてきたというのもあって去年の数倍いろんなことに手を出すことができた。来年は上記の問題を解決して、より活発にアウトプットをしていきたい。\n\nEXCERPT:\n今年やっていたことを振り返ってみる。\n\n","source":"_posts/2014-12-27-2014年を振り返って.md","raw":"---\ntitle: 2014年を振り返って\ndate: 2014-12-27 00:08:22\ncategory: 日記\n---\n\n今年やっていたことを振り返ってみる。\n\n## 1~2月 Processing期\n\nProcessingでJavaを書いていた。この時期は本当にそれしかできなくて、プログラミング自体よくわかっていなかった（今もだが）。\nサークルで作曲することに精を出していた。\n\n## 3~4月 Perl期\n\n春休みに大学の教授がプログラミングのアルバイトを募集していて、しかも講習会までやってくれるというので思い切って参加してみた。\nPerlの講習を受けたのでそのままPerlを使うのかと思っていたら、後々PHPやjsなどもやることになった。「作ったサイトの見た目を何とかして」と言われてhtml/cssもやった。これがweb系を勉強するきっかけになった。\n\nサーバーという概念さえこのとき初めて知ったので、sshやftpについて調べるのに苦労した。\n結構いろいろ詰め込まれて、正規表現や形態素解析、データベースといった技術も勉強することができた。\nGoogleChartを利用してみたり、jqueryUIのカレンダーをカスタマイズしてみたりと、今思えばあの状態でよくこなせたなと思う。\nというかブラックじゃないか（ありがとうございました）。\n\nちなみに、この時期は主食が明大マートで売ってる「ローストチキンのサラダ」だったのでアルバイトが終わる頃には3kgくらい痩せていた。\n\n## 5月 マイクラ期\n\nゴールデンウィークに友人からMinecraft（以下マイクラ）を教えてもらった。今年はこのゲームにかなりハマった。\n内容がめちゃくちゃ面白いというのもあるのだが、自分でサーバーを建ててワールドを作れるというところに興味をひかれた。\n\n春休みバイトをしたときに、「自分のサーバーがあったら便利だろうな」と思っていたので調べてみたら、自宅に構築しなくても使えるvpsというものがあると分かった。\n結果「さくらのvps」と契約することになり、無事にマイクラサーバーを建てることができた。\nもちろん他の様々な用途（このサイトなど）にも大変便利に使っている。\n\n他には、スマホ開発にも手を出していた。Macを持っていないのといきなりjavaで開発は難しそうだったので、html/css/jsで開発できる「Monaca」というサービスを利用した。友人（マイクラを教えてくれた人とは別）と組んで「HTML5 Japan Cup」に出してみた。\n\n## 6~7月 信号処理期\n\n学校の授業では信号処理系のことをやる機会が多くなっていた。研究室もそういう系のところだったので画像処理や音声処理の勉強をした。クロスプロセスとかやっていたのもこの頃である。\n\nいろんな言語を扱うweb系に手を出していたおかげで、cとかjavaとか出されてもわりとついていけた。逆にそれがなければCygwinあたりで挫折していたんじゃないだろうか。自分のPCでできないMATLABはつらかった。\n\n夏休み前に友人が「Raspberry Pi」を買ったので1からサーバーを立ち上げるお手伝いをした。これが予想以上に勉強になって、linux系osに対して免疫がついてきた。\n\n## 夏休み~11月 ハッカソン参加期\n\n夏休みに入ったところでアウトプットする場が欲しくなってきたので、ブログやイベント参加を積極的にやることにした。\n去年はじめたはてなブログを再開しようと思ったが、せっかくvpsを借りているのでWordPressをやってみることにした。\nというわけでできたのがこのサイトである。\n\n以前の記事でも書いたが、イベント参加をするにあたって「意識中くらい」というチームを組んだ。ネーミングはやる気があるとかないとかそういう意味ではない。\n意識中くらいで作ったものはほとんどがwebサービスで、ここでもバイトの経験とvpsが大活躍した。jsを使いこなすためにwebAPIとajaxについても勉強した。\n\nモバイル開発をする機会があったので、Monacaだけでなくネイティブ言語での開発にも挑戦してみた。状況によって使い分けられるようになりたい。\n\n個人でもアイディアソンとかハッカソンに参加してみた。そのたびに「自分が行っても大丈夫なんだろうか…」と不安もあったが、意外となんとかなった。\nコンテストなどに参加すると、他校の人や技術者、美大生といった人たちと話すことができて有意義だった。\n\nこの頃に「マイクラのComputerCraftってどうなの？」とつぶやいている先生がいたのでやってみた。Luaという言語を使ったプログラミングがマイクラ内でできるようになるmod（拡張）で、遊びながらプログラミングを学ぶことができる。Luaは一言でいうと「あっさり」してて、とても好感の持てる言語だった。ComputerCraft以外にもサーバーのログを解析するプログラムをLuaで組んでみたりした。\n\n## 12月 現在（振り返り期）\n\n今である。\n興味本位でVSTとかOculus Riftとかの開発をやっている。これらは来年に持ち越しだろう。\n\n今は来年なにしようかな～と考え中で、もやもやと過ごしている。\n初心者らしく言語に関していうなら、いまだに手ごろなプロトタイピングをProcessingで行っているのでそろそろ汎用スクリプト言語を勉強して使えるようになりたいと思う。2ヶ月くらいPython or Ruby問題で悩んでいたが、学内の強い人たちの意見も聞いてみてPython3でいくことにした。\n\nとはいえ大事なのはどの分野をやるかで、これ本当に悩んでいる。自分がやったことない分野（機械学習、セキュリティ、数理モデルなど）をやってる人が身近に結構いるので、アドバイスをもらう相手には困らないのだけど。\n\n悩んでいることといえば、今は何か開発し始めたら開発し終わった段階で終わっているのだが、たまに「もうちょっと改良して運用とかしないの？」みたいなフィードバックをもらうことがある。これを真に受けてスタートアップして起業…とはいかないまでも、実際に人に使ってもらうところまでやってみたほうがいいのだろうか。\n\nあとは収入先を何とかしたい。最近コンビニバイトをしてる時間がすごくもったいないと感じるようになってきて、なるべくシフトを減らすようにしているのだが、そうすると今度はお金が足りなくなってしまうので困り者である。\n\n## まとめ\n\n今年は大学に慣れてきたというのもあって去年の数倍いろんなことに手を出すことができた。来年は上記の問題を解決して、より活発にアウトプットをしていきたい。\n\nEXCERPT:\n今年やっていたことを振り返ってみる。\n\n","slug":"2014年を振り返って","published":1,"updated":"2020-05-16T07:34:09.125Z","_id":"cka9beezc001hxgtv2awqawnr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今年やっていたことを振り返ってみる。</p>\n<h2 id=\"1-2月-Processing期\"><a href=\"#1-2月-Processing期\" class=\"headerlink\" title=\"1~2月 Processing期\"></a>1~2月 Processing期</h2><p>ProcessingでJavaを書いていた。この時期は本当にそれしかできなくて、プログラミング自体よくわかっていなかった（今もだが）。<br>サークルで作曲することに精を出していた。</p>\n<h2 id=\"3-4月-Perl期\"><a href=\"#3-4月-Perl期\" class=\"headerlink\" title=\"3~4月 Perl期\"></a>3~4月 Perl期</h2><p>春休みに大学の教授がプログラミングのアルバイトを募集していて、しかも講習会までやってくれるというので思い切って参加してみた。<br>Perlの講習を受けたのでそのままPerlを使うのかと思っていたら、後々PHPやjsなどもやることになった。「作ったサイトの見た目を何とかして」と言われてhtml/cssもやった。これがweb系を勉強するきっかけになった。</p>\n<p>サーバーという概念さえこのとき初めて知ったので、sshやftpについて調べるのに苦労した。<br>結構いろいろ詰め込まれて、正規表現や形態素解析、データベースといった技術も勉強することができた。<br>GoogleChartを利用してみたり、jqueryUIのカレンダーをカスタマイズしてみたりと、今思えばあの状態でよくこなせたなと思う。<br>というかブラックじゃないか（ありがとうございました）。</p>\n<p>ちなみに、この時期は主食が明大マートで売ってる「ローストチキンのサラダ」だったのでアルバイトが終わる頃には3kgくらい痩せていた。</p>\n<h2 id=\"5月-マイクラ期\"><a href=\"#5月-マイクラ期\" class=\"headerlink\" title=\"5月 マイクラ期\"></a>5月 マイクラ期</h2><p>ゴールデンウィークに友人からMinecraft（以下マイクラ）を教えてもらった。今年はこのゲームにかなりハマった。<br>内容がめちゃくちゃ面白いというのもあるのだが、自分でサーバーを建ててワールドを作れるというところに興味をひかれた。</p>\n<p>春休みバイトをしたときに、「自分のサーバーがあったら便利だろうな」と思っていたので調べてみたら、自宅に構築しなくても使えるvpsというものがあると分かった。<br>結果「さくらのvps」と契約することになり、無事にマイクラサーバーを建てることができた。<br>もちろん他の様々な用途（このサイトなど）にも大変便利に使っている。</p>\n<p>他には、スマホ開発にも手を出していた。Macを持っていないのといきなりjavaで開発は難しそうだったので、html/css/jsで開発できる「Monaca」というサービスを利用した。友人（マイクラを教えてくれた人とは別）と組んで「HTML5 Japan Cup」に出してみた。</p>\n<h2 id=\"6-7月-信号処理期\"><a href=\"#6-7月-信号処理期\" class=\"headerlink\" title=\"6~7月 信号処理期\"></a>6~7月 信号処理期</h2><p>学校の授業では信号処理系のことをやる機会が多くなっていた。研究室もそういう系のところだったので画像処理や音声処理の勉強をした。クロスプロセスとかやっていたのもこの頃である。</p>\n<p>いろんな言語を扱うweb系に手を出していたおかげで、cとかjavaとか出されてもわりとついていけた。逆にそれがなければCygwinあたりで挫折していたんじゃないだろうか。自分のPCでできないMATLABはつらかった。</p>\n<p>夏休み前に友人が「Raspberry Pi」を買ったので1からサーバーを立ち上げるお手伝いをした。これが予想以上に勉強になって、linux系osに対して免疫がついてきた。</p>\n<h2 id=\"夏休み-11月-ハッカソン参加期\"><a href=\"#夏休み-11月-ハッカソン参加期\" class=\"headerlink\" title=\"夏休み~11月 ハッカソン参加期\"></a>夏休み~11月 ハッカソン参加期</h2><p>夏休みに入ったところでアウトプットする場が欲しくなってきたので、ブログやイベント参加を積極的にやることにした。<br>去年はじめたはてなブログを再開しようと思ったが、せっかくvpsを借りているのでWordPressをやってみることにした。<br>というわけでできたのがこのサイトである。</p>\n<p>以前の記事でも書いたが、イベント参加をするにあたって「意識中くらい」というチームを組んだ。ネーミングはやる気があるとかないとかそういう意味ではない。<br>意識中くらいで作ったものはほとんどがwebサービスで、ここでもバイトの経験とvpsが大活躍した。jsを使いこなすためにwebAPIとajaxについても勉強した。</p>\n<p>モバイル開発をする機会があったので、Monacaだけでなくネイティブ言語での開発にも挑戦してみた。状況によって使い分けられるようになりたい。</p>\n<p>個人でもアイディアソンとかハッカソンに参加してみた。そのたびに「自分が行っても大丈夫なんだろうか…」と不安もあったが、意外となんとかなった。<br>コンテストなどに参加すると、他校の人や技術者、美大生といった人たちと話すことができて有意義だった。</p>\n<p>この頃に「マイクラのComputerCraftってどうなの？」とつぶやいている先生がいたのでやってみた。Luaという言語を使ったプログラミングがマイクラ内でできるようになるmod（拡張）で、遊びながらプログラミングを学ぶことができる。Luaは一言でいうと「あっさり」してて、とても好感の持てる言語だった。ComputerCraft以外にもサーバーのログを解析するプログラムをLuaで組んでみたりした。</p>\n<h2 id=\"12月-現在（振り返り期）\"><a href=\"#12月-現在（振り返り期）\" class=\"headerlink\" title=\"12月 現在（振り返り期）\"></a>12月 現在（振り返り期）</h2><p>今である。<br>興味本位でVSTとかOculus Riftとかの開発をやっている。これらは来年に持ち越しだろう。</p>\n<p>今は来年なにしようかな～と考え中で、もやもやと過ごしている。<br>初心者らしく言語に関していうなら、いまだに手ごろなプロトタイピングをProcessingで行っているのでそろそろ汎用スクリプト言語を勉強して使えるようになりたいと思う。2ヶ月くらいPython or Ruby問題で悩んでいたが、学内の強い人たちの意見も聞いてみてPython3でいくことにした。</p>\n<p>とはいえ大事なのはどの分野をやるかで、これ本当に悩んでいる。自分がやったことない分野（機械学習、セキュリティ、数理モデルなど）をやってる人が身近に結構いるので、アドバイスをもらう相手には困らないのだけど。</p>\n<p>悩んでいることといえば、今は何か開発し始めたら開発し終わった段階で終わっているのだが、たまに「もうちょっと改良して運用とかしないの？」みたいなフィードバックをもらうことがある。これを真に受けてスタートアップして起業…とはいかないまでも、実際に人に使ってもらうところまでやってみたほうがいいのだろうか。</p>\n<p>あとは収入先を何とかしたい。最近コンビニバイトをしてる時間がすごくもったいないと感じるようになってきて、なるべくシフトを減らすようにしているのだが、そうすると今度はお金が足りなくなってしまうので困り者である。</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>今年は大学に慣れてきたというのもあって去年の数倍いろんなことに手を出すことができた。来年は上記の問題を解決して、より活発にアウトプットをしていきたい。</p>\n<p>EXCERPT:<br>今年やっていたことを振り返ってみる。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年やっていたことを振り返ってみる。</p>\n<h2 id=\"1-2月-Processing期\"><a href=\"#1-2月-Processing期\" class=\"headerlink\" title=\"1~2月 Processing期\"></a>1~2月 Processing期</h2><p>ProcessingでJavaを書いていた。この時期は本当にそれしかできなくて、プログラミング自体よくわかっていなかった（今もだが）。<br>サークルで作曲することに精を出していた。</p>\n<h2 id=\"3-4月-Perl期\"><a href=\"#3-4月-Perl期\" class=\"headerlink\" title=\"3~4月 Perl期\"></a>3~4月 Perl期</h2><p>春休みに大学の教授がプログラミングのアルバイトを募集していて、しかも講習会までやってくれるというので思い切って参加してみた。<br>Perlの講習を受けたのでそのままPerlを使うのかと思っていたら、後々PHPやjsなどもやることになった。「作ったサイトの見た目を何とかして」と言われてhtml/cssもやった。これがweb系を勉強するきっかけになった。</p>\n<p>サーバーという概念さえこのとき初めて知ったので、sshやftpについて調べるのに苦労した。<br>結構いろいろ詰め込まれて、正規表現や形態素解析、データベースといった技術も勉強することができた。<br>GoogleChartを利用してみたり、jqueryUIのカレンダーをカスタマイズしてみたりと、今思えばあの状態でよくこなせたなと思う。<br>というかブラックじゃないか（ありがとうございました）。</p>\n<p>ちなみに、この時期は主食が明大マートで売ってる「ローストチキンのサラダ」だったのでアルバイトが終わる頃には3kgくらい痩せていた。</p>\n<h2 id=\"5月-マイクラ期\"><a href=\"#5月-マイクラ期\" class=\"headerlink\" title=\"5月 マイクラ期\"></a>5月 マイクラ期</h2><p>ゴールデンウィークに友人からMinecraft（以下マイクラ）を教えてもらった。今年はこのゲームにかなりハマった。<br>内容がめちゃくちゃ面白いというのもあるのだが、自分でサーバーを建ててワールドを作れるというところに興味をひかれた。</p>\n<p>春休みバイトをしたときに、「自分のサーバーがあったら便利だろうな」と思っていたので調べてみたら、自宅に構築しなくても使えるvpsというものがあると分かった。<br>結果「さくらのvps」と契約することになり、無事にマイクラサーバーを建てることができた。<br>もちろん他の様々な用途（このサイトなど）にも大変便利に使っている。</p>\n<p>他には、スマホ開発にも手を出していた。Macを持っていないのといきなりjavaで開発は難しそうだったので、html/css/jsで開発できる「Monaca」というサービスを利用した。友人（マイクラを教えてくれた人とは別）と組んで「HTML5 Japan Cup」に出してみた。</p>\n<h2 id=\"6-7月-信号処理期\"><a href=\"#6-7月-信号処理期\" class=\"headerlink\" title=\"6~7月 信号処理期\"></a>6~7月 信号処理期</h2><p>学校の授業では信号処理系のことをやる機会が多くなっていた。研究室もそういう系のところだったので画像処理や音声処理の勉強をした。クロスプロセスとかやっていたのもこの頃である。</p>\n<p>いろんな言語を扱うweb系に手を出していたおかげで、cとかjavaとか出されてもわりとついていけた。逆にそれがなければCygwinあたりで挫折していたんじゃないだろうか。自分のPCでできないMATLABはつらかった。</p>\n<p>夏休み前に友人が「Raspberry Pi」を買ったので1からサーバーを立ち上げるお手伝いをした。これが予想以上に勉強になって、linux系osに対して免疫がついてきた。</p>\n<h2 id=\"夏休み-11月-ハッカソン参加期\"><a href=\"#夏休み-11月-ハッカソン参加期\" class=\"headerlink\" title=\"夏休み~11月 ハッカソン参加期\"></a>夏休み~11月 ハッカソン参加期</h2><p>夏休みに入ったところでアウトプットする場が欲しくなってきたので、ブログやイベント参加を積極的にやることにした。<br>去年はじめたはてなブログを再開しようと思ったが、せっかくvpsを借りているのでWordPressをやってみることにした。<br>というわけでできたのがこのサイトである。</p>\n<p>以前の記事でも書いたが、イベント参加をするにあたって「意識中くらい」というチームを組んだ。ネーミングはやる気があるとかないとかそういう意味ではない。<br>意識中くらいで作ったものはほとんどがwebサービスで、ここでもバイトの経験とvpsが大活躍した。jsを使いこなすためにwebAPIとajaxについても勉強した。</p>\n<p>モバイル開発をする機会があったので、Monacaだけでなくネイティブ言語での開発にも挑戦してみた。状況によって使い分けられるようになりたい。</p>\n<p>個人でもアイディアソンとかハッカソンに参加してみた。そのたびに「自分が行っても大丈夫なんだろうか…」と不安もあったが、意外となんとかなった。<br>コンテストなどに参加すると、他校の人や技術者、美大生といった人たちと話すことができて有意義だった。</p>\n<p>この頃に「マイクラのComputerCraftってどうなの？」とつぶやいている先生がいたのでやってみた。Luaという言語を使ったプログラミングがマイクラ内でできるようになるmod（拡張）で、遊びながらプログラミングを学ぶことができる。Luaは一言でいうと「あっさり」してて、とても好感の持てる言語だった。ComputerCraft以外にもサーバーのログを解析するプログラムをLuaで組んでみたりした。</p>\n<h2 id=\"12月-現在（振り返り期）\"><a href=\"#12月-現在（振り返り期）\" class=\"headerlink\" title=\"12月 現在（振り返り期）\"></a>12月 現在（振り返り期）</h2><p>今である。<br>興味本位でVSTとかOculus Riftとかの開発をやっている。これらは来年に持ち越しだろう。</p>\n<p>今は来年なにしようかな～と考え中で、もやもやと過ごしている。<br>初心者らしく言語に関していうなら、いまだに手ごろなプロトタイピングをProcessingで行っているのでそろそろ汎用スクリプト言語を勉強して使えるようになりたいと思う。2ヶ月くらいPython or Ruby問題で悩んでいたが、学内の強い人たちの意見も聞いてみてPython3でいくことにした。</p>\n<p>とはいえ大事なのはどの分野をやるかで、これ本当に悩んでいる。自分がやったことない分野（機械学習、セキュリティ、数理モデルなど）をやってる人が身近に結構いるので、アドバイスをもらう相手には困らないのだけど。</p>\n<p>悩んでいることといえば、今は何か開発し始めたら開発し終わった段階で終わっているのだが、たまに「もうちょっと改良して運用とかしないの？」みたいなフィードバックをもらうことがある。これを真に受けてスタートアップして起業…とはいかないまでも、実際に人に使ってもらうところまでやってみたほうがいいのだろうか。</p>\n<p>あとは収入先を何とかしたい。最近コンビニバイトをしてる時間がすごくもったいないと感じるようになってきて、なるべくシフトを減らすようにしているのだが、そうすると今度はお金が足りなくなってしまうので困り者である。</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>今年は大学に慣れてきたというのもあって去年の数倍いろんなことに手を出すことができた。来年は上記の問題を解決して、より活発にアウトプットをしていきたい。</p>\n<p>EXCERPT:<br>今年やっていたことを振り返ってみる。</p>\n"},{"title":"本配属が決まったので","date":"2015-03-29T03:20:27.000Z","_content":"\nFMSでは在学中に研究室を変える機会が2回ある。1年次は仮配属としてランダムに、2年次はプレ配属としてGPAをもとに、そして3年からは本配属として先生ごとに違う評価基準をもとに研究室に配属する。そのうちの本配属にあたる配属発表が3/25に行われたのだが、自分は第一志望の宮下研に配属することになった。嬉しい。\n\n宮下研は競争率が高く、自分よりGPAが高い人たちが何人も志望していたので実はダメ元だった。\nとはいえ、ギリギリ滑り込んだからには何かやってやろう思っている。\nメンバーはチーム「意識中くらい」とかなり被っているので意見交換が非常にやりやすい。日常生活の中で自然に「こんなことをやってみたい」という話ができるのはとても楽しくて、それが本当に「やってみよう」という方向に向かうこともある。\n\n今やりたいことは、1年次から敬遠してきた3Dプリンタとレーザーカッターを活用することである。\nこれらをまるで普通のプリンター同様に使いこなせるようになることが目標。更には、作りたいものを思いついたらすぐにアウトプットできるようなソフトウェアを開発してみたいと思っている。プログラミング言語がツールにすぎないのと同じように3Dプリンタもツールとして使い始めてからが本番だと思うのでちゃんと活用したい。\n\nまた、「自分発」の研究や開発を多くやりたい。\n2年は勉強の割合が多く、ゼミも先生から教えを受けてそれをそのまま実装することが多かった。もちろんはみ出したこともいくつかやったが、3年ではもっと色濃くやっていきたい。\n\n","source":"_posts/2015-03-29-本配属が決まったので.md","raw":"---\ntitle: 本配属が決まったので\ndate: 2015-03-29 12:20:27\ncategory: 日記\n---\n\nFMSでは在学中に研究室を変える機会が2回ある。1年次は仮配属としてランダムに、2年次はプレ配属としてGPAをもとに、そして3年からは本配属として先生ごとに違う評価基準をもとに研究室に配属する。そのうちの本配属にあたる配属発表が3/25に行われたのだが、自分は第一志望の宮下研に配属することになった。嬉しい。\n\n宮下研は競争率が高く、自分よりGPAが高い人たちが何人も志望していたので実はダメ元だった。\nとはいえ、ギリギリ滑り込んだからには何かやってやろう思っている。\nメンバーはチーム「意識中くらい」とかなり被っているので意見交換が非常にやりやすい。日常生活の中で自然に「こんなことをやってみたい」という話ができるのはとても楽しくて、それが本当に「やってみよう」という方向に向かうこともある。\n\n今やりたいことは、1年次から敬遠してきた3Dプリンタとレーザーカッターを活用することである。\nこれらをまるで普通のプリンター同様に使いこなせるようになることが目標。更には、作りたいものを思いついたらすぐにアウトプットできるようなソフトウェアを開発してみたいと思っている。プログラミング言語がツールにすぎないのと同じように3Dプリンタもツールとして使い始めてからが本番だと思うのでちゃんと活用したい。\n\nまた、「自分発」の研究や開発を多くやりたい。\n2年は勉強の割合が多く、ゼミも先生から教えを受けてそれをそのまま実装することが多かった。もちろんはみ出したこともいくつかやったが、3年ではもっと色濃くやっていきたい。\n\n","slug":"本配属が決まったので","published":1,"updated":"2020-05-16T07:34:10.968Z","_id":"cka9begbn001jxgtv9zrd4y36","comments":1,"layout":"post","photos":[],"link":"","content":"<p>FMSでは在学中に研究室を変える機会が2回ある。1年次は仮配属としてランダムに、2年次はプレ配属としてGPAをもとに、そして3年からは本配属として先生ごとに違う評価基準をもとに研究室に配属する。そのうちの本配属にあたる配属発表が3/25に行われたのだが、自分は第一志望の宮下研に配属することになった。嬉しい。</p>\n<p>宮下研は競争率が高く、自分よりGPAが高い人たちが何人も志望していたので実はダメ元だった。<br>とはいえ、ギリギリ滑り込んだからには何かやってやろう思っている。<br>メンバーはチーム「意識中くらい」とかなり被っているので意見交換が非常にやりやすい。日常生活の中で自然に「こんなことをやってみたい」という話ができるのはとても楽しくて、それが本当に「やってみよう」という方向に向かうこともある。</p>\n<p>今やりたいことは、1年次から敬遠してきた3Dプリンタとレーザーカッターを活用することである。<br>これらをまるで普通のプリンター同様に使いこなせるようになることが目標。更には、作りたいものを思いついたらすぐにアウトプットできるようなソフトウェアを開発してみたいと思っている。プログラミング言語がツールにすぎないのと同じように3Dプリンタもツールとして使い始めてからが本番だと思うのでちゃんと活用したい。</p>\n<p>また、「自分発」の研究や開発を多くやりたい。<br>2年は勉強の割合が多く、ゼミも先生から教えを受けてそれをそのまま実装することが多かった。もちろんはみ出したこともいくつかやったが、3年ではもっと色濃くやっていきたい。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>FMSでは在学中に研究室を変える機会が2回ある。1年次は仮配属としてランダムに、2年次はプレ配属としてGPAをもとに、そして3年からは本配属として先生ごとに違う評価基準をもとに研究室に配属する。そのうちの本配属にあたる配属発表が3/25に行われたのだが、自分は第一志望の宮下研に配属することになった。嬉しい。</p>\n<p>宮下研は競争率が高く、自分よりGPAが高い人たちが何人も志望していたので実はダメ元だった。<br>とはいえ、ギリギリ滑り込んだからには何かやってやろう思っている。<br>メンバーはチーム「意識中くらい」とかなり被っているので意見交換が非常にやりやすい。日常生活の中で自然に「こんなことをやってみたい」という話ができるのはとても楽しくて、それが本当に「やってみよう」という方向に向かうこともある。</p>\n<p>今やりたいことは、1年次から敬遠してきた3Dプリンタとレーザーカッターを活用することである。<br>これらをまるで普通のプリンター同様に使いこなせるようになることが目標。更には、作りたいものを思いついたらすぐにアウトプットできるようなソフトウェアを開発してみたいと思っている。プログラミング言語がツールにすぎないのと同じように3Dプリンタもツールとして使い始めてからが本番だと思うのでちゃんと活用したい。</p>\n<p>また、「自分発」の研究や開発を多くやりたい。<br>2年は勉強の割合が多く、ゼミも先生から教えを受けてそれをそのまま実装することが多かった。もちろんはみ出したこともいくつかやったが、3年ではもっと色濃くやっていきたい。</p>\n"},{"title":"Wordpressのパーマリンク変更でリンク切れになった","date":"2015-03-30T01:52:47.000Z","_content":"\n最近このサイトのテーマを変更した。シンプルで好みである。\n\n## パーマリンクを変更したらエラーになった\n\nテーマの変更に伴って前から気になっていたパーマリンクの設定をしておこうということになった。\n以前までは\n<a href=\"https://salmon2073.net?p=xxx\">https://salmon2073.net?p=xxx</a>\nだったのだが、これはイマイチかっこ悪い。あと、SNSでリンクを共有したりするときにアドレスからだいたいどんなことを書いているのか分かったほうがいいだろうと思ったので、\n\nhttp;//salmon2073.net/%postname%\n\nのような形にすることにした。\n\nところが、いざ設定してみると記事のページがリンク切れになってしまった。\n検索してみたところ理由はリダイレクトの設定がきちんとできてないことらしく、プラグインを導入することで解決できるそうだ。\n試しに紹介されている「Permalink Redirect」というプラグインを導入してみたがどうも解決しない…　どうやら.htaccessが悪さをしているようだがよく分からない。\n仕方なく前の記事は諦めて新しい記事を作ってみたのだが、下書き中のプレビューはできるのに公開して確認してみるとリンク切れになっていた。\n\n## 原因はApacheのモジュールだった\n\nここで原因はApacheにあるのではないかと思いついた。\n改めて調べてみると、「Rewrite」というモジュールが有効になってないのではないかとのこと。\nそこでターミナルから、\n\n```\nsudo a2enmod rewrite\nsudo service apache2 restart\n```\n\nとしたら解決した。\nちなみに自分の環境はUbuntuの14.04amd64で、さくらのvpsの2Gプランを借りて使っている。\n\n","source":"_posts/2015-03-30-Wordpressのパーマリンク変更でリンク切れになった.md","raw":"---\ntitle: Wordpressのパーマリンク変更でリンク切れになった\ndate: 2015-03-30 10:52:47\ncategory: Wordpress\n---\n\n最近このサイトのテーマを変更した。シンプルで好みである。\n\n## パーマリンクを変更したらエラーになった\n\nテーマの変更に伴って前から気になっていたパーマリンクの設定をしておこうということになった。\n以前までは\n<a href=\"https://salmon2073.net?p=xxx\">https://salmon2073.net?p=xxx</a>\nだったのだが、これはイマイチかっこ悪い。あと、SNSでリンクを共有したりするときにアドレスからだいたいどんなことを書いているのか分かったほうがいいだろうと思ったので、\n\nhttp;//salmon2073.net/%postname%\n\nのような形にすることにした。\n\nところが、いざ設定してみると記事のページがリンク切れになってしまった。\n検索してみたところ理由はリダイレクトの設定がきちんとできてないことらしく、プラグインを導入することで解決できるそうだ。\n試しに紹介されている「Permalink Redirect」というプラグインを導入してみたがどうも解決しない…　どうやら.htaccessが悪さをしているようだがよく分からない。\n仕方なく前の記事は諦めて新しい記事を作ってみたのだが、下書き中のプレビューはできるのに公開して確認してみるとリンク切れになっていた。\n\n## 原因はApacheのモジュールだった\n\nここで原因はApacheにあるのではないかと思いついた。\n改めて調べてみると、「Rewrite」というモジュールが有効になってないのではないかとのこと。\nそこでターミナルから、\n\n```\nsudo a2enmod rewrite\nsudo service apache2 restart\n```\n\nとしたら解決した。\nちなみに自分の環境はUbuntuの14.04amd64で、さくらのvpsの2Gプランを借りて使っている。\n\n","slug":"Wordpressのパーマリンク変更でリンク切れになった","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bei8k001lxgtv4jgye86y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近このサイトのテーマを変更した。シンプルで好みである。</p>\n<h2 id=\"パーマリンクを変更したらエラーになった\"><a href=\"#パーマリンクを変更したらエラーになった\" class=\"headerlink\" title=\"パーマリンクを変更したらエラーになった\"></a>パーマリンクを変更したらエラーになった</h2><p>テーマの変更に伴って前から気になっていたパーマリンクの設定をしておこうということになった。<br>以前までは<br><a href=\"https://salmon2073.net?p=xxx\">https://salmon2073.net?p=xxx</a><br>だったのだが、これはイマイチかっこ悪い。あと、SNSでリンクを共有したりするときにアドレスからだいたいどんなことを書いているのか分かったほうがいいだろうと思ったので、</p>\n<p>http;//salmon2073.net/%postname%</p>\n<p>のような形にすることにした。</p>\n<p>ところが、いざ設定してみると記事のページがリンク切れになってしまった。<br>検索してみたところ理由はリダイレクトの設定がきちんとできてないことらしく、プラグインを導入することで解決できるそうだ。<br>試しに紹介されている「Permalink Redirect」というプラグインを導入してみたがどうも解決しない…　どうやら.htaccessが悪さをしているようだがよく分からない。<br>仕方なく前の記事は諦めて新しい記事を作ってみたのだが、下書き中のプレビューはできるのに公開して確認してみるとリンク切れになっていた。</p>\n<h2 id=\"原因はApacheのモジュールだった\"><a href=\"#原因はApacheのモジュールだった\" class=\"headerlink\" title=\"原因はApacheのモジュールだった\"></a>原因はApacheのモジュールだった</h2><p>ここで原因はApacheにあるのではないかと思いついた。<br>改めて調べてみると、「Rewrite」というモジュールが有効になってないのではないかとのこと。<br>そこでターミナルから、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite</span><br><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>としたら解決した。<br>ちなみに自分の環境はUbuntuの14.04amd64で、さくらのvpsの2Gプランを借りて使っている。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近このサイトのテーマを変更した。シンプルで好みである。</p>\n<h2 id=\"パーマリンクを変更したらエラーになった\"><a href=\"#パーマリンクを変更したらエラーになった\" class=\"headerlink\" title=\"パーマリンクを変更したらエラーになった\"></a>パーマリンクを変更したらエラーになった</h2><p>テーマの変更に伴って前から気になっていたパーマリンクの設定をしておこうということになった。<br>以前までは<br><a href=\"https://salmon2073.net?p=xxx\">https://salmon2073.net?p=xxx</a><br>だったのだが、これはイマイチかっこ悪い。あと、SNSでリンクを共有したりするときにアドレスからだいたいどんなことを書いているのか分かったほうがいいだろうと思ったので、</p>\n<p>http;//salmon2073.net/%postname%</p>\n<p>のような形にすることにした。</p>\n<p>ところが、いざ設定してみると記事のページがリンク切れになってしまった。<br>検索してみたところ理由はリダイレクトの設定がきちんとできてないことらしく、プラグインを導入することで解決できるそうだ。<br>試しに紹介されている「Permalink Redirect」というプラグインを導入してみたがどうも解決しない…　どうやら.htaccessが悪さをしているようだがよく分からない。<br>仕方なく前の記事は諦めて新しい記事を作ってみたのだが、下書き中のプレビューはできるのに公開して確認してみるとリンク切れになっていた。</p>\n<h2 id=\"原因はApacheのモジュールだった\"><a href=\"#原因はApacheのモジュールだった\" class=\"headerlink\" title=\"原因はApacheのモジュールだった\"></a>原因はApacheのモジュールだった</h2><p>ここで原因はApacheにあるのではないかと思いついた。<br>改めて調べてみると、「Rewrite」というモジュールが有効になってないのではないかとのこと。<br>そこでターミナルから、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite</span><br><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n<p>としたら解決した。<br>ちなみに自分の環境はUbuntuの14.04amd64で、さくらのvpsの2Gプランを借りて使っている。</p>\n"},{"title":"ICEcoderを導入したら便利だった","date":"2015-04-28T23:51:20.000Z","_content":"\n自分のサーバでweb系の開発をするとき、今まではSublime Textで書いてWinSCPで転送したりTera Termを使ってvimで書いたりしていたのだけど、キャンパスや他人のPCから作業したい時にこれらのソフトを用意するのはちょっと面倒なので、軽量かつシンプルなWebIDEのICEcoderを導入することにしたので、簡単に使い方をまとめてみた。\n\n## 導入\n\n以下に書いてある通り。\n<a href=\"https://github.com/mattpass/ICEcoder\">ICEcoder</a>\nGitHubから簡単に入れられる。\n注意点として、最新版は有料だったり使用制限がついてたりする。\n\n## スクリーンショット（クリックで拡大）\n\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder-300x146.png\" alt=\"ICEcoder\" width=\"600\" height=\"292\" class=\"alignnone size-medium wp-image-483\" /></a>\n\n## 使い方メモ\n\nICEcoderの置いてあるURLに接続すると、そのURLのドメインのドキュメントルートが「ROOT」になる。\nFileメニューから新規作成、ファイル転送、zipでダウンロードなどができる。\nCtrl+sで保存できる。\nHelp->Settingでテーマ、インデント、パスワードなどが変更できる。\n\n## 使ってみた感想など\n\n気軽に使えるという点では非常に便利。余計な機能はあまりなくてシンプルなのだが、必要ならばプラグインでコンソール機能とか追加できるようだ。\n左下の○はネストを見てくれる機能のようで地味に嬉しい。ちょっとしたwebページ作成やPHP書くときには結構使えると思う。\nただ、こういうものを利用するときにはセキュリティ面にも気を使わないといけないね。\n\n","source":"_posts/2015-04-29-ICEcoderを導入したら便利だった.md","raw":"---\ntitle: ICEcoderを導入したら便利だった\ndate: 2015-04-29 08:51:20\ncategory: OSS\n---\n\n自分のサーバでweb系の開発をするとき、今まではSublime Textで書いてWinSCPで転送したりTera Termを使ってvimで書いたりしていたのだけど、キャンパスや他人のPCから作業したい時にこれらのソフトを用意するのはちょっと面倒なので、軽量かつシンプルなWebIDEのICEcoderを導入することにしたので、簡単に使い方をまとめてみた。\n\n## 導入\n\n以下に書いてある通り。\n<a href=\"https://github.com/mattpass/ICEcoder\">ICEcoder</a>\nGitHubから簡単に入れられる。\n注意点として、最新版は有料だったり使用制限がついてたりする。\n\n## スクリーンショット（クリックで拡大）\n\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder-300x146.png\" alt=\"ICEcoder\" width=\"600\" height=\"292\" class=\"alignnone size-medium wp-image-483\" /></a>\n\n## 使い方メモ\n\nICEcoderの置いてあるURLに接続すると、そのURLのドメインのドキュメントルートが「ROOT」になる。\nFileメニューから新規作成、ファイル転送、zipでダウンロードなどができる。\nCtrl+sで保存できる。\nHelp->Settingでテーマ、インデント、パスワードなどが変更できる。\n\n## 使ってみた感想など\n\n気軽に使えるという点では非常に便利。余計な機能はあまりなくてシンプルなのだが、必要ならばプラグインでコンソール機能とか追加できるようだ。\n左下の○はネストを見てくれる機能のようで地味に嬉しい。ちょっとしたwebページ作成やPHP書くときには結構使えると思う。\nただ、こういうものを利用するときにはセキュリティ面にも気を使わないといけないね。\n\n","slug":"ICEcoderを導入したら便利だった","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bekg2001oxgtv2p924kxh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>自分のサーバでweb系の開発をするとき、今まではSublime Textで書いてWinSCPで転送したりTera Termを使ってvimで書いたりしていたのだけど、キャンパスや他人のPCから作業したい時にこれらのソフトを用意するのはちょっと面倒なので、軽量かつシンプルなWebIDEのICEcoderを導入することにしたので、簡単に使い方をまとめてみた。</p>\n<h2 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h2><p>以下に書いてある通り。<br><a href=\"https://github.com/mattpass/ICEcoder\">ICEcoder</a><br>GitHubから簡単に入れられる。<br>注意点として、最新版は有料だったり使用制限がついてたりする。</p>\n<h2 id=\"スクリーンショット（クリックで拡大）\"><a href=\"#スクリーンショット（クリックで拡大）\" class=\"headerlink\" title=\"スクリーンショット（クリックで拡大）\"></a>スクリーンショット（クリックで拡大）</h2><p><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder-300x146.png\" alt=\"ICEcoder\" width=\"600\" height=\"292\" class=\"alignnone size-medium wp-image-483\" /></a></p>\n<h2 id=\"使い方メモ\"><a href=\"#使い方メモ\" class=\"headerlink\" title=\"使い方メモ\"></a>使い方メモ</h2><p>ICEcoderの置いてあるURLに接続すると、そのURLのドメインのドキュメントルートが「ROOT」になる。<br>Fileメニューから新規作成、ファイル転送、zipでダウンロードなどができる。<br>Ctrl+sで保存できる。<br>Help-&gt;Settingでテーマ、インデント、パスワードなどが変更できる。</p>\n<h2 id=\"使ってみた感想など\"><a href=\"#使ってみた感想など\" class=\"headerlink\" title=\"使ってみた感想など\"></a>使ってみた感想など</h2><p>気軽に使えるという点では非常に便利。余計な機能はあまりなくてシンプルなのだが、必要ならばプラグインでコンソール機能とか追加できるようだ。<br>左下の○はネストを見てくれる機能のようで地味に嬉しい。ちょっとしたwebページ作成やPHP書くときには結構使えると思う。<br>ただ、こういうものを利用するときにはセキュリティ面にも気を使わないといけないね。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>自分のサーバでweb系の開発をするとき、今まではSublime Textで書いてWinSCPで転送したりTera Termを使ってvimで書いたりしていたのだけど、キャンパスや他人のPCから作業したい時にこれらのソフトを用意するのはちょっと面倒なので、軽量かつシンプルなWebIDEのICEcoderを導入することにしたので、簡単に使い方をまとめてみた。</p>\n<h2 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h2><p>以下に書いてある通り。<br><a href=\"https://github.com/mattpass/ICEcoder\">ICEcoder</a><br>GitHubから簡単に入れられる。<br>注意点として、最新版は有料だったり使用制限がついてたりする。</p>\n<h2 id=\"スクリーンショット（クリックで拡大）\"><a href=\"#スクリーンショット（クリックで拡大）\" class=\"headerlink\" title=\"スクリーンショット（クリックで拡大）\"></a>スクリーンショット（クリックで拡大）</h2><p><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/ICEcoder-300x146.png\" alt=\"ICEcoder\" width=\"600\" height=\"292\" class=\"alignnone size-medium wp-image-483\" /></a></p>\n<h2 id=\"使い方メモ\"><a href=\"#使い方メモ\" class=\"headerlink\" title=\"使い方メモ\"></a>使い方メモ</h2><p>ICEcoderの置いてあるURLに接続すると、そのURLのドメインのドキュメントルートが「ROOT」になる。<br>Fileメニューから新規作成、ファイル転送、zipでダウンロードなどができる。<br>Ctrl+sで保存できる。<br>Help-&gt;Settingでテーマ、インデント、パスワードなどが変更できる。</p>\n<h2 id=\"使ってみた感想など\"><a href=\"#使ってみた感想など\" class=\"headerlink\" title=\"使ってみた感想など\"></a>使ってみた感想など</h2><p>気軽に使えるという点では非常に便利。余計な機能はあまりなくてシンプルなのだが、必要ならばプラグインでコンソール機能とか追加できるようだ。<br>左下の○はネストを見てくれる機能のようで地味に嬉しい。ちょっとしたwebページ作成やPHP書くときには結構使えると思う。<br>ただ、こういうものを利用するときにはセキュリティ面にも気を使わないといけないね。</p>\n"},{"title":"ニコニコ超会議に参加してきた","date":"2015-04-30T00:49:59.000Z","_content":"\n今回、ニコニコ超会議というものに初めて参加してきた。まさか最初がポスター出展者としての参加になるとは思わなかったが、おかげで観る側と観られる側の雰囲気を両方とも味わえたのでよかった。\n「ニコニコ学会」とか「超会議」とか、自分のバイト先のファミリーマートで放送がよく流れていたので存在は知っていたが、実際にどんなものか見たことはなかった。入場のために人がすごい並んでるイメージ。\n\n自分がやったのはこちら「人類美観化計画」である。HMDを使った研究なのだが、バーチャルではなく実世界に働きかけるものは珍しかったかな？\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345-300x300.jpg\" alt=\"IMG_0901\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-491\" /></a>\n\n昼にはカツサンド（800円）が配られた。高いな～と思ったがそれなりに知られているものらしい。美味しくいただいた。\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169-300x300.jpg\" alt=\"IMG_0910\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-490\" /></a>\n\nコスプレしてる人が多いように見えたが、その割には普通のカップルとかチャラめの人とかもたくさんいて面白かった。そういった様々な人たちに実際に成果物を体験してもらうことは新しい気づきがあったりしていいと思う。むしろ鋭い質問をしてくる人もいるのでちゃんと研究しないといけないなという戒めにもなった。\n今回は完全に自分の発想で生まれた研究ではなく2年のときの先生の研究のお手伝いのようなものだったので、次は自分の研究で出してみたい。\n\n","source":"_posts/2015-04-30-ニコニコ超会議に参加してきた.md","raw":"---\ntitle: ニコニコ超会議に参加してきた\ndate: 2015-04-30 09:49:59\ncategory: 日記\n---\n\n今回、ニコニコ超会議というものに初めて参加してきた。まさか最初がポスター出展者としての参加になるとは思わなかったが、おかげで観る側と観られる側の雰囲気を両方とも味わえたのでよかった。\n「ニコニコ学会」とか「超会議」とか、自分のバイト先のファミリーマートで放送がよく流れていたので存在は知っていたが、実際にどんなものか見たことはなかった。入場のために人がすごい並んでるイメージ。\n\n自分がやったのはこちら「人類美観化計画」である。HMDを使った研究なのだが、バーチャルではなく実世界に働きかけるものは珍しかったかな？\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345-300x300.jpg\" alt=\"IMG_0901\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-491\" /></a>\n\n昼にはカツサンド（800円）が配られた。高いな～と思ったがそれなりに知られているものらしい。美味しくいただいた。\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169-300x300.jpg\" alt=\"IMG_0910\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-490\" /></a>\n\nコスプレしてる人が多いように見えたが、その割には普通のカップルとかチャラめの人とかもたくさんいて面白かった。そういった様々な人たちに実際に成果物を体験してもらうことは新しい気づきがあったりしていいと思う。むしろ鋭い質問をしてくる人もいるのでちゃんと研究しないといけないなという戒めにもなった。\n今回は完全に自分の発想で生まれた研究ではなく2年のときの先生の研究のお手伝いのようなものだったので、次は自分の研究で出してみたい。\n\n","slug":"ニコニコ超会議に参加してきた","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9beluo001rxgtv2ezl9m99","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今回、ニコニコ超会議というものに初めて参加してきた。まさか最初がポスター出展者としての参加になるとは思わなかったが、おかげで観る側と観られる側の雰囲気を両方とも味わえたのでよかった。<br>「ニコニコ学会」とか「超会議」とか、自分のバイト先のファミリーマートで放送がよく流れていたので存在は知っていたが、実際にどんなものか見たことはなかった。入場のために人がすごい並んでるイメージ。</p>\n<p>自分がやったのはこちら「人類美観化計画」である。HMDを使った研究なのだが、バーチャルではなく実世界に働きかけるものは珍しかったかな？<br><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345-300x300.jpg\" alt=\"IMG_0901\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-491\" /></a></p>\n<p>昼にはカツサンド（800円）が配られた。高いな～と思ったがそれなりに知られているものらしい。美味しくいただいた。<br><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169-300x300.jpg\" alt=\"IMG_0910\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-490\" /></a></p>\n<p>コスプレしてる人が多いように見えたが、その割には普通のカップルとかチャラめの人とかもたくさんいて面白かった。そういった様々な人たちに実際に成果物を体験してもらうことは新しい気づきがあったりしていいと思う。むしろ鋭い質問をしてくる人もいるのでちゃんと研究しないといけないなという戒めにもなった。<br>今回は完全に自分の発想で生まれた研究ではなく2年のときの先生の研究のお手伝いのようなものだったので、次は自分の研究で出してみたい。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今回、ニコニコ超会議というものに初めて参加してきた。まさか最初がポスター出展者としての参加になるとは思わなかったが、おかげで観る側と観られる側の雰囲気を両方とも味わえたのでよかった。<br>「ニコニコ学会」とか「超会議」とか、自分のバイト先のファミリーマートで放送がよく流れていたので存在は知っていたが、実際にどんなものか見たことはなかった。入場のために人がすごい並んでるイメージ。</p>\n<p>自分がやったのはこちら「人類美観化計画」である。HMDを使った研究なのだが、バーチャルではなく実世界に働きかけるものは珍しかったかな？<br><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0901-e1430266203345-300x300.jpg\" alt=\"IMG_0901\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-491\" /></a></p>\n<p>昼にはカツサンド（800円）が配られた。高いな～と思ったがそれなりに知られているものらしい。美味しくいただいた。<br><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169.jpg\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/04/IMG_0910-e1430266191169-300x300.jpg\" alt=\"IMG_0910\" width=\"300\" height=\"300\" class=\"alignnone size-medium wp-image-490\" /></a></p>\n<p>コスプレしてる人が多いように見えたが、その割には普通のカップルとかチャラめの人とかもたくさんいて面白かった。そういった様々な人たちに実際に成果物を体験してもらうことは新しい気づきがあったりしていいと思う。むしろ鋭い質問をしてくる人もいるのでちゃんと研究しないといけないなという戒めにもなった。<br>今回は完全に自分の発想で生まれた研究ではなく2年のときの先生の研究のお手伝いのようなものだったので、次は自分の研究で出してみたい。</p>\n"},{"title":"日記をはじめた","date":"2015-05-19T14:39:46.000Z","_content":"\n今日はブログで日記を書くことについて考えていた。\nもともと「ブログ」という言葉は「Webログ」の略であり「考えや行動をログとして残すサイト」という意味であるから、日記を書くことが本来の使い方だといえる。\n一方で、日記的なブログを運営することの意義について議論が交わされることがしばしばある。\nそのあたりの話題にちょっと興味を持ったので軽くググってみたところ、賛成意見としては\n\n- 自分の意見を世に発信することができる\n- 書き手や読み手とのコミュニケーションができる\n- 文章を書く練習になる\n- 純粋に日記として使える\n\nというようにメリットに基づくものが多く、一方で反対意見は\n\n- 一般人の書いたものに需要などない\n- 時に悪口や鬱憤を晴らす場になりかねない\n- facebookで十分\n\nといった「観ていて痛い」という内容の意見が多く感じた。\nなるほど、個人のつながりがSNSにシフトしている現代では有益でもない情報をわざわざ不特定多数にむけて発信する必要もないということだろうか。\n\n自分はどちらかというと賛成意見に納得がいったので、このブログで日記を書いてみることにした。\n自前のサーバで運営するサイトはブログサービスを利用したものよりもSEO的に弱いが、このような記事を気楽にかけるというメリットでもある。\n有益な情報が書いてあるページを読みたい人は検索からやってくるので、おそらく邪魔になることはないだろう。\n\n","source":"_posts/2015-05-19-日記をはじめた.md","raw":"---\ntitle: 日記をはじめた\ndate: 2015-05-19 23:39:46\ncategory: 日記\n---\n\n今日はブログで日記を書くことについて考えていた。\nもともと「ブログ」という言葉は「Webログ」の略であり「考えや行動をログとして残すサイト」という意味であるから、日記を書くことが本来の使い方だといえる。\n一方で、日記的なブログを運営することの意義について議論が交わされることがしばしばある。\nそのあたりの話題にちょっと興味を持ったので軽くググってみたところ、賛成意見としては\n\n- 自分の意見を世に発信することができる\n- 書き手や読み手とのコミュニケーションができる\n- 文章を書く練習になる\n- 純粋に日記として使える\n\nというようにメリットに基づくものが多く、一方で反対意見は\n\n- 一般人の書いたものに需要などない\n- 時に悪口や鬱憤を晴らす場になりかねない\n- facebookで十分\n\nといった「観ていて痛い」という内容の意見が多く感じた。\nなるほど、個人のつながりがSNSにシフトしている現代では有益でもない情報をわざわざ不特定多数にむけて発信する必要もないということだろうか。\n\n自分はどちらかというと賛成意見に納得がいったので、このブログで日記を書いてみることにした。\n自前のサーバで運営するサイトはブログサービスを利用したものよりもSEO的に弱いが、このような記事を気楽にかけるというメリットでもある。\n有益な情報が書いてあるページを読みたい人は検索からやってくるので、おそらく邪魔になることはないだろう。\n\n","slug":"日記をはじめた","published":1,"updated":"2020-05-16T07:34:20.720Z","_id":"cka9benwt001txgtvb86q1ebe","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今日はブログで日記を書くことについて考えていた。<br>もともと「ブログ」という言葉は「Webログ」の略であり「考えや行動をログとして残すサイト」という意味であるから、日記を書くことが本来の使い方だといえる。<br>一方で、日記的なブログを運営することの意義について議論が交わされることがしばしばある。<br>そのあたりの話題にちょっと興味を持ったので軽くググってみたところ、賛成意見としては</p>\n<ul>\n<li>自分の意見を世に発信することができる</li>\n<li>書き手や読み手とのコミュニケーションができる</li>\n<li>文章を書く練習になる</li>\n<li>純粋に日記として使える</li>\n</ul>\n<p>というようにメリットに基づくものが多く、一方で反対意見は</p>\n<ul>\n<li>一般人の書いたものに需要などない</li>\n<li>時に悪口や鬱憤を晴らす場になりかねない</li>\n<li>facebookで十分</li>\n</ul>\n<p>といった「観ていて痛い」という内容の意見が多く感じた。<br>なるほど、個人のつながりがSNSにシフトしている現代では有益でもない情報をわざわざ不特定多数にむけて発信する必要もないということだろうか。</p>\n<p>自分はどちらかというと賛成意見に納得がいったので、このブログで日記を書いてみることにした。<br>自前のサーバで運営するサイトはブログサービスを利用したものよりもSEO的に弱いが、このような記事を気楽にかけるというメリットでもある。<br>有益な情報が書いてあるページを読みたい人は検索からやってくるので、おそらく邪魔になることはないだろう。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今日はブログで日記を書くことについて考えていた。<br>もともと「ブログ」という言葉は「Webログ」の略であり「考えや行動をログとして残すサイト」という意味であるから、日記を書くことが本来の使い方だといえる。<br>一方で、日記的なブログを運営することの意義について議論が交わされることがしばしばある。<br>そのあたりの話題にちょっと興味を持ったので軽くググってみたところ、賛成意見としては</p>\n<ul>\n<li>自分の意見を世に発信することができる</li>\n<li>書き手や読み手とのコミュニケーションができる</li>\n<li>文章を書く練習になる</li>\n<li>純粋に日記として使える</li>\n</ul>\n<p>というようにメリットに基づくものが多く、一方で反対意見は</p>\n<ul>\n<li>一般人の書いたものに需要などない</li>\n<li>時に悪口や鬱憤を晴らす場になりかねない</li>\n<li>facebookで十分</li>\n</ul>\n<p>といった「観ていて痛い」という内容の意見が多く感じた。<br>なるほど、個人のつながりがSNSにシフトしている現代では有益でもない情報をわざわざ不特定多数にむけて発信する必要もないということだろうか。</p>\n<p>自分はどちらかというと賛成意見に納得がいったので、このブログで日記を書いてみることにした。<br>自前のサーバで運営するサイトはブログサービスを利用したものよりもSEO的に弱いが、このような記事を気楽にかけるというメリットでもある。<br>有益な情報が書いてあるページを読みたい人は検索からやってくるので、おそらく邪魔になることはないだろう。</p>\n"},{"title":"PHP用にcurlをインストールする","date":"2015-05-21T02:18:16.000Z","_content":"\nUbuntu 14.04での話\nownCloudをインストールしたら\n\n```\ncURL is not installed, some functionality might not work. Please install the PHP cURL extension. Future versions will require installed cURL.\n```\n\nというエラーが出た。\n\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\" alt=\"owncloud-curl-error\" width=\"1844\" height=\"243\" class=\"alignnone size-full wp-image-543\" /></a>\n\nどうやらPHP用のcurlが無いらしい。以下のようにしてインストールして解決。\n\n```\nsudo apt-get insatall php5-curl\nsudo service apache2 restart\n```\n\n","source":"_posts/2015-05-21-PHP用にcurlをインストールする.md","raw":"---\ntitle: PHP用にcurlをインストールする\ndate: 2015-05-21 11:18:16\ncategory: PHP\n---\n\nUbuntu 14.04での話\nownCloudをインストールしたら\n\n```\ncURL is not installed, some functionality might not work. Please install the PHP cURL extension. Future versions will require installed cURL.\n```\n\nというエラーが出た。\n\n<a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\" alt=\"owncloud-curl-error\" width=\"1844\" height=\"243\" class=\"alignnone size-full wp-image-543\" /></a>\n\nどうやらPHP用のcurlが無いらしい。以下のようにしてインストールして解決。\n\n```\nsudo apt-get insatall php5-curl\nsudo service apache2 restart\n```\n\n","slug":"PHP用にcurlをインストールする","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bepft001vxgtvgbxn8icn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Ubuntu 14.04での話<br>ownCloudをインストールしたら</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cURL is not installed, some functionality might not work. Please install the PHP cURL extension. Future versions will require installed cURL.</span><br></pre></td></tr></table></figure>\n\n<p>というエラーが出た。</p>\n<p><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\" alt=\"owncloud-curl-error\" width=\"1844\" height=\"243\" class=\"alignnone size-full wp-image-543\" /></a></p>\n<p>どうやらPHP用のcurlが無いらしい。以下のようにしてインストールして解決。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get insatall php5-curl</span><br><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>Ubuntu 14.04での話<br>ownCloudをインストールしたら</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cURL is not installed, some functionality might not work. Please install the PHP cURL extension. Future versions will require installed cURL.</span><br></pre></td></tr></table></figure>\n\n<p>というエラーが出た。</p>\n<p><a href=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\"><img src=\"https://salmon2073.net/wp/wp-content/uploads/2015/05/owncloud-curl-error.png\" alt=\"owncloud-curl-error\" width=\"1844\" height=\"243\" class=\"alignnone size-full wp-image-543\" /></a></p>\n<p>どうやらPHP用のcurlが無いらしい。以下のようにしてインストールして解決。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get insatall php5-curl</span><br><span class=\"line\">sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n\n"},{"title":"突然何もしてないのにインターネットに繋がらなくなった","date":"2015-05-23T02:35:08.000Z","_content":"\nUbuntuの話\n\n自分は友人数人と使っているMinecraftサーバを管理しているのだが、あるときそのサーバとして使っていたマシンを再起動\nしたら「ワールドに入れなくなった」との報告が。\nチェックしてみると確かに繋がらない。\nさらに、タイトルの通り突然・何もしてないのに・インターネットに繋がらなくなってしまっていた。\n\nというわけでおもむろに以下のコマンドで解決\n\n```\nsudo dhclient eth0\n```\n\nこの辺はちゃんと知識として理解しないといけないと思うのだけど、やらかして初めて反省するのでなかなか手が出ない。\n\n","source":"_posts/2015-05-23-突然何もしてないのにインターネットに繋がらなくなった.md","raw":"---\ntitle: 突然何もしてないのにインターネットに繋がらなくなった\ndate: 2015-05-23 11:35:08\ncategory: 日記\n---\n\nUbuntuの話\n\n自分は友人数人と使っているMinecraftサーバを管理しているのだが、あるときそのサーバとして使っていたマシンを再起動\nしたら「ワールドに入れなくなった」との報告が。\nチェックしてみると確かに繋がらない。\nさらに、タイトルの通り突然・何もしてないのに・インターネットに繋がらなくなってしまっていた。\n\nというわけでおもむろに以下のコマンドで解決\n\n```\nsudo dhclient eth0\n```\n\nこの辺はちゃんと知識として理解しないといけないと思うのだけど、やらかして初めて反省するのでなかなか手が出ない。\n\n","slug":"突然何もしてないのにインターネットに繋がらなくなった","published":1,"updated":"2020-05-16T07:34:30.000Z","_id":"cka9bev0e001yxgtv8zqudg08","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Ubuntuの話</p>\n<p>自分は友人数人と使っているMinecraftサーバを管理しているのだが、あるときそのサーバとして使っていたマシンを再起動<br>したら「ワールドに入れなくなった」との報告が。<br>チェックしてみると確かに繋がらない。<br>さらに、タイトルの通り突然・何もしてないのに・インターネットに繋がらなくなってしまっていた。</p>\n<p>というわけでおもむろに以下のコマンドで解決</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dhclient eth0</span><br></pre></td></tr></table></figure>\n\n<p>この辺はちゃんと知識として理解しないといけないと思うのだけど、やらかして初めて反省するのでなかなか手が出ない。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Ubuntuの話</p>\n<p>自分は友人数人と使っているMinecraftサーバを管理しているのだが、あるときそのサーバとして使っていたマシンを再起動<br>したら「ワールドに入れなくなった」との報告が。<br>チェックしてみると確かに繋がらない。<br>さらに、タイトルの通り突然・何もしてないのに・インターネットに繋がらなくなってしまっていた。</p>\n<p>というわけでおもむろに以下のコマンドで解決</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dhclient eth0</span><br></pre></td></tr></table></figure>\n\n<p>この辺はちゃんと知識として理解しないといけないと思うのだけど、やらかして初めて反省するのでなかなか手が出ない。</p>\n"},{"title":"相関図作成ツールが便利で簡単だった","date":"2015-05-24T11:54:13.000Z","_content":"\n大学の課題で相関図を作る機会があった。\n今までにプログラムを組んで相関図を組んだことは何度かあったが、ビジュアルをコードで考えるのが面倒でなかなか手が出ないのが悩みだった。\n今回の課題は必ずしもプログラミングをする必要はなさそうだったので、シンプルに相関図を作成できるサービスを使ってみることにした。\n\n検索してみるとそのままズバリのサービスを発見。\n<a href=\"https://diagram.jp/correlation/index.html\">相関図を無料で作成するなら、相関図作成ツール</a>\n\nUIもシンプルだし、この棒人間の表情がとてもよい。\n非常に直感的で、色分け/マーク/メモといった最低限の機能がいい感じに揃っている。\n個人的には作った相関図を保持してくれる機能が嬉しかった。\n\n作者さんのページも覗いてみたが（利用規約にリンクがある）、何でもできる人っぽい。すごいなあ。\n\nそういえば相関図の共通テキストフォーマットみたいなのってないんだろうか。\nマインドマップとか木構造（トーナメント）とかも、作成は直感的にして保存はマークダウンのように統一的なソースがあると便利なんじゃないだろうか。\n\n","source":"_posts/2015-05-24相関図作成ツールが便利で簡単だった.md","raw":"---\ntitle: 相関図作成ツールが便利で簡単だった\ndate: 2015-05-24 20:54:13\ncategory: 日記\n---\n\n大学の課題で相関図を作る機会があった。\n今までにプログラムを組んで相関図を組んだことは何度かあったが、ビジュアルをコードで考えるのが面倒でなかなか手が出ないのが悩みだった。\n今回の課題は必ずしもプログラミングをする必要はなさそうだったので、シンプルに相関図を作成できるサービスを使ってみることにした。\n\n検索してみるとそのままズバリのサービスを発見。\n<a href=\"https://diagram.jp/correlation/index.html\">相関図を無料で作成するなら、相関図作成ツール</a>\n\nUIもシンプルだし、この棒人間の表情がとてもよい。\n非常に直感的で、色分け/マーク/メモといった最低限の機能がいい感じに揃っている。\n個人的には作った相関図を保持してくれる機能が嬉しかった。\n\n作者さんのページも覗いてみたが（利用規約にリンクがある）、何でもできる人っぽい。すごいなあ。\n\nそういえば相関図の共通テキストフォーマットみたいなのってないんだろうか。\nマインドマップとか木構造（トーナメント）とかも、作成は直感的にして保存はマークダウンのように統一的なソースがあると便利なんじゃないだろうか。\n\n","slug":"2015-05-24相関図作成ツールが便利で簡単だった","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bewqd0020xgtvh3m7bypf","comments":1,"layout":"post","photos":[],"link":"","content":"<p>大学の課題で相関図を作る機会があった。<br>今までにプログラムを組んで相関図を組んだことは何度かあったが、ビジュアルをコードで考えるのが面倒でなかなか手が出ないのが悩みだった。<br>今回の課題は必ずしもプログラミングをする必要はなさそうだったので、シンプルに相関図を作成できるサービスを使ってみることにした。</p>\n<p>検索してみるとそのままズバリのサービスを発見。<br><a href=\"https://diagram.jp/correlation/index.html\">相関図を無料で作成するなら、相関図作成ツール</a></p>\n<p>UIもシンプルだし、この棒人間の表情がとてもよい。<br>非常に直感的で、色分け/マーク/メモといった最低限の機能がいい感じに揃っている。<br>個人的には作った相関図を保持してくれる機能が嬉しかった。</p>\n<p>作者さんのページも覗いてみたが（利用規約にリンクがある）、何でもできる人っぽい。すごいなあ。</p>\n<p>そういえば相関図の共通テキストフォーマットみたいなのってないんだろうか。<br>マインドマップとか木構造（トーナメント）とかも、作成は直感的にして保存はマークダウンのように統一的なソースがあると便利なんじゃないだろうか。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大学の課題で相関図を作る機会があった。<br>今までにプログラムを組んで相関図を組んだことは何度かあったが、ビジュアルをコードで考えるのが面倒でなかなか手が出ないのが悩みだった。<br>今回の課題は必ずしもプログラミングをする必要はなさそうだったので、シンプルに相関図を作成できるサービスを使ってみることにした。</p>\n<p>検索してみるとそのままズバリのサービスを発見。<br><a href=\"https://diagram.jp/correlation/index.html\">相関図を無料で作成するなら、相関図作成ツール</a></p>\n<p>UIもシンプルだし、この棒人間の表情がとてもよい。<br>非常に直感的で、色分け/マーク/メモといった最低限の機能がいい感じに揃っている。<br>個人的には作った相関図を保持してくれる機能が嬉しかった。</p>\n<p>作者さんのページも覗いてみたが（利用規約にリンクがある）、何でもできる人っぽい。すごいなあ。</p>\n<p>そういえば相関図の共通テキストフォーマットみたいなのってないんだろうか。<br>マインドマップとか木構造（トーナメント）とかも、作成は直感的にして保存はマークダウンのように統一的なソースがあると便利なんじゃないだろうか。</p>\n"},{"title":"近況","date":"2015-08-04T14:21:21.000Z","_content":"\n3年もとうとう夏休みである．春学期は試験のための勉強とゼミの研究に追われて大変だったが，とにかくひと段落ついた．\n\n## 春に作ったもの\n\n<a href=\"https://mloa.net/ichimonitto/\">イチモニット</a>\ncloudnのコンテストに出したクイズ支援サービス．まだちゃんと使える状態じゃないのできちんと作り込みたい．\n\n## 最近始めたこと\n\n- Androidの勉強\n\n去年からコピペで行き当たりばったりの開発をしていたけど，そろそろ体系的に学ぼうと思って勉強している．\n\n## 最近気になってるイベント\n\n- <a href=\"https://fss2015.j-soft.org/\">第31回ファジィシステムシンポジウム</a>\n- <a href=\"https://fss2015.j-soft.org/\"><img src=\"https://fss2015.j-soft.org/src/body_top2.jpg\"></a>\n\n対話型進化計算についていろいろ論文を読んだので，興味がわいている\n\n- <a href=\"https://mashupaward.jp/\">MashupAwards</a>\n    - 今年は参加する最後のチャンスになりそうなので，なんとしても参加したい．\n\n## 最近欲しいもの\n\n- <a href=\"https://shop.giant-hobby.com/shopdetail/000000001802/\">ドラスレ</a>\n    - @frogshisoに連れて行ってもらった<a href=\"https://sugorokuya.jp/\">すごろく屋で見つけたボードゲーム．</a>\n\n## まとめ\n\nざっと近況をまとめてみたが，研究のことを除くとまだたいしたことしてないと思う．\n春の間は基本的に「研究の心得」ばっかりやっていて，技術の勉強はあまりしなかった．VSTやOculusも作品を作るところまではいかなくて残念．\n\n何をやったかというと，ああ，「イチモニット」を作ったかな．ただ，このペースだとまずくて．さっさと次のプロダクトを出そう．\n<a href=\"https://salmon2073.net/2014%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%81%A3%E3%81%A6/\">2014年を振り返って</a>を読んでもなかなか進歩している感じがしないので，ここらでしっかり締めていきたい．\n","source":"_posts/2015-08-04-近況.md","raw":"---\ntitle: 近況\ndate: 2015-08-04 23:21:21\ncategory: 日記\n---\n\n3年もとうとう夏休みである．春学期は試験のための勉強とゼミの研究に追われて大変だったが，とにかくひと段落ついた．\n\n## 春に作ったもの\n\n<a href=\"https://mloa.net/ichimonitto/\">イチモニット</a>\ncloudnのコンテストに出したクイズ支援サービス．まだちゃんと使える状態じゃないのできちんと作り込みたい．\n\n## 最近始めたこと\n\n- Androidの勉強\n\n去年からコピペで行き当たりばったりの開発をしていたけど，そろそろ体系的に学ぼうと思って勉強している．\n\n## 最近気になってるイベント\n\n- <a href=\"https://fss2015.j-soft.org/\">第31回ファジィシステムシンポジウム</a>\n- <a href=\"https://fss2015.j-soft.org/\"><img src=\"https://fss2015.j-soft.org/src/body_top2.jpg\"></a>\n\n対話型進化計算についていろいろ論文を読んだので，興味がわいている\n\n- <a href=\"https://mashupaward.jp/\">MashupAwards</a>\n    - 今年は参加する最後のチャンスになりそうなので，なんとしても参加したい．\n\n## 最近欲しいもの\n\n- <a href=\"https://shop.giant-hobby.com/shopdetail/000000001802/\">ドラスレ</a>\n    - @frogshisoに連れて行ってもらった<a href=\"https://sugorokuya.jp/\">すごろく屋で見つけたボードゲーム．</a>\n\n## まとめ\n\nざっと近況をまとめてみたが，研究のことを除くとまだたいしたことしてないと思う．\n春の間は基本的に「研究の心得」ばっかりやっていて，技術の勉強はあまりしなかった．VSTやOculusも作品を作るところまではいかなくて残念．\n\n何をやったかというと，ああ，「イチモニット」を作ったかな．ただ，このペースだとまずくて．さっさと次のプロダクトを出そう．\n<a href=\"https://salmon2073.net/2014%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%81%A3%E3%81%A6/\">2014年を振り返って</a>を読んでもなかなか進歩している感じがしないので，ここらでしっかり締めていきたい．\n","slug":"近況","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bey7n0022xgtv703xgkb5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>3年もとうとう夏休みである．春学期は試験のための勉強とゼミの研究に追われて大変だったが，とにかくひと段落ついた．</p>\n<h2 id=\"春に作ったもの\"><a href=\"#春に作ったもの\" class=\"headerlink\" title=\"春に作ったもの\"></a>春に作ったもの</h2><p><a href=\"https://mloa.net/ichimonitto/\">イチモニット</a><br>cloudnのコンテストに出したクイズ支援サービス．まだちゃんと使える状態じゃないのできちんと作り込みたい．</p>\n<h2 id=\"最近始めたこと\"><a href=\"#最近始めたこと\" class=\"headerlink\" title=\"最近始めたこと\"></a>最近始めたこと</h2><ul>\n<li>Androidの勉強</li>\n</ul>\n<p>去年からコピペで行き当たりばったりの開発をしていたけど，そろそろ体系的に学ぼうと思って勉強している．</p>\n<h2 id=\"最近気になってるイベント\"><a href=\"#最近気になってるイベント\" class=\"headerlink\" title=\"最近気になってるイベント\"></a>最近気になってるイベント</h2><ul>\n<li><a href=\"https://fss2015.j-soft.org/\">第31回ファジィシステムシンポジウム</a></li>\n<li><a href=\"https://fss2015.j-soft.org/\"><img src=\"https://fss2015.j-soft.org/src/body_top2.jpg\"></a></li>\n</ul>\n<p>対話型進化計算についていろいろ論文を読んだので，興味がわいている</p>\n<ul>\n<li><a href=\"https://mashupaward.jp/\">MashupAwards</a><ul>\n<li>今年は参加する最後のチャンスになりそうなので，なんとしても参加したい．</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"最近欲しいもの\"><a href=\"#最近欲しいもの\" class=\"headerlink\" title=\"最近欲しいもの\"></a>最近欲しいもの</h2><ul>\n<li><a href=\"https://shop.giant-hobby.com/shopdetail/000000001802/\">ドラスレ</a><ul>\n<li>@frogshisoに連れて行ってもらった<a href=\"https://sugorokuya.jp/\">すごろく屋で見つけたボードゲーム．</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>ざっと近況をまとめてみたが，研究のことを除くとまだたいしたことしてないと思う．<br>春の間は基本的に「研究の心得」ばっかりやっていて，技術の勉強はあまりしなかった．VSTやOculusも作品を作るところまではいかなくて残念．</p>\n<p>何をやったかというと，ああ，「イチモニット」を作ったかな．ただ，このペースだとまずくて．さっさと次のプロダクトを出そう．<br><a href=\"https://salmon2073.net/2014%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%81%A3%E3%81%A6/\">2014年を振り返って</a>を読んでもなかなか進歩している感じがしないので，ここらでしっかり締めていきたい．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>3年もとうとう夏休みである．春学期は試験のための勉強とゼミの研究に追われて大変だったが，とにかくひと段落ついた．</p>\n<h2 id=\"春に作ったもの\"><a href=\"#春に作ったもの\" class=\"headerlink\" title=\"春に作ったもの\"></a>春に作ったもの</h2><p><a href=\"https://mloa.net/ichimonitto/\">イチモニット</a><br>cloudnのコンテストに出したクイズ支援サービス．まだちゃんと使える状態じゃないのできちんと作り込みたい．</p>\n<h2 id=\"最近始めたこと\"><a href=\"#最近始めたこと\" class=\"headerlink\" title=\"最近始めたこと\"></a>最近始めたこと</h2><ul>\n<li>Androidの勉強</li>\n</ul>\n<p>去年からコピペで行き当たりばったりの開発をしていたけど，そろそろ体系的に学ぼうと思って勉強している．</p>\n<h2 id=\"最近気になってるイベント\"><a href=\"#最近気になってるイベント\" class=\"headerlink\" title=\"最近気になってるイベント\"></a>最近気になってるイベント</h2><ul>\n<li><a href=\"https://fss2015.j-soft.org/\">第31回ファジィシステムシンポジウム</a></li>\n<li><a href=\"https://fss2015.j-soft.org/\"><img src=\"https://fss2015.j-soft.org/src/body_top2.jpg\"></a></li>\n</ul>\n<p>対話型進化計算についていろいろ論文を読んだので，興味がわいている</p>\n<ul>\n<li><a href=\"https://mashupaward.jp/\">MashupAwards</a><ul>\n<li>今年は参加する最後のチャンスになりそうなので，なんとしても参加したい．</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"最近欲しいもの\"><a href=\"#最近欲しいもの\" class=\"headerlink\" title=\"最近欲しいもの\"></a>最近欲しいもの</h2><ul>\n<li><a href=\"https://shop.giant-hobby.com/shopdetail/000000001802/\">ドラスレ</a><ul>\n<li>@frogshisoに連れて行ってもらった<a href=\"https://sugorokuya.jp/\">すごろく屋で見つけたボードゲーム．</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>ざっと近況をまとめてみたが，研究のことを除くとまだたいしたことしてないと思う．<br>春の間は基本的に「研究の心得」ばっかりやっていて，技術の勉強はあまりしなかった．VSTやOculusも作品を作るところまではいかなくて残念．</p>\n<p>何をやったかというと，ああ，「イチモニット」を作ったかな．ただ，このペースだとまずくて．さっさと次のプロダクトを出そう．<br><a href=\"https://salmon2073.net/2014%E5%B9%B4%E3%82%92%E6%8C%AF%E3%82%8A%E8%BF%94%E3%81%A3%E3%81%A6/\">2014年を振り返って</a>を読んでもなかなか進歩している感じがしないので，ここらでしっかり締めていきたい．</p>\n"},{"title":"「動きのカガク展」に行ってきた","date":"2015-08-11T13:08:02.000Z","_content":"\n六本木の21_21 DESIGN SIGHTで行われている「動きのカガク展」に行ってきた．\n\n<blockquote>\n<dl>\n<dd class=\"sc_txt\"><a href=\"https://www.2121designsight.jp/program/motion_science/\" target= \"_blank\">企画展「動きのカガク展」</a></dd>\n<dt>会期：</dt>\n<dd class=\"sc_txt\">2015年6月19日（金）- 9月27日（日）</dd>\n<dt>休館日：</dt>\n<dd class=\"sc_txt\">火曜日（9月22日は開館）</dd>\n<dt>開館時間：</dt>\n<dd class=\"sc_txt\">10:00 - 19:00（入場は18:30まで）</dd>\n<dt>入場料：</dt>\n<dd class=\"sc_txt\">一般1,100円、大学生800円、高校生500円、中学生以下無料\n*15名以上は各料金から200円割引\n*障害者手帳をお持ちの方と、その付き添いの方1名は無料\nその他各種割引については<a href=\"https://www.2121designsight.jp/information/index.html\" \"target= _blank\">ご利用案内</a>をご覧ください</dd>\n</dl>\n\n<dl>\n<dt>主催：</dt>\n<dd class=\"sc_txt\">21_21 DESIGN SIGHT、公益財団法人 三宅一生デザイン文化財団</dd>\n</dl>\n\n</blockquote>\n\n<img src=\"https://www.2121designsight.jp/program/motion_science/top_poster.jpg\" alt=\"\" width=\"50%\"/>\n\n六本木に行くのはこれで5回目になる．この日はちょっと雨が降ってたけど，室内なので問題なし．だいたい1.5時間くらいで全体を回ることができた．\n受付で「フラッシュを炊かなければ撮影してもokです．」と言われた．\n展示場に入ってすぐのところにこの企画についてドキュメンタリー映像が流れていて，ある作品をプロトタイプする場面などが興味深かった．\n\n<img src=\"https://lh3.googleusercontent.com/RNMTEAqMjdutrHuVNeT5vZzW9meH0DVonYNHk50gkpw=w330-h220-no\" width=\"80%\">\n\nこれは小さいものを大きな影として壁に投影するというもの．レールの上をライトが走っていて，電車から窓の外を見ているような景色が壁に映されている．写真に写っている影はたぶん定規．\n遠近感が感じれらるのが面白い．\n\n<img src=\"https://lh3.googleusercontent.com/cA3IB6P9HQtXlxH8X2swGmXunc6S2r2jFMlBNJJuAjc=w717-h955-no\" width=\"60%\">\n\nミラーボールかと思いきや何やらぐにゃぐにゃ動いている．周りに散らばる光が羽のようになっていて，美しく動くさまが見ていて飽きない．連れがインテリアに欲しいと言っていたが，これは研究室にも一つ設置してほしい．\n\n<img src=\"https://lh3.googleusercontent.com/ejfSj-MQs3LoIsmINjm3y_rnHKL_nxJBCH3NA5V8Gsw=w717-h955-no\" width=\"60%\">\n\n真ん中の段に乗ってどこかを指すとベクトルたちも一斉に同じ方向を向く．\n\n<img src=\"https://lh3.googleusercontent.com/J3feunL3FuhZaW4Q4P2jU91bXJSnPAEO1vK8pI1WDKQ=w717-h955-no\" width=\"60%\">\n\n明かりがチカチカしている場所で傘を回すとアニメーションになる．\n\n<img src=\"https://lh3.googleusercontent.com/s_8nAk2MCsA1npF0cE3wCcZR2xiVR1CtHz3YF_yEPcQ=w717-h955-no\" width=\"60%\">\n\n落書きをすると書いた文字がデータとして集約され，再構成された文章として壁に書かれる．\n何と書いているのか全く分からないが，意味深な暗号に見えて不思議．\n\n他にも<a href=\"https://www.leapmotion.com/?lang=jp\" target= \"_blank\">Leap Motion</a>を使って旗を上げ下げするものや水を布を通して触るものなど，体験して楽しめる作品もあった．\nそのせいか子連れも多かったし，出入り口の物販点でもおもちゃコーナーがにぎわっていた．\nもっとエンジンとかそういう工学的なものが出てくるのかと思っていたがそういうことではなく，「動いている」ことの面白さにフォーカスされているような印象を受けた．作品は見た目はシンプルなのにどこか洗練されていて，透明感のある作品ばかりだった．\n\n","source":"_posts/2015-08-11-「動きのカガク展」に行ってきた.md","raw":"---\ntitle: 「動きのカガク展」に行ってきた\ndate: 2015-08-11 22:08:02\ncategory: 日記\n---\n\n六本木の21_21 DESIGN SIGHTで行われている「動きのカガク展」に行ってきた．\n\n<blockquote>\n<dl>\n<dd class=\"sc_txt\"><a href=\"https://www.2121designsight.jp/program/motion_science/\" target= \"_blank\">企画展「動きのカガク展」</a></dd>\n<dt>会期：</dt>\n<dd class=\"sc_txt\">2015年6月19日（金）- 9月27日（日）</dd>\n<dt>休館日：</dt>\n<dd class=\"sc_txt\">火曜日（9月22日は開館）</dd>\n<dt>開館時間：</dt>\n<dd class=\"sc_txt\">10:00 - 19:00（入場は18:30まで）</dd>\n<dt>入場料：</dt>\n<dd class=\"sc_txt\">一般1,100円、大学生800円、高校生500円、中学生以下無料\n*15名以上は各料金から200円割引\n*障害者手帳をお持ちの方と、その付き添いの方1名は無料\nその他各種割引については<a href=\"https://www.2121designsight.jp/information/index.html\" \"target= _blank\">ご利用案内</a>をご覧ください</dd>\n</dl>\n\n<dl>\n<dt>主催：</dt>\n<dd class=\"sc_txt\">21_21 DESIGN SIGHT、公益財団法人 三宅一生デザイン文化財団</dd>\n</dl>\n\n</blockquote>\n\n<img src=\"https://www.2121designsight.jp/program/motion_science/top_poster.jpg\" alt=\"\" width=\"50%\"/>\n\n六本木に行くのはこれで5回目になる．この日はちょっと雨が降ってたけど，室内なので問題なし．だいたい1.5時間くらいで全体を回ることができた．\n受付で「フラッシュを炊かなければ撮影してもokです．」と言われた．\n展示場に入ってすぐのところにこの企画についてドキュメンタリー映像が流れていて，ある作品をプロトタイプする場面などが興味深かった．\n\n<img src=\"https://lh3.googleusercontent.com/RNMTEAqMjdutrHuVNeT5vZzW9meH0DVonYNHk50gkpw=w330-h220-no\" width=\"80%\">\n\nこれは小さいものを大きな影として壁に投影するというもの．レールの上をライトが走っていて，電車から窓の外を見ているような景色が壁に映されている．写真に写っている影はたぶん定規．\n遠近感が感じれらるのが面白い．\n\n<img src=\"https://lh3.googleusercontent.com/cA3IB6P9HQtXlxH8X2swGmXunc6S2r2jFMlBNJJuAjc=w717-h955-no\" width=\"60%\">\n\nミラーボールかと思いきや何やらぐにゃぐにゃ動いている．周りに散らばる光が羽のようになっていて，美しく動くさまが見ていて飽きない．連れがインテリアに欲しいと言っていたが，これは研究室にも一つ設置してほしい．\n\n<img src=\"https://lh3.googleusercontent.com/ejfSj-MQs3LoIsmINjm3y_rnHKL_nxJBCH3NA5V8Gsw=w717-h955-no\" width=\"60%\">\n\n真ん中の段に乗ってどこかを指すとベクトルたちも一斉に同じ方向を向く．\n\n<img src=\"https://lh3.googleusercontent.com/J3feunL3FuhZaW4Q4P2jU91bXJSnPAEO1vK8pI1WDKQ=w717-h955-no\" width=\"60%\">\n\n明かりがチカチカしている場所で傘を回すとアニメーションになる．\n\n<img src=\"https://lh3.googleusercontent.com/s_8nAk2MCsA1npF0cE3wCcZR2xiVR1CtHz3YF_yEPcQ=w717-h955-no\" width=\"60%\">\n\n落書きをすると書いた文字がデータとして集約され，再構成された文章として壁に書かれる．\n何と書いているのか全く分からないが，意味深な暗号に見えて不思議．\n\n他にも<a href=\"https://www.leapmotion.com/?lang=jp\" target= \"_blank\">Leap Motion</a>を使って旗を上げ下げするものや水を布を通して触るものなど，体験して楽しめる作品もあった．\nそのせいか子連れも多かったし，出入り口の物販点でもおもちゃコーナーがにぎわっていた．\nもっとエンジンとかそういう工学的なものが出てくるのかと思っていたがそういうことではなく，「動いている」ことの面白さにフォーカスされているような印象を受けた．作品は見た目はシンプルなのにどこか洗練されていて，透明感のある作品ばかりだった．\n\n","slug":"「動きのカガク展」に行ってきた","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bezuc0024xgtvdmc10tda","comments":1,"layout":"post","photos":[],"link":"","content":"<p>六本木の21_21 DESIGN SIGHTで行われている「動きのカガク展」に行ってきた．</p>\n<blockquote>\n<dl>\n<dd class=\"sc_txt\"><a href=\"https://www.2121designsight.jp/program/motion_science/\" target= \"_blank\">企画展「動きのカガク展」</a></dd>\n<dt>会期：</dt>\n<dd class=\"sc_txt\">2015年6月19日（金）- 9月27日（日）</dd>\n<dt>休館日：</dt>\n<dd class=\"sc_txt\">火曜日（9月22日は開館）</dd>\n<dt>開館時間：</dt>\n<dd class=\"sc_txt\">10:00 - 19:00（入場は18:30まで）</dd>\n<dt>入場料：</dt>\n<dd class=\"sc_txt\">一般1,100円、大学生800円、高校生500円、中学生以下無料\n*15名以上は各料金から200円割引\n*障害者手帳をお持ちの方と、その付き添いの方1名は無料\nその他各種割引については<a href=\"https://www.2121designsight.jp/information/index.html\" \"target= _blank\">ご利用案内</a>をご覧ください</dd>\n</dl>\n\n<dl>\n<dt>主催：</dt>\n<dd class=\"sc_txt\">21_21 DESIGN SIGHT、公益財団法人 三宅一生デザイン文化財団</dd>\n</dl>\n\n</blockquote>\n\n<img src=\"https://www.2121designsight.jp/program/motion_science/top_poster.jpg\" alt=\"\" width=\"50%\"/>\n\n<p>六本木に行くのはこれで5回目になる．この日はちょっと雨が降ってたけど，室内なので問題なし．だいたい1.5時間くらいで全体を回ることができた．<br>受付で「フラッシュを炊かなければ撮影してもokです．」と言われた．<br>展示場に入ってすぐのところにこの企画についてドキュメンタリー映像が流れていて，ある作品をプロトタイプする場面などが興味深かった．</p>\n<img src=\"https://lh3.googleusercontent.com/RNMTEAqMjdutrHuVNeT5vZzW9meH0DVonYNHk50gkpw=w330-h220-no\" width=\"80%\">\n\n<p>これは小さいものを大きな影として壁に投影するというもの．レールの上をライトが走っていて，電車から窓の外を見ているような景色が壁に映されている．写真に写っている影はたぶん定規．<br>遠近感が感じれらるのが面白い．</p>\n<img src=\"https://lh3.googleusercontent.com/cA3IB6P9HQtXlxH8X2swGmXunc6S2r2jFMlBNJJuAjc=w717-h955-no\" width=\"60%\">\n\n<p>ミラーボールかと思いきや何やらぐにゃぐにゃ動いている．周りに散らばる光が羽のようになっていて，美しく動くさまが見ていて飽きない．連れがインテリアに欲しいと言っていたが，これは研究室にも一つ設置してほしい．</p>\n<img src=\"https://lh3.googleusercontent.com/ejfSj-MQs3LoIsmINjm3y_rnHKL_nxJBCH3NA5V8Gsw=w717-h955-no\" width=\"60%\">\n\n<p>真ん中の段に乗ってどこかを指すとベクトルたちも一斉に同じ方向を向く．</p>\n<img src=\"https://lh3.googleusercontent.com/J3feunL3FuhZaW4Q4P2jU91bXJSnPAEO1vK8pI1WDKQ=w717-h955-no\" width=\"60%\">\n\n<p>明かりがチカチカしている場所で傘を回すとアニメーションになる．</p>\n<img src=\"https://lh3.googleusercontent.com/s_8nAk2MCsA1npF0cE3wCcZR2xiVR1CtHz3YF_yEPcQ=w717-h955-no\" width=\"60%\">\n\n<p>落書きをすると書いた文字がデータとして集約され，再構成された文章として壁に書かれる．<br>何と書いているのか全く分からないが，意味深な暗号に見えて不思議．</p>\n<p>他にも<a href=\"https://www.leapmotion.com/?lang=jp\" target= \"_blank\">Leap Motion</a>を使って旗を上げ下げするものや水を布を通して触るものなど，体験して楽しめる作品もあった．<br>そのせいか子連れも多かったし，出入り口の物販点でもおもちゃコーナーがにぎわっていた．<br>もっとエンジンとかそういう工学的なものが出てくるのかと思っていたがそういうことではなく，「動いている」ことの面白さにフォーカスされているような印象を受けた．作品は見た目はシンプルなのにどこか洗練されていて，透明感のある作品ばかりだった．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>六本木の21_21 DESIGN SIGHTで行われている「動きのカガク展」に行ってきた．</p>\n<blockquote>\n<dl>\n<dd class=\"sc_txt\"><a href=\"https://www.2121designsight.jp/program/motion_science/\" target= \"_blank\">企画展「動きのカガク展」</a></dd>\n<dt>会期：</dt>\n<dd class=\"sc_txt\">2015年6月19日（金）- 9月27日（日）</dd>\n<dt>休館日：</dt>\n<dd class=\"sc_txt\">火曜日（9月22日は開館）</dd>\n<dt>開館時間：</dt>\n<dd class=\"sc_txt\">10:00 - 19:00（入場は18:30まで）</dd>\n<dt>入場料：</dt>\n<dd class=\"sc_txt\">一般1,100円、大学生800円、高校生500円、中学生以下無料\n*15名以上は各料金から200円割引\n*障害者手帳をお持ちの方と、その付き添いの方1名は無料\nその他各種割引については<a href=\"https://www.2121designsight.jp/information/index.html\" \"target= _blank\">ご利用案内</a>をご覧ください</dd>\n</dl>\n\n<dl>\n<dt>主催：</dt>\n<dd class=\"sc_txt\">21_21 DESIGN SIGHT、公益財団法人 三宅一生デザイン文化財団</dd>\n</dl>\n\n</blockquote>\n\n<img src=\"https://www.2121designsight.jp/program/motion_science/top_poster.jpg\" alt=\"\" width=\"50%\"/>\n\n<p>六本木に行くのはこれで5回目になる．この日はちょっと雨が降ってたけど，室内なので問題なし．だいたい1.5時間くらいで全体を回ることができた．<br>受付で「フラッシュを炊かなければ撮影してもokです．」と言われた．<br>展示場に入ってすぐのところにこの企画についてドキュメンタリー映像が流れていて，ある作品をプロトタイプする場面などが興味深かった．</p>\n<img src=\"https://lh3.googleusercontent.com/RNMTEAqMjdutrHuVNeT5vZzW9meH0DVonYNHk50gkpw=w330-h220-no\" width=\"80%\">\n\n<p>これは小さいものを大きな影として壁に投影するというもの．レールの上をライトが走っていて，電車から窓の外を見ているような景色が壁に映されている．写真に写っている影はたぶん定規．<br>遠近感が感じれらるのが面白い．</p>\n<img src=\"https://lh3.googleusercontent.com/cA3IB6P9HQtXlxH8X2swGmXunc6S2r2jFMlBNJJuAjc=w717-h955-no\" width=\"60%\">\n\n<p>ミラーボールかと思いきや何やらぐにゃぐにゃ動いている．周りに散らばる光が羽のようになっていて，美しく動くさまが見ていて飽きない．連れがインテリアに欲しいと言っていたが，これは研究室にも一つ設置してほしい．</p>\n<img src=\"https://lh3.googleusercontent.com/ejfSj-MQs3LoIsmINjm3y_rnHKL_nxJBCH3NA5V8Gsw=w717-h955-no\" width=\"60%\">\n\n<p>真ん中の段に乗ってどこかを指すとベクトルたちも一斉に同じ方向を向く．</p>\n<img src=\"https://lh3.googleusercontent.com/J3feunL3FuhZaW4Q4P2jU91bXJSnPAEO1vK8pI1WDKQ=w717-h955-no\" width=\"60%\">\n\n<p>明かりがチカチカしている場所で傘を回すとアニメーションになる．</p>\n<img src=\"https://lh3.googleusercontent.com/s_8nAk2MCsA1npF0cE3wCcZR2xiVR1CtHz3YF_yEPcQ=w717-h955-no\" width=\"60%\">\n\n<p>落書きをすると書いた文字がデータとして集約され，再構成された文章として壁に書かれる．<br>何と書いているのか全く分からないが，意味深な暗号に見えて不思議．</p>\n<p>他にも<a href=\"https://www.leapmotion.com/?lang=jp\" target= \"_blank\">Leap Motion</a>を使って旗を上げ下げするものや水を布を通して触るものなど，体験して楽しめる作品もあった．<br>そのせいか子連れも多かったし，出入り口の物販点でもおもちゃコーナーがにぎわっていた．<br>もっとエンジンとかそういう工学的なものが出てくるのかと思っていたがそういうことではなく，「動いている」ことの面白さにフォーカスされているような印象を受けた．作品は見た目はシンプルなのにどこか洗練されていて，透明感のある作品ばかりだった．</p>\n"},{"title":"ownCloud8.1.3の更新時にエラーが出る","date":"2015-10-01T01:33:13.000Z","_content":"\n久しぶりにowncloudを使おうと思ってアクセスしてみたら，アップデートの通知が来ていたのでさっそく試してみた．\nダウンロードまで順調だったのだが，いざインストールしようとするとこんなエラーが\n\n```\nException: Please upload the ca-bundle.crt file into the 'config' directory.\n```\n\nとりあえずググってみるとすぐに見つかった．\n<a href=\"https://forum.owncloud.org/viewtopic.php?t=30540&p=97096\">Exception: Please upload the ca-bundle.crt</a>\nこの記事の通りに以下のコマンドを実行したら無事解決した．\n\n```\nuser@machine:/var/www/owncloud/config$ sudo -u www-data wget <a href=\"https://raw.githubusercontent.com/owncloud/core/stable8.1/config/ca-bundle.crt\">https://raw.githubusercontent.com/owncloud/core/stable8.1/config/ca-bundle.crt</a>\n```\n\n","source":"_posts/2015-10-01-ownCloud8.1.3の更新時にエラーが出る.md","raw":"---\ntitle: ownCloud8.1.3の更新時にエラーが出る\ndate: 2015-10-01 10:33:13\ncategory: ownCloud\n---\n\n久しぶりにowncloudを使おうと思ってアクセスしてみたら，アップデートの通知が来ていたのでさっそく試してみた．\nダウンロードまで順調だったのだが，いざインストールしようとするとこんなエラーが\n\n```\nException: Please upload the ca-bundle.crt file into the 'config' directory.\n```\n\nとりあえずググってみるとすぐに見つかった．\n<a href=\"https://forum.owncloud.org/viewtopic.php?t=30540&p=97096\">Exception: Please upload the ca-bundle.crt</a>\nこの記事の通りに以下のコマンドを実行したら無事解決した．\n\n```\nuser@machine:/var/www/owncloud/config$ sudo -u www-data wget <a href=\"https://raw.githubusercontent.com/owncloud/core/stable8.1/config/ca-bundle.crt\">https://raw.githubusercontent.com/owncloud/core/stable8.1/config/ca-bundle.crt</a>\n```\n\n","slug":"ownCloud8.1.3の更新時にエラーが出る","published":1,"updated":"2020-05-16T07:34:39.285Z","_id":"cka9bf2910026xgtv78vbhds4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>久しぶりにowncloudを使おうと思ってアクセスしてみたら，アップデートの通知が来ていたのでさっそく試してみた．<br>ダウンロードまで順調だったのだが，いざインストールしようとするとこんなエラーが</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception: Please upload the ca-bundle.crt file into the &#39;config&#39; directory.</span><br></pre></td></tr></table></figure>\n\n<p>とりあえずググってみるとすぐに見つかった．<br><a href=\"https://forum.owncloud.org/viewtopic.php?t=30540&p=97096\">Exception: Please upload the ca-bundle.crt</a><br>この記事の通りに以下のコマンドを実行したら無事解決した．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user@machine:&#x2F;var&#x2F;www&#x2F;owncloud&#x2F;config$ sudo -u www-data wget &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;owncloud&#x2F;core&#x2F;stable8.1&#x2F;config&#x2F;ca-bundle.crt&quot;&gt;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;owncloud&#x2F;core&#x2F;stable8.1&#x2F;config&#x2F;ca-bundle.crt&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>久しぶりにowncloudを使おうと思ってアクセスしてみたら，アップデートの通知が来ていたのでさっそく試してみた．<br>ダウンロードまで順調だったのだが，いざインストールしようとするとこんなエラーが</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception: Please upload the ca-bundle.crt file into the &#39;config&#39; directory.</span><br></pre></td></tr></table></figure>\n\n<p>とりあえずググってみるとすぐに見つかった．<br><a href=\"https://forum.owncloud.org/viewtopic.php?t=30540&p=97096\">Exception: Please upload the ca-bundle.crt</a><br>この記事の通りに以下のコマンドを実行したら無事解決した．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user@machine:&#x2F;var&#x2F;www&#x2F;owncloud&#x2F;config$ sudo -u www-data wget &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;owncloud&#x2F;core&#x2F;stable8.1&#x2F;config&#x2F;ca-bundle.crt&quot;&gt;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;owncloud&#x2F;core&#x2F;stable8.1&#x2F;config&#x2F;ca-bundle.crt&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"WordPressからはてなブログにお引越しした","date":"2015-10-31T15:53:36.000Z","_content":"\n去年の夏くらいからこっちの更新を止めてしばらくWordPressでブログをやっていたのだけど，サーバの解約に伴ってはてなブログにまた厄介になることになった．\n\n幸いWordPressで書いた記事はすべてインポートすることができた．この辺はさすがによくできている．\n両方使ってみて実感したことがいろいろあって，メモ書きとして残してみようと思う．\n\n以下，僕が自鯖でのWordPressよりはてなブログのほうがよいと思った点を挙げていく\n\n\n### サーバ・ドメイン管理コストがかからない\n\n自前でサーバを用意する場合は月額料金がかかる．無料のレンタルサーバなんてのもあるんだけど，アクセス数が増えるとすぐに怒られる．\n実際，サークル立ち上げ時にHPを無料レンタルサーバで管理したことがあるんだけど，半年くらいで警告メールが来てしまった．同じ無料でもブログサービスを使用する場合はこんなことはありえないし，突然サービスが終わることもあまりない（ないよね！？）ので，気にする必要はない．\n\n### サーバ周りの知識が不要\n\nブログを始める前からつまずいてしまっては元も子もない．WordPeressの場合はデータベースってなんやってところから始まって，意外とつまずきポイントがある．\n「そんくらいで諦めるようならどうせ続かないでしょ」という考え方もあるけど，せっかくやる気のある人にそれはひどい．もちろん頑張れば結構知識つくので興味ある人はどうぞ．ちなみにはてなブログの場合は今のところそういう内部の構造とかを気にする必要はない．\n\n### サイトの管理が楽\n\nWordPressの場合，記事を書くぞ～と思ってサイトを開くと大抵プラグインやテーマの更新がたまっている．アプリのアップデートみたいなものなので放っておいてもいいのだが，\n一つコンテンツを作り上げるのに比べると更新ボタンを押すほうがずっと楽なのでどうしても先にそういう作業を初めてしまう．勉強をするつもりが掃除を始めていたみたいな感覚かも．\n\nその点はてなブログは執筆に専念できる気がする．ちょっと偏見．\n\n### デザインがよい\n\nもちろんWordPressにもたくさんテンプレートとなるデザインがあるのだが，はてなブログのテーマのほうが全体的に洗練されている印象を受ける．なんというか，日本人の感性に合ってる感じ（そりゃそうか）．\n特にスマホでみたときの違いはかなり大きい．無駄にでかいスライダーとかなくていいよね．\n\n## まとめ\n\n代表的なのはこんな感じである．あとは皆やってるからとかそういう理由もある．少なくとも，ブログサービスを使うのは素人でちゃんと情報系の人は自分でサーバをこしらえて…なんて時代ではないんだなと思う．むしろ今はチャットやSNS，ブログなど目的にあわせて専用のサービスを使ったほうが何かと都合がよい．\n\nブログはいいけどLPとかどうするの？という問いに対してはGitHubPagesとGoogleDriveの公開機能がおすすめといっておく．前者は独自ドメインを設定できるし，後者はより簡単に利用することができる．webサービスを公開したければそういうサービスを使えばいいと思う．Herokuとか．\n\n","source":"_posts/2015-11-01-WordPressからはてなブログにお引越しした.md","raw":"---\ntitle: WordPressからはてなブログにお引越しした\ndate: 2015-11-01 00:53:36\ncategory: 日記\n---\n\n去年の夏くらいからこっちの更新を止めてしばらくWordPressでブログをやっていたのだけど，サーバの解約に伴ってはてなブログにまた厄介になることになった．\n\n幸いWordPressで書いた記事はすべてインポートすることができた．この辺はさすがによくできている．\n両方使ってみて実感したことがいろいろあって，メモ書きとして残してみようと思う．\n\n以下，僕が自鯖でのWordPressよりはてなブログのほうがよいと思った点を挙げていく\n\n\n### サーバ・ドメイン管理コストがかからない\n\n自前でサーバを用意する場合は月額料金がかかる．無料のレンタルサーバなんてのもあるんだけど，アクセス数が増えるとすぐに怒られる．\n実際，サークル立ち上げ時にHPを無料レンタルサーバで管理したことがあるんだけど，半年くらいで警告メールが来てしまった．同じ無料でもブログサービスを使用する場合はこんなことはありえないし，突然サービスが終わることもあまりない（ないよね！？）ので，気にする必要はない．\n\n### サーバ周りの知識が不要\n\nブログを始める前からつまずいてしまっては元も子もない．WordPeressの場合はデータベースってなんやってところから始まって，意外とつまずきポイントがある．\n「そんくらいで諦めるようならどうせ続かないでしょ」という考え方もあるけど，せっかくやる気のある人にそれはひどい．もちろん頑張れば結構知識つくので興味ある人はどうぞ．ちなみにはてなブログの場合は今のところそういう内部の構造とかを気にする必要はない．\n\n### サイトの管理が楽\n\nWordPressの場合，記事を書くぞ～と思ってサイトを開くと大抵プラグインやテーマの更新がたまっている．アプリのアップデートみたいなものなので放っておいてもいいのだが，\n一つコンテンツを作り上げるのに比べると更新ボタンを押すほうがずっと楽なのでどうしても先にそういう作業を初めてしまう．勉強をするつもりが掃除を始めていたみたいな感覚かも．\n\nその点はてなブログは執筆に専念できる気がする．ちょっと偏見．\n\n### デザインがよい\n\nもちろんWordPressにもたくさんテンプレートとなるデザインがあるのだが，はてなブログのテーマのほうが全体的に洗練されている印象を受ける．なんというか，日本人の感性に合ってる感じ（そりゃそうか）．\n特にスマホでみたときの違いはかなり大きい．無駄にでかいスライダーとかなくていいよね．\n\n## まとめ\n\n代表的なのはこんな感じである．あとは皆やってるからとかそういう理由もある．少なくとも，ブログサービスを使うのは素人でちゃんと情報系の人は自分でサーバをこしらえて…なんて時代ではないんだなと思う．むしろ今はチャットやSNS，ブログなど目的にあわせて専用のサービスを使ったほうが何かと都合がよい．\n\nブログはいいけどLPとかどうするの？という問いに対してはGitHubPagesとGoogleDriveの公開機能がおすすめといっておく．前者は独自ドメインを設定できるし，後者はより簡単に利用することができる．webサービスを公開したければそういうサービスを使えばいいと思う．Herokuとか．\n\n","slug":"WordPressからはてなブログにお引越しした","published":1,"updated":"2020-05-16T07:34:41.459Z","_id":"cka9bf3vo0029xgtv6r4xe6bd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>去年の夏くらいからこっちの更新を止めてしばらくWordPressでブログをやっていたのだけど，サーバの解約に伴ってはてなブログにまた厄介になることになった．</p>\n<p>幸いWordPressで書いた記事はすべてインポートすることができた．この辺はさすがによくできている．<br>両方使ってみて実感したことがいろいろあって，メモ書きとして残してみようと思う．</p>\n<p>以下，僕が自鯖でのWordPressよりはてなブログのほうがよいと思った点を挙げていく</p>\n<h3 id=\"サーバ・ドメイン管理コストがかからない\"><a href=\"#サーバ・ドメイン管理コストがかからない\" class=\"headerlink\" title=\"サーバ・ドメイン管理コストがかからない\"></a>サーバ・ドメイン管理コストがかからない</h3><p>自前でサーバを用意する場合は月額料金がかかる．無料のレンタルサーバなんてのもあるんだけど，アクセス数が増えるとすぐに怒られる．<br>実際，サークル立ち上げ時にHPを無料レンタルサーバで管理したことがあるんだけど，半年くらいで警告メールが来てしまった．同じ無料でもブログサービスを使用する場合はこんなことはありえないし，突然サービスが終わることもあまりない（ないよね！？）ので，気にする必要はない．</p>\n<h3 id=\"サーバ周りの知識が不要\"><a href=\"#サーバ周りの知識が不要\" class=\"headerlink\" title=\"サーバ周りの知識が不要\"></a>サーバ周りの知識が不要</h3><p>ブログを始める前からつまずいてしまっては元も子もない．WordPeressの場合はデータベースってなんやってところから始まって，意外とつまずきポイントがある．<br>「そんくらいで諦めるようならどうせ続かないでしょ」という考え方もあるけど，せっかくやる気のある人にそれはひどい．もちろん頑張れば結構知識つくので興味ある人はどうぞ．ちなみにはてなブログの場合は今のところそういう内部の構造とかを気にする必要はない．</p>\n<h3 id=\"サイトの管理が楽\"><a href=\"#サイトの管理が楽\" class=\"headerlink\" title=\"サイトの管理が楽\"></a>サイトの管理が楽</h3><p>WordPressの場合，記事を書くぞ～と思ってサイトを開くと大抵プラグインやテーマの更新がたまっている．アプリのアップデートみたいなものなので放っておいてもいいのだが，<br>一つコンテンツを作り上げるのに比べると更新ボタンを押すほうがずっと楽なのでどうしても先にそういう作業を初めてしまう．勉強をするつもりが掃除を始めていたみたいな感覚かも．</p>\n<p>その点はてなブログは執筆に専念できる気がする．ちょっと偏見．</p>\n<h3 id=\"デザインがよい\"><a href=\"#デザインがよい\" class=\"headerlink\" title=\"デザインがよい\"></a>デザインがよい</h3><p>もちろんWordPressにもたくさんテンプレートとなるデザインがあるのだが，はてなブログのテーマのほうが全体的に洗練されている印象を受ける．なんというか，日本人の感性に合ってる感じ（そりゃそうか）．<br>特にスマホでみたときの違いはかなり大きい．無駄にでかいスライダーとかなくていいよね．</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>代表的なのはこんな感じである．あとは皆やってるからとかそういう理由もある．少なくとも，ブログサービスを使うのは素人でちゃんと情報系の人は自分でサーバをこしらえて…なんて時代ではないんだなと思う．むしろ今はチャットやSNS，ブログなど目的にあわせて専用のサービスを使ったほうが何かと都合がよい．</p>\n<p>ブログはいいけどLPとかどうするの？という問いに対してはGitHubPagesとGoogleDriveの公開機能がおすすめといっておく．前者は独自ドメインを設定できるし，後者はより簡単に利用することができる．webサービスを公開したければそういうサービスを使えばいいと思う．Herokuとか．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>去年の夏くらいからこっちの更新を止めてしばらくWordPressでブログをやっていたのだけど，サーバの解約に伴ってはてなブログにまた厄介になることになった．</p>\n<p>幸いWordPressで書いた記事はすべてインポートすることができた．この辺はさすがによくできている．<br>両方使ってみて実感したことがいろいろあって，メモ書きとして残してみようと思う．</p>\n<p>以下，僕が自鯖でのWordPressよりはてなブログのほうがよいと思った点を挙げていく</p>\n<h3 id=\"サーバ・ドメイン管理コストがかからない\"><a href=\"#サーバ・ドメイン管理コストがかからない\" class=\"headerlink\" title=\"サーバ・ドメイン管理コストがかからない\"></a>サーバ・ドメイン管理コストがかからない</h3><p>自前でサーバを用意する場合は月額料金がかかる．無料のレンタルサーバなんてのもあるんだけど，アクセス数が増えるとすぐに怒られる．<br>実際，サークル立ち上げ時にHPを無料レンタルサーバで管理したことがあるんだけど，半年くらいで警告メールが来てしまった．同じ無料でもブログサービスを使用する場合はこんなことはありえないし，突然サービスが終わることもあまりない（ないよね！？）ので，気にする必要はない．</p>\n<h3 id=\"サーバ周りの知識が不要\"><a href=\"#サーバ周りの知識が不要\" class=\"headerlink\" title=\"サーバ周りの知識が不要\"></a>サーバ周りの知識が不要</h3><p>ブログを始める前からつまずいてしまっては元も子もない．WordPeressの場合はデータベースってなんやってところから始まって，意外とつまずきポイントがある．<br>「そんくらいで諦めるようならどうせ続かないでしょ」という考え方もあるけど，せっかくやる気のある人にそれはひどい．もちろん頑張れば結構知識つくので興味ある人はどうぞ．ちなみにはてなブログの場合は今のところそういう内部の構造とかを気にする必要はない．</p>\n<h3 id=\"サイトの管理が楽\"><a href=\"#サイトの管理が楽\" class=\"headerlink\" title=\"サイトの管理が楽\"></a>サイトの管理が楽</h3><p>WordPressの場合，記事を書くぞ～と思ってサイトを開くと大抵プラグインやテーマの更新がたまっている．アプリのアップデートみたいなものなので放っておいてもいいのだが，<br>一つコンテンツを作り上げるのに比べると更新ボタンを押すほうがずっと楽なのでどうしても先にそういう作業を初めてしまう．勉強をするつもりが掃除を始めていたみたいな感覚かも．</p>\n<p>その点はてなブログは執筆に専念できる気がする．ちょっと偏見．</p>\n<h3 id=\"デザインがよい\"><a href=\"#デザインがよい\" class=\"headerlink\" title=\"デザインがよい\"></a>デザインがよい</h3><p>もちろんWordPressにもたくさんテンプレートとなるデザインがあるのだが，はてなブログのテーマのほうが全体的に洗練されている印象を受ける．なんというか，日本人の感性に合ってる感じ（そりゃそうか）．<br>特にスマホでみたときの違いはかなり大きい．無駄にでかいスライダーとかなくていいよね．</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>代表的なのはこんな感じである．あとは皆やってるからとかそういう理由もある．少なくとも，ブログサービスを使うのは素人でちゃんと情報系の人は自分でサーバをこしらえて…なんて時代ではないんだなと思う．むしろ今はチャットやSNS，ブログなど目的にあわせて専用のサービスを使ったほうが何かと都合がよい．</p>\n<p>ブログはいいけどLPとかどうするの？という問いに対してはGitHubPagesとGoogleDriveの公開機能がおすすめといっておく．前者は独自ドメインを設定できるし，後者はより簡単に利用することができる．webサービスを公開したければそういうサービスを使えばいいと思う．Herokuとか．</p>\n"},{"title":"Texを使ってみた","date":"2015-11-02T16:03:11.000Z","_content":"\n最近ゼミの発表会のためにレジュメを書く機会があったので，前々からやろうと思っていたLaTexのセットアップをやってみた．\n\n環境はWindows10．以下のサイトを見ながらインストールしてみた．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fdid2memo.net%2F2014%2F03%2F06%2Feasy-latex-install-windows-8-2014-03%2F\" title=\"簡単LaTeXインストールWindows編（2015年7月版）\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://did2memo.net/2014/03/06/easy-latex-install-windows-8-2014-03/\">did2memo.net</a></cite>\n\nちょっとリンクを書き換えた以外はスムーズに入った．\n\nTexWorksなるエディタも一緒についてきたので使ってみる．\n\nなかなか時代を感じるUIだけども，ささっとpdfを生成してプレビューしてくれるのがよい．\n\nただ，たまに全角の特殊記号とか間違えて書いちゃうとエディタが変になってしまうので他の環境も調べたところ，atomでできそうな記事があった．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FJohn110%2Fitems%2F3c695beb2ed54b7730b9\" title=\"Atomで日本語TeXをコンパイル可能にした話 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/John110/items/3c695beb2ed54b7730b9\">qiita.com</a></cite>\n\n次の機会に挑戦してみようかな．\n\nTexを使ってみた感想としては，wordよりも文書を書くことに集中できてよいと思う．htmlっぽいというか，スタイルをすべてコマンドで記述しているのが見えるので本文のところだけ書き換えればいいという安心感がある．\n今後は，テンプレートがある場合はwordとおさらばかな．\n\n","source":"_posts/2015-11-03-Texを使ってみた.md","raw":"---\ntitle: Texを使ってみた\ndate: 2015-11-03 01:03:11\ncategory: Tex\n---\n\n最近ゼミの発表会のためにレジュメを書く機会があったので，前々からやろうと思っていたLaTexのセットアップをやってみた．\n\n環境はWindows10．以下のサイトを見ながらインストールしてみた．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fdid2memo.net%2F2014%2F03%2F06%2Feasy-latex-install-windows-8-2014-03%2F\" title=\"簡単LaTeXインストールWindows編（2015年7月版）\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://did2memo.net/2014/03/06/easy-latex-install-windows-8-2014-03/\">did2memo.net</a></cite>\n\nちょっとリンクを書き換えた以外はスムーズに入った．\n\nTexWorksなるエディタも一緒についてきたので使ってみる．\n\nなかなか時代を感じるUIだけども，ささっとpdfを生成してプレビューしてくれるのがよい．\n\nただ，たまに全角の特殊記号とか間違えて書いちゃうとエディタが変になってしまうので他の環境も調べたところ，atomでできそうな記事があった．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FJohn110%2Fitems%2F3c695beb2ed54b7730b9\" title=\"Atomで日本語TeXをコンパイル可能にした話 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/John110/items/3c695beb2ed54b7730b9\">qiita.com</a></cite>\n\n次の機会に挑戦してみようかな．\n\nTexを使ってみた感想としては，wordよりも文書を書くことに集中できてよいと思う．htmlっぽいというか，スタイルをすべてコマンドで記述しているのが見えるので本文のところだけ書き換えればいいという安心感がある．\n今後は，テンプレートがある場合はwordとおさらばかな．\n\n","slug":"Texを使ってみた","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bf5ea002bxgtv0i9k3xxr","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近ゼミの発表会のためにレジュメを書く機会があったので，前々からやろうと思っていたLaTexのセットアップをやってみた．</p>\n<p>環境はWindows10．以下のサイトを見ながらインストールしてみた．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fdid2memo.net%2F2014%2F03%2F06%2Feasy-latex-install-windows-8-2014-03%2F\" title=\"簡単LaTeXインストールWindows編（2015年7月版）\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://did2memo.net/2014/03/06/easy-latex-install-windows-8-2014-03/\">did2memo.net</a></cite>\n\n<p>ちょっとリンクを書き換えた以外はスムーズに入った．</p>\n<p>TexWorksなるエディタも一緒についてきたので使ってみる．</p>\n<p>なかなか時代を感じるUIだけども，ささっとpdfを生成してプレビューしてくれるのがよい．</p>\n<p>ただ，たまに全角の特殊記号とか間違えて書いちゃうとエディタが変になってしまうので他の環境も調べたところ，atomでできそうな記事があった．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FJohn110%2Fitems%2F3c695beb2ed54b7730b9\" title=\"Atomで日本語TeXをコンパイル可能にした話 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/John110/items/3c695beb2ed54b7730b9\">qiita.com</a></cite>\n\n<p>次の機会に挑戦してみようかな．</p>\n<p>Texを使ってみた感想としては，wordよりも文書を書くことに集中できてよいと思う．htmlっぽいというか，スタイルをすべてコマンドで記述しているのが見えるので本文のところだけ書き換えればいいという安心感がある．<br>今後は，テンプレートがある場合はwordとおさらばかな．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近ゼミの発表会のためにレジュメを書く機会があったので，前々からやろうと思っていたLaTexのセットアップをやってみた．</p>\n<p>環境はWindows10．以下のサイトを見ながらインストールしてみた．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fdid2memo.net%2F2014%2F03%2F06%2Feasy-latex-install-windows-8-2014-03%2F\" title=\"簡単LaTeXインストールWindows編（2015年7月版）\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://did2memo.net/2014/03/06/easy-latex-install-windows-8-2014-03/\">did2memo.net</a></cite>\n\n<p>ちょっとリンクを書き換えた以外はスムーズに入った．</p>\n<p>TexWorksなるエディタも一緒についてきたので使ってみる．</p>\n<p>なかなか時代を感じるUIだけども，ささっとpdfを生成してプレビューしてくれるのがよい．</p>\n<p>ただ，たまに全角の特殊記号とか間違えて書いちゃうとエディタが変になってしまうので他の環境も調べたところ，atomでできそうな記事があった．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fqiita.com%2FJohn110%2Fitems%2F3c695beb2ed54b7730b9\" title=\"Atomで日本語TeXをコンパイル可能にした話 - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/John110/items/3c695beb2ed54b7730b9\">qiita.com</a></cite>\n\n<p>次の機会に挑戦してみようかな．</p>\n<p>Texを使ってみた感想としては，wordよりも文書を書くことに集中できてよいと思う．htmlっぽいというか，スタイルをすべてコマンドで記述しているのが見えるので本文のところだけ書き換えればいいという安心感がある．<br>今後は，テンプレートがある場合はwordとおさらばかな．</p>\n"},{"title":"Windows10でdockerやろうとしてハマった","date":"2015-11-04T05:20:31.000Z","_content":"\nローカルでの開発にdocker使ってみようと思ってハマったのでメモ．\n\nWindowsでdockerを直接使うことはできないので，dockerが動いている仮想環境にアクセスして間接的に操作することになる．\n\ndockerが入った仮想マシンを用意してくれるboot2dockerというものを見つけたのでインストールしてみたが，これは既に非推奨らしくdocker-machineを使えとのこと．\n\nというわけでdocker-machineをインストール chocolateyなら簡単である\n\n```\nchoco install docker-\n```\n\n以下のコマンドで仮想環境はが作れるはず\n\n```\ndocker-machine create -d virtualbox dev\n```\n\nさてマシンを作るぞー とコマンドを打つとなにやらエラーが\n\n```\nError creating machine: exit status 1\n```\n\nこのままでは何が悪いのか分からないので、とりあえずググってみたところ、デバッグ用のオプションがあるらしい\n\nそして見つけたエラーがこれ\n\n```\nerror: Failed to create the host-only adapter\n```\n\nネットワークがなんか悪いのかなーと思ってしばらくvbox弄ってみたりバージョンを落としたりしたけど変わらず…\n\nしょうがないのでまたググってみるとこの記事にたどり着いた\n\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Fkobarn%2F20150805\" title=\"Vagrantでのhost-only adapterのエラーを回避する方法 on Windows10\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://d.hatena.ne.jp/kobarn/20150805\">d.hatena.ne.jp</a></cite>\n\nWindows10が悪いんか…\n解決法はあるようなので、その通りにexeファイルをダウンロード、起動したままさっきのコマンドを打ったら見事にエラーは消え去った\n\n","source":"_posts/2015-11-04-Windows10でdockerやろうとしてハマった.md","raw":"---\ntitle: Windows10でdockerやろうとしてハマった\ndate: 2015-11-04 14:20:31\n---\n\nローカルでの開発にdocker使ってみようと思ってハマったのでメモ．\n\nWindowsでdockerを直接使うことはできないので，dockerが動いている仮想環境にアクセスして間接的に操作することになる．\n\ndockerが入った仮想マシンを用意してくれるboot2dockerというものを見つけたのでインストールしてみたが，これは既に非推奨らしくdocker-machineを使えとのこと．\n\nというわけでdocker-machineをインストール chocolateyなら簡単である\n\n```\nchoco install docker-\n```\n\n以下のコマンドで仮想環境はが作れるはず\n\n```\ndocker-machine create -d virtualbox dev\n```\n\nさてマシンを作るぞー とコマンドを打つとなにやらエラーが\n\n```\nError creating machine: exit status 1\n```\n\nこのままでは何が悪いのか分からないので、とりあえずググってみたところ、デバッグ用のオプションがあるらしい\n\nそして見つけたエラーがこれ\n\n```\nerror: Failed to create the host-only adapter\n```\n\nネットワークがなんか悪いのかなーと思ってしばらくvbox弄ってみたりバージョンを落としたりしたけど変わらず…\n\nしょうがないのでまたググってみるとこの記事にたどり着いた\n\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Fkobarn%2F20150805\" title=\"Vagrantでのhost-only adapterのエラーを回避する方法 on Windows10\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://d.hatena.ne.jp/kobarn/20150805\">d.hatena.ne.jp</a></cite>\n\nWindows10が悪いんか…\n解決法はあるようなので、その通りにexeファイルをダウンロード、起動したままさっきのコマンドを打ったら見事にエラーは消え去った\n\n","slug":"Windows10でdockerやろうとしてハマった","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bf6w6002exgtv5y03gvhg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ローカルでの開発にdocker使ってみようと思ってハマったのでメモ．</p>\n<p>Windowsでdockerを直接使うことはできないので，dockerが動いている仮想環境にアクセスして間接的に操作することになる．</p>\n<p>dockerが入った仮想マシンを用意してくれるboot2dockerというものを見つけたのでインストールしてみたが，これは既に非推奨らしくdocker-machineを使えとのこと．</p>\n<p>というわけでdocker-machineをインストール chocolateyなら簡単である</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install docker-</span><br></pre></td></tr></table></figure>\n\n<p>以下のコマンドで仮想環境はが作れるはず</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d virtualbox dev</span><br></pre></td></tr></table></figure>\n\n<p>さてマシンを作るぞー とコマンドを打つとなにやらエラーが</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error creating machine: exit status 1</span><br></pre></td></tr></table></figure>\n\n<p>このままでは何が悪いのか分からないので、とりあえずググってみたところ、デバッグ用のオプションがあるらしい</p>\n<p>そして見つけたエラーがこれ</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: Failed to create the host-only adapter</span><br></pre></td></tr></table></figure>\n\n<p>ネットワークがなんか悪いのかなーと思ってしばらくvbox弄ってみたりバージョンを落としたりしたけど変わらず…</p>\n<p>しょうがないのでまたググってみるとこの記事にたどり着いた</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Fkobarn%2F20150805\" title=\"Vagrantでのhost-only adapterのエラーを回避する方法 on Windows10\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://d.hatena.ne.jp/kobarn/20150805\">d.hatena.ne.jp</a></cite>\n\n<p>Windows10が悪いんか…<br>解決法はあるようなので、その通りにexeファイルをダウンロード、起動したままさっきのコマンドを打ったら見事にエラーは消え去った</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ローカルでの開発にdocker使ってみようと思ってハマったのでメモ．</p>\n<p>Windowsでdockerを直接使うことはできないので，dockerが動いている仮想環境にアクセスして間接的に操作することになる．</p>\n<p>dockerが入った仮想マシンを用意してくれるboot2dockerというものを見つけたのでインストールしてみたが，これは既に非推奨らしくdocker-machineを使えとのこと．</p>\n<p>というわけでdocker-machineをインストール chocolateyなら簡単である</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install docker-</span><br></pre></td></tr></table></figure>\n\n<p>以下のコマンドで仮想環境はが作れるはず</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-machine create -d virtualbox dev</span><br></pre></td></tr></table></figure>\n\n<p>さてマシンを作るぞー とコマンドを打つとなにやらエラーが</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error creating machine: exit status 1</span><br></pre></td></tr></table></figure>\n\n<p>このままでは何が悪いのか分からないので、とりあえずググってみたところ、デバッグ用のオプションがあるらしい</p>\n<p>そして見つけたエラーがこれ</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: Failed to create the host-only adapter</span><br></pre></td></tr></table></figure>\n\n<p>ネットワークがなんか悪いのかなーと思ってしばらくvbox弄ってみたりバージョンを落としたりしたけど変わらず…</p>\n<p>しょうがないのでまたググってみるとこの記事にたどり着いた</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fd.hatena.ne.jp%2Fkobarn%2F20150805\" title=\"Vagrantでのhost-only adapterのエラーを回避する方法 on Windows10\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://d.hatena.ne.jp/kobarn/20150805\">d.hatena.ne.jp</a></cite>\n\n<p>Windows10が悪いんか…<br>解決法はあるようなので、その通りにexeファイルをダウンロード、起動したままさっきのコマンドを打ったら見事にエラーは消え去った</p>\n"},{"title":"気が付いたらクラウド依存になっていた","date":"2016-02-28T15:20:50.000Z","_content":"\n研究室で新しくPCを貸出してもらえることになった．ハイエンドなスペックではないけど，まあまあ使える．\n自分のPCは外部ディスプレイへの出力端子がmicroHDMIというやつしかないので，コンバータをかませる必要がある．これがなかなか貧弱なやつで，発表会の時にスライドをめくった瞬間に切断されてしまったこともあるくらいだ．\nその点こっちはVGAがついている．安心と信頼のVGA．でもなぜかHDMIはついていない．\n\nさて，PCを2台持つにあたって問題となるのがファイルの管理だ．USBでいちいち転送するのは面倒なので，自動で同期してくれるソフトがほしい．\nwindowsに標準でインストールされていてofficeとの互換性がよいOneDriveと，共同作業でも使えて容量の大きいGoogleDriveで迷った結果，GoogleDriveに決定．\nもともとGoogleDriveはゼミでもよく使用しているので個人的に信用できる．というわけでHDDのドキュメントやソースコードたちをごっそり移行した．\n今まで，クラウドサービスに接続できないときに困るんじゃないかという理由であまり使ってなかったんだけど，どうやらローカルにもファイルが保存されるのでオフラインでも使用できるようだ．\nそのおかげでVisualStudioから直接プロジェクトを読みに行ったりできて，普段のファイル操作となんら変わりなく使えてる．今時の技術はすごいもんだ．\n\n最近，身の回りのデータをどんどんクラウドサービスに移している．画像は容量無制限のGooglePhotosに投げるようにした．こっちも「写真」フォルダとして自動で同期されるため，いつの間にかスマホとPCで画像のやりとりをシームレスに行える環境になっていた．メモはevernoteで書いている．こうなると，まだクラウドに移行していないのは音楽ぐらいな気がする．\n管理コストもないし，しばらくこのまま依存してみる．\n\n","source":"_posts/2016-02-29-気が付いたらクラウド依存になっていた.md","raw":"---\ntitle: 気が付いたらクラウド依存になっていた\ndate: 2016-02-29 00:20:50\n---\n\n研究室で新しくPCを貸出してもらえることになった．ハイエンドなスペックではないけど，まあまあ使える．\n自分のPCは外部ディスプレイへの出力端子がmicroHDMIというやつしかないので，コンバータをかませる必要がある．これがなかなか貧弱なやつで，発表会の時にスライドをめくった瞬間に切断されてしまったこともあるくらいだ．\nその点こっちはVGAがついている．安心と信頼のVGA．でもなぜかHDMIはついていない．\n\nさて，PCを2台持つにあたって問題となるのがファイルの管理だ．USBでいちいち転送するのは面倒なので，自動で同期してくれるソフトがほしい．\nwindowsに標準でインストールされていてofficeとの互換性がよいOneDriveと，共同作業でも使えて容量の大きいGoogleDriveで迷った結果，GoogleDriveに決定．\nもともとGoogleDriveはゼミでもよく使用しているので個人的に信用できる．というわけでHDDのドキュメントやソースコードたちをごっそり移行した．\n今まで，クラウドサービスに接続できないときに困るんじゃないかという理由であまり使ってなかったんだけど，どうやらローカルにもファイルが保存されるのでオフラインでも使用できるようだ．\nそのおかげでVisualStudioから直接プロジェクトを読みに行ったりできて，普段のファイル操作となんら変わりなく使えてる．今時の技術はすごいもんだ．\n\n最近，身の回りのデータをどんどんクラウドサービスに移している．画像は容量無制限のGooglePhotosに投げるようにした．こっちも「写真」フォルダとして自動で同期されるため，いつの間にかスマホとPCで画像のやりとりをシームレスに行える環境になっていた．メモはevernoteで書いている．こうなると，まだクラウドに移行していないのは音楽ぐらいな気がする．\n管理コストもないし，しばらくこのまま依存してみる．\n\n","slug":"気が付いたらクラウド依存になっていた","published":1,"updated":"2020-05-16T07:34:47.958Z","_id":"cka9bf8xz002fxgtvffbc4g0y","comments":1,"layout":"post","photos":[],"link":"","content":"<p>研究室で新しくPCを貸出してもらえることになった．ハイエンドなスペックではないけど，まあまあ使える．<br>自分のPCは外部ディスプレイへの出力端子がmicroHDMIというやつしかないので，コンバータをかませる必要がある．これがなかなか貧弱なやつで，発表会の時にスライドをめくった瞬間に切断されてしまったこともあるくらいだ．<br>その点こっちはVGAがついている．安心と信頼のVGA．でもなぜかHDMIはついていない．</p>\n<p>さて，PCを2台持つにあたって問題となるのがファイルの管理だ．USBでいちいち転送するのは面倒なので，自動で同期してくれるソフトがほしい．<br>windowsに標準でインストールされていてofficeとの互換性がよいOneDriveと，共同作業でも使えて容量の大きいGoogleDriveで迷った結果，GoogleDriveに決定．<br>もともとGoogleDriveはゼミでもよく使用しているので個人的に信用できる．というわけでHDDのドキュメントやソースコードたちをごっそり移行した．<br>今まで，クラウドサービスに接続できないときに困るんじゃないかという理由であまり使ってなかったんだけど，どうやらローカルにもファイルが保存されるのでオフラインでも使用できるようだ．<br>そのおかげでVisualStudioから直接プロジェクトを読みに行ったりできて，普段のファイル操作となんら変わりなく使えてる．今時の技術はすごいもんだ．</p>\n<p>最近，身の回りのデータをどんどんクラウドサービスに移している．画像は容量無制限のGooglePhotosに投げるようにした．こっちも「写真」フォルダとして自動で同期されるため，いつの間にかスマホとPCで画像のやりとりをシームレスに行える環境になっていた．メモはevernoteで書いている．こうなると，まだクラウドに移行していないのは音楽ぐらいな気がする．<br>管理コストもないし，しばらくこのまま依存してみる．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>研究室で新しくPCを貸出してもらえることになった．ハイエンドなスペックではないけど，まあまあ使える．<br>自分のPCは外部ディスプレイへの出力端子がmicroHDMIというやつしかないので，コンバータをかませる必要がある．これがなかなか貧弱なやつで，発表会の時にスライドをめくった瞬間に切断されてしまったこともあるくらいだ．<br>その点こっちはVGAがついている．安心と信頼のVGA．でもなぜかHDMIはついていない．</p>\n<p>さて，PCを2台持つにあたって問題となるのがファイルの管理だ．USBでいちいち転送するのは面倒なので，自動で同期してくれるソフトがほしい．<br>windowsに標準でインストールされていてofficeとの互換性がよいOneDriveと，共同作業でも使えて容量の大きいGoogleDriveで迷った結果，GoogleDriveに決定．<br>もともとGoogleDriveはゼミでもよく使用しているので個人的に信用できる．というわけでHDDのドキュメントやソースコードたちをごっそり移行した．<br>今まで，クラウドサービスに接続できないときに困るんじゃないかという理由であまり使ってなかったんだけど，どうやらローカルにもファイルが保存されるのでオフラインでも使用できるようだ．<br>そのおかげでVisualStudioから直接プロジェクトを読みに行ったりできて，普段のファイル操作となんら変わりなく使えてる．今時の技術はすごいもんだ．</p>\n<p>最近，身の回りのデータをどんどんクラウドサービスに移している．画像は容量無制限のGooglePhotosに投げるようにした．こっちも「写真」フォルダとして自動で同期されるため，いつの間にかスマホとPCで画像のやりとりをシームレスに行える環境になっていた．メモはevernoteで書いている．こうなると，まだクラウドに移行していないのは音楽ぐらいな気がする．<br>管理コストもないし，しばらくこのまま依存してみる．</p>\n"},{"title":"iPhone+SoftbankからAndroid+OCNに変えた","date":"2016-03-27T05:03:36.000Z","thumbnail":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160326/20160326155637.jpg","_content":"\n## キャリアを変える\n\n大学生である自分にとって，月の出費で一番痛いのがスマホ代である．毎月Softbankに7000円ほど支払っている．\n\n家でもキャンパスでもwifiに繋いでいるためキャリアの回線を使うのは電車の中ぐらいであり，その維持費にしてはちょっと高額だと思う．\n\nというわけで，いわゆるMVNOというやつに乗り換えてみることにした．\n\n友人数人に聞いてみたところ，データ通信量がかさまない場合はOCNモバイルONEの一番安いプランが安定していてよいとのこと．\n\n念のため毎月の通信量を確認してみたら，なんと月に3Gも使ってなかった．ソシャゲとかしないとこんなもんなんだろうか．\n\nいくつかのプランを吟味した結果，やはりOCNモバイルONEに決定．ちょうどGEOで初期費用500円セールがやっていたのでそれを利用して購入した．\n\n<span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160326/20160326155637.jpg\" alt=\"f:id:salmon2073:20160326155637j:plain\" title=\"f:id:salmon2073:20160326155637j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n## 端末を変える\n\n同時に，スマホ本体も変えることにした．\n\n今まで使っていたiPhone5は大学に入ると同時に買った初めてのスマホで，当時もっとも容量の大きかった64GBモデル．\n\nまだまだ使えると思うけど，simロックがかかってるのでよくあるドコモ回線のMVNOでは使用できないらしい．いい機会なので，Android端末を購入することにした．\n\n<span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160327/20160327133945.jpg\" alt=\"f:id:salmon2073:20160327133945j:plain\" title=\"f:id:salmon2073:20160327133945j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>　\n端末はNexus5Xにした．どうせなら最新のOSが使えるものがいいよね．\n\n## 結論\n\nそれでどのくらい安くなったのかというと，\n\n端末代(46500円) / 使用月 + 通信料(1600円)\n\nと計算すると，8カ月目から毎月5000円安くなる計算になる．\n\n微妙な感じもするが端末代は先にまとめて払っているので，来月から引き落とされるのが通信料だけというのは精神的にいい（これ大事）．\nまた，乗り換えずに2年使った場合を考えると6万も違うことになるので，端末をもう一台買ってもおつりがくるのである．例えば最近出たiPhone SEがそのくらいの値段だった気がする．\n\n## 感想\n\nというわけで，キャリアのほうは今のところ順調である．実際に使ってみて，普通に使えるようであれば家族のキャリアも変える予定である．\n\nAndroidのほうはまだいろいろ慣れていないところが多い．好みに応じてカスタマイズできるという話を聞いたので，どこまでできるかやってみたい．\n\n最近2年縛りが撤廃されたという話だが，代わりに出されたプランを見てがっかりした人はこの際乗り換えを検討してみてはどうだろう？\n\n","source":"_posts/2016-03-27-iPhone+SoftbankからAndroid+OCNに変えた.md","raw":"---\ntitle: iPhone+SoftbankからAndroid+OCNに変えた\ndate: 2016-03-27 14:03:36\nthumbnail: https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160326/20160326155637.jpg\n---\n\n## キャリアを変える\n\n大学生である自分にとって，月の出費で一番痛いのがスマホ代である．毎月Softbankに7000円ほど支払っている．\n\n家でもキャンパスでもwifiに繋いでいるためキャリアの回線を使うのは電車の中ぐらいであり，その維持費にしてはちょっと高額だと思う．\n\nというわけで，いわゆるMVNOというやつに乗り換えてみることにした．\n\n友人数人に聞いてみたところ，データ通信量がかさまない場合はOCNモバイルONEの一番安いプランが安定していてよいとのこと．\n\n念のため毎月の通信量を確認してみたら，なんと月に3Gも使ってなかった．ソシャゲとかしないとこんなもんなんだろうか．\n\nいくつかのプランを吟味した結果，やはりOCNモバイルONEに決定．ちょうどGEOで初期費用500円セールがやっていたのでそれを利用して購入した．\n\n<span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160326/20160326155637.jpg\" alt=\"f:id:salmon2073:20160326155637j:plain\" title=\"f:id:salmon2073:20160326155637j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n## 端末を変える\n\n同時に，スマホ本体も変えることにした．\n\n今まで使っていたiPhone5は大学に入ると同時に買った初めてのスマホで，当時もっとも容量の大きかった64GBモデル．\n\nまだまだ使えると思うけど，simロックがかかってるのでよくあるドコモ回線のMVNOでは使用できないらしい．いい機会なので，Android端末を購入することにした．\n\n<span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160327/20160327133945.jpg\" alt=\"f:id:salmon2073:20160327133945j:plain\" title=\"f:id:salmon2073:20160327133945j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>　\n端末はNexus5Xにした．どうせなら最新のOSが使えるものがいいよね．\n\n## 結論\n\nそれでどのくらい安くなったのかというと，\n\n端末代(46500円) / 使用月 + 通信料(1600円)\n\nと計算すると，8カ月目から毎月5000円安くなる計算になる．\n\n微妙な感じもするが端末代は先にまとめて払っているので，来月から引き落とされるのが通信料だけというのは精神的にいい（これ大事）．\nまた，乗り換えずに2年使った場合を考えると6万も違うことになるので，端末をもう一台買ってもおつりがくるのである．例えば最近出たiPhone SEがそのくらいの値段だった気がする．\n\n## 感想\n\nというわけで，キャリアのほうは今のところ順調である．実際に使ってみて，普通に使えるようであれば家族のキャリアも変える予定である．\n\nAndroidのほうはまだいろいろ慣れていないところが多い．好みに応じてカスタマイズできるという話を聞いたので，どこまでできるかやってみたい．\n\n最近2年縛りが撤廃されたという話だが，代わりに出されたプランを見てがっかりした人はこの際乗り換えを検討してみてはどうだろう？\n\n","slug":"iPhone+SoftbankからAndroid+OCNに変えた","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bfata002gxgtv9mq1fj0p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"キャリアを変える\"><a href=\"#キャリアを変える\" class=\"headerlink\" title=\"キャリアを変える\"></a>キャリアを変える</h2><p>大学生である自分にとって，月の出費で一番痛いのがスマホ代である．毎月Softbankに7000円ほど支払っている．</p>\n<p>家でもキャンパスでもwifiに繋いでいるためキャリアの回線を使うのは電車の中ぐらいであり，その維持費にしてはちょっと高額だと思う．</p>\n<p>というわけで，いわゆるMVNOというやつに乗り換えてみることにした．</p>\n<p>友人数人に聞いてみたところ，データ通信量がかさまない場合はOCNモバイルONEの一番安いプランが安定していてよいとのこと．</p>\n<p>念のため毎月の通信量を確認してみたら，なんと月に3Gも使ってなかった．ソシャゲとかしないとこんなもんなんだろうか．</p>\n<p>いくつかのプランを吟味した結果，やはりOCNモバイルONEに決定．ちょうどGEOで初期費用500円セールがやっていたのでそれを利用して購入した．</p>\n<p><span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160326/20160326155637.jpg\" alt=\"f:id:salmon2073:20160326155637j:plain\" title=\"f:id:salmon2073:20160326155637j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n<h2 id=\"端末を変える\"><a href=\"#端末を変える\" class=\"headerlink\" title=\"端末を変える\"></a>端末を変える</h2><p>同時に，スマホ本体も変えることにした．</p>\n<p>今まで使っていたiPhone5は大学に入ると同時に買った初めてのスマホで，当時もっとも容量の大きかった64GBモデル．</p>\n<p>まだまだ使えると思うけど，simロックがかかってるのでよくあるドコモ回線のMVNOでは使用できないらしい．いい機会なので，Android端末を購入することにした．</p>\n<p><span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160327/20160327133945.jpg\" alt=\"f:id:salmon2073:20160327133945j:plain\" title=\"f:id:salmon2073:20160327133945j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>　<br>端末はNexus5Xにした．どうせなら最新のOSが使えるものがいいよね．</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>それでどのくらい安くなったのかというと，</p>\n<p>端末代(46500円) / 使用月 + 通信料(1600円)</p>\n<p>と計算すると，8カ月目から毎月5000円安くなる計算になる．</p>\n<p>微妙な感じもするが端末代は先にまとめて払っているので，来月から引き落とされるのが通信料だけというのは精神的にいい（これ大事）．<br>また，乗り換えずに2年使った場合を考えると6万も違うことになるので，端末をもう一台買ってもおつりがくるのである．例えば最近出たiPhone SEがそのくらいの値段だった気がする．</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>というわけで，キャリアのほうは今のところ順調である．実際に使ってみて，普通に使えるようであれば家族のキャリアも変える予定である．</p>\n<p>Androidのほうはまだいろいろ慣れていないところが多い．好みに応じてカスタマイズできるという話を聞いたので，どこまでできるかやってみたい．</p>\n<p>最近2年縛りが撤廃されたという話だが，代わりに出されたプランを見てがっかりした人はこの際乗り換えを検討してみてはどうだろう？</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"キャリアを変える\"><a href=\"#キャリアを変える\" class=\"headerlink\" title=\"キャリアを変える\"></a>キャリアを変える</h2><p>大学生である自分にとって，月の出費で一番痛いのがスマホ代である．毎月Softbankに7000円ほど支払っている．</p>\n<p>家でもキャンパスでもwifiに繋いでいるためキャリアの回線を使うのは電車の中ぐらいであり，その維持費にしてはちょっと高額だと思う．</p>\n<p>というわけで，いわゆるMVNOというやつに乗り換えてみることにした．</p>\n<p>友人数人に聞いてみたところ，データ通信量がかさまない場合はOCNモバイルONEの一番安いプランが安定していてよいとのこと．</p>\n<p>念のため毎月の通信量を確認してみたら，なんと月に3Gも使ってなかった．ソシャゲとかしないとこんなもんなんだろうか．</p>\n<p>いくつかのプランを吟味した結果，やはりOCNモバイルONEに決定．ちょうどGEOで初期費用500円セールがやっていたのでそれを利用して購入した．</p>\n<p><span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160326/20160326155637.jpg\" alt=\"f:id:salmon2073:20160326155637j:plain\" title=\"f:id:salmon2073:20160326155637j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n<h2 id=\"端末を変える\"><a href=\"#端末を変える\" class=\"headerlink\" title=\"端末を変える\"></a>端末を変える</h2><p>同時に，スマホ本体も変えることにした．</p>\n<p>今まで使っていたiPhone5は大学に入ると同時に買った初めてのスマホで，当時もっとも容量の大きかった64GBモデル．</p>\n<p>まだまだ使えると思うけど，simロックがかかってるのでよくあるドコモ回線のMVNOでは使用できないらしい．いい機会なので，Android端末を購入することにした．</p>\n<p><span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160327/20160327133945.jpg\" alt=\"f:id:salmon2073:20160327133945j:plain\" title=\"f:id:salmon2073:20160327133945j:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>　<br>端末はNexus5Xにした．どうせなら最新のOSが使えるものがいいよね．</p>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>それでどのくらい安くなったのかというと，</p>\n<p>端末代(46500円) / 使用月 + 通信料(1600円)</p>\n<p>と計算すると，8カ月目から毎月5000円安くなる計算になる．</p>\n<p>微妙な感じもするが端末代は先にまとめて払っているので，来月から引き落とされるのが通信料だけというのは精神的にいい（これ大事）．<br>また，乗り換えずに2年使った場合を考えると6万も違うことになるので，端末をもう一台買ってもおつりがくるのである．例えば最近出たiPhone SEがそのくらいの値段だった気がする．</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>というわけで，キャリアのほうは今のところ順調である．実際に使ってみて，普通に使えるようであれば家族のキャリアも変える予定である．</p>\n<p>Androidのほうはまだいろいろ慣れていないところが多い．好みに応じてカスタマイズできるという話を聞いたので，どこまでできるかやってみたい．</p>\n<p>最近2年縛りが撤廃されたという話だが，代わりに出されたプランを見てがっかりした人はこの際乗り換えを検討してみてはどうだろう？</p>\n"},{"title":"2015年度を振り返って","date":"2016-03-31T05:49:29.000Z","_content":"\n年末に振り返り記事を書かなかったので，このタイミングで振り返ってみようと思う．\n今年度はいろんなことが今までと変わった年だった．\n\n## 研究がはじまった\n\nこれによって時間の使い方が変わった．一番多かったプログラミングの割合が減り，研究関連の割合が増えた．\n\n先行研究を調べ，アイディアを実装し，実験をしてデータを分析する．発表する場合は，書式に則って文章にまとめ，分かりやすいプレゼンをする．\nこの一連の流れをこなすのはとても難しく，今年度の大部分をこれに費やしたと言っても過言ではないと思う．\n残念ながら今年は外部に発表するまでに至らなかったので，来年度はそこにこだわっていきたい．\n\n## 免許を取った\n\n自動車免許（AT）を取得した．学生の間には取れないんじゃないかと焦っていたので，なんとか取れて安心している．\nおかげで手続き事をするときの身分証明がスムーズになった．せっかくなのでゴールドを目指す．\n\n## 基本情報技術者試験に合格した\n\n秋の試験で合格した．情報系の学生だったら持ってて損はないと思う．\n大学の授業で使ったテキストが非常に役に立った．そのうち応用も取りたい．\n\n## 作曲をしなくなった\n\n理由はコストが大きすぎるからである．余裕ができたらまたやるかもしれない．\n\n今は新しい趣味を探している．できればPCを使わないものがいいなと思っている．\n\n## その他\n\n- アルバイトを減らして週一回にした．\n- PCを変えた．\n- スマホをAndroidにした．\n- サーバを解約した．\n\n## 反省点\n\n- 拠点が定まっていない\n\nこのせいで生産性がすごく低下している．環境による影響が非常に大きいことを学んだ．\n自分一人で作業するには自宅で十分だと思っているところが問題で，誰かと議論しないと生まれない発想やチャンスをもっと重要視するべきである．\n\n- アウトプットが少ない\n\n個人でもチームでも形に残る結果が少ないのはよろしくない．これはもしかしたら今までのやり方に問題がある可能性がある．\n今までは目標や締め切りを持つことでモチベーションを保っていたが，それがなくても日常的に物事を進める癖をつけたい．\n\n## 全体を振り返って\n\n今年度は大学生も後半ということで，自分の中でいろいろなことを整理していた．\n\n資格関係は3年のうちにとっておくことにした．専門的な授業が増えて，「職業」がチラチラしてきた．それにつれて，自分がどんな分野が好きなのかが少しずつ見えてきた．\n\n生活については，多少ミニマルな方向に向かっている．なるべくコストがかからないようにして持ち物を減らし，管理コストがかかりそうな情報はクラウドサービスに移した．\nアルバイトを減らして時間を作った割には，思ったよりも遊ばなかったなという印象．\n\n## 来年度の抱負\n\nいよいよ大学生最後の年である．\n\nまずは研究力を上げる．どこまで頑張れるかでこの先やっていけるかが決まる．というか頑張らないと卒業できなくなるので，しっかり取り組みたい．\n授業が減って拘束される時間が減るので，自己管理が甘くならないように習慣づける．\nそれから，IT分野以外の趣味を見つけたい．自分を人に伝えるときに，ITの話しかできないのはつまらない．今まではそこに音楽があったのだけど，自分の中で音楽は趣味から教養に昇華した．\n教養といえば，今一度数学を復習しておこうと思う．なんだかんだいって理系学生なのだ．\n\nもっと書きたいことがあったはずだけど，探り探り考えていたらこんな塩梅になった．まだぼんやりしていることがあるので，追々詰めていこう．\n\n","source":"_posts/2016-03-31-2015年度を振り返って.md","raw":"---\ntitle: 2015年度を振り返って\ndate: 2016-03-31 14:49:29\ncategory: 日記\n---\n\n年末に振り返り記事を書かなかったので，このタイミングで振り返ってみようと思う．\n今年度はいろんなことが今までと変わった年だった．\n\n## 研究がはじまった\n\nこれによって時間の使い方が変わった．一番多かったプログラミングの割合が減り，研究関連の割合が増えた．\n\n先行研究を調べ，アイディアを実装し，実験をしてデータを分析する．発表する場合は，書式に則って文章にまとめ，分かりやすいプレゼンをする．\nこの一連の流れをこなすのはとても難しく，今年度の大部分をこれに費やしたと言っても過言ではないと思う．\n残念ながら今年は外部に発表するまでに至らなかったので，来年度はそこにこだわっていきたい．\n\n## 免許を取った\n\n自動車免許（AT）を取得した．学生の間には取れないんじゃないかと焦っていたので，なんとか取れて安心している．\nおかげで手続き事をするときの身分証明がスムーズになった．せっかくなのでゴールドを目指す．\n\n## 基本情報技術者試験に合格した\n\n秋の試験で合格した．情報系の学生だったら持ってて損はないと思う．\n大学の授業で使ったテキストが非常に役に立った．そのうち応用も取りたい．\n\n## 作曲をしなくなった\n\n理由はコストが大きすぎるからである．余裕ができたらまたやるかもしれない．\n\n今は新しい趣味を探している．できればPCを使わないものがいいなと思っている．\n\n## その他\n\n- アルバイトを減らして週一回にした．\n- PCを変えた．\n- スマホをAndroidにした．\n- サーバを解約した．\n\n## 反省点\n\n- 拠点が定まっていない\n\nこのせいで生産性がすごく低下している．環境による影響が非常に大きいことを学んだ．\n自分一人で作業するには自宅で十分だと思っているところが問題で，誰かと議論しないと生まれない発想やチャンスをもっと重要視するべきである．\n\n- アウトプットが少ない\n\n個人でもチームでも形に残る結果が少ないのはよろしくない．これはもしかしたら今までのやり方に問題がある可能性がある．\n今までは目標や締め切りを持つことでモチベーションを保っていたが，それがなくても日常的に物事を進める癖をつけたい．\n\n## 全体を振り返って\n\n今年度は大学生も後半ということで，自分の中でいろいろなことを整理していた．\n\n資格関係は3年のうちにとっておくことにした．専門的な授業が増えて，「職業」がチラチラしてきた．それにつれて，自分がどんな分野が好きなのかが少しずつ見えてきた．\n\n生活については，多少ミニマルな方向に向かっている．なるべくコストがかからないようにして持ち物を減らし，管理コストがかかりそうな情報はクラウドサービスに移した．\nアルバイトを減らして時間を作った割には，思ったよりも遊ばなかったなという印象．\n\n## 来年度の抱負\n\nいよいよ大学生最後の年である．\n\nまずは研究力を上げる．どこまで頑張れるかでこの先やっていけるかが決まる．というか頑張らないと卒業できなくなるので，しっかり取り組みたい．\n授業が減って拘束される時間が減るので，自己管理が甘くならないように習慣づける．\nそれから，IT分野以外の趣味を見つけたい．自分を人に伝えるときに，ITの話しかできないのはつまらない．今まではそこに音楽があったのだけど，自分の中で音楽は趣味から教養に昇華した．\n教養といえば，今一度数学を復習しておこうと思う．なんだかんだいって理系学生なのだ．\n\nもっと書きたいことがあったはずだけど，探り探り考えていたらこんな塩梅になった．まだぼんやりしていることがあるので，追々詰めていこう．\n\n","slug":"2015年度を振り返って","published":1,"updated":"2020-05-16T07:34:52.377Z","_id":"cka9bfccp002hxgtv34cagxd6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>年末に振り返り記事を書かなかったので，このタイミングで振り返ってみようと思う．<br>今年度はいろんなことが今までと変わった年だった．</p>\n<h2 id=\"研究がはじまった\"><a href=\"#研究がはじまった\" class=\"headerlink\" title=\"研究がはじまった\"></a>研究がはじまった</h2><p>これによって時間の使い方が変わった．一番多かったプログラミングの割合が減り，研究関連の割合が増えた．</p>\n<p>先行研究を調べ，アイディアを実装し，実験をしてデータを分析する．発表する場合は，書式に則って文章にまとめ，分かりやすいプレゼンをする．<br>この一連の流れをこなすのはとても難しく，今年度の大部分をこれに費やしたと言っても過言ではないと思う．<br>残念ながら今年は外部に発表するまでに至らなかったので，来年度はそこにこだわっていきたい．</p>\n<h2 id=\"免許を取った\"><a href=\"#免許を取った\" class=\"headerlink\" title=\"免許を取った\"></a>免許を取った</h2><p>自動車免許（AT）を取得した．学生の間には取れないんじゃないかと焦っていたので，なんとか取れて安心している．<br>おかげで手続き事をするときの身分証明がスムーズになった．せっかくなのでゴールドを目指す．</p>\n<h2 id=\"基本情報技術者試験に合格した\"><a href=\"#基本情報技術者試験に合格した\" class=\"headerlink\" title=\"基本情報技術者試験に合格した\"></a>基本情報技術者試験に合格した</h2><p>秋の試験で合格した．情報系の学生だったら持ってて損はないと思う．<br>大学の授業で使ったテキストが非常に役に立った．そのうち応用も取りたい．</p>\n<h2 id=\"作曲をしなくなった\"><a href=\"#作曲をしなくなった\" class=\"headerlink\" title=\"作曲をしなくなった\"></a>作曲をしなくなった</h2><p>理由はコストが大きすぎるからである．余裕ができたらまたやるかもしれない．</p>\n<p>今は新しい趣味を探している．できればPCを使わないものがいいなと思っている．</p>\n<h2 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h2><ul>\n<li>アルバイトを減らして週一回にした．</li>\n<li>PCを変えた．</li>\n<li>スマホをAndroidにした．</li>\n<li>サーバを解約した．</li>\n</ul>\n<h2 id=\"反省点\"><a href=\"#反省点\" class=\"headerlink\" title=\"反省点\"></a>反省点</h2><ul>\n<li>拠点が定まっていない</li>\n</ul>\n<p>このせいで生産性がすごく低下している．環境による影響が非常に大きいことを学んだ．<br>自分一人で作業するには自宅で十分だと思っているところが問題で，誰かと議論しないと生まれない発想やチャンスをもっと重要視するべきである．</p>\n<ul>\n<li>アウトプットが少ない</li>\n</ul>\n<p>個人でもチームでも形に残る結果が少ないのはよろしくない．これはもしかしたら今までのやり方に問題がある可能性がある．<br>今までは目標や締め切りを持つことでモチベーションを保っていたが，それがなくても日常的に物事を進める癖をつけたい．</p>\n<h2 id=\"全体を振り返って\"><a href=\"#全体を振り返って\" class=\"headerlink\" title=\"全体を振り返って\"></a>全体を振り返って</h2><p>今年度は大学生も後半ということで，自分の中でいろいろなことを整理していた．</p>\n<p>資格関係は3年のうちにとっておくことにした．専門的な授業が増えて，「職業」がチラチラしてきた．それにつれて，自分がどんな分野が好きなのかが少しずつ見えてきた．</p>\n<p>生活については，多少ミニマルな方向に向かっている．なるべくコストがかからないようにして持ち物を減らし，管理コストがかかりそうな情報はクラウドサービスに移した．<br>アルバイトを減らして時間を作った割には，思ったよりも遊ばなかったなという印象．</p>\n<h2 id=\"来年度の抱負\"><a href=\"#来年度の抱負\" class=\"headerlink\" title=\"来年度の抱負\"></a>来年度の抱負</h2><p>いよいよ大学生最後の年である．</p>\n<p>まずは研究力を上げる．どこまで頑張れるかでこの先やっていけるかが決まる．というか頑張らないと卒業できなくなるので，しっかり取り組みたい．<br>授業が減って拘束される時間が減るので，自己管理が甘くならないように習慣づける．<br>それから，IT分野以外の趣味を見つけたい．自分を人に伝えるときに，ITの話しかできないのはつまらない．今まではそこに音楽があったのだけど，自分の中で音楽は趣味から教養に昇華した．<br>教養といえば，今一度数学を復習しておこうと思う．なんだかんだいって理系学生なのだ．</p>\n<p>もっと書きたいことがあったはずだけど，探り探り考えていたらこんな塩梅になった．まだぼんやりしていることがあるので，追々詰めていこう．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>年末に振り返り記事を書かなかったので，このタイミングで振り返ってみようと思う．<br>今年度はいろんなことが今までと変わった年だった．</p>\n<h2 id=\"研究がはじまった\"><a href=\"#研究がはじまった\" class=\"headerlink\" title=\"研究がはじまった\"></a>研究がはじまった</h2><p>これによって時間の使い方が変わった．一番多かったプログラミングの割合が減り，研究関連の割合が増えた．</p>\n<p>先行研究を調べ，アイディアを実装し，実験をしてデータを分析する．発表する場合は，書式に則って文章にまとめ，分かりやすいプレゼンをする．<br>この一連の流れをこなすのはとても難しく，今年度の大部分をこれに費やしたと言っても過言ではないと思う．<br>残念ながら今年は外部に発表するまでに至らなかったので，来年度はそこにこだわっていきたい．</p>\n<h2 id=\"免許を取った\"><a href=\"#免許を取った\" class=\"headerlink\" title=\"免許を取った\"></a>免許を取った</h2><p>自動車免許（AT）を取得した．学生の間には取れないんじゃないかと焦っていたので，なんとか取れて安心している．<br>おかげで手続き事をするときの身分証明がスムーズになった．せっかくなのでゴールドを目指す．</p>\n<h2 id=\"基本情報技術者試験に合格した\"><a href=\"#基本情報技術者試験に合格した\" class=\"headerlink\" title=\"基本情報技術者試験に合格した\"></a>基本情報技術者試験に合格した</h2><p>秋の試験で合格した．情報系の学生だったら持ってて損はないと思う．<br>大学の授業で使ったテキストが非常に役に立った．そのうち応用も取りたい．</p>\n<h2 id=\"作曲をしなくなった\"><a href=\"#作曲をしなくなった\" class=\"headerlink\" title=\"作曲をしなくなった\"></a>作曲をしなくなった</h2><p>理由はコストが大きすぎるからである．余裕ができたらまたやるかもしれない．</p>\n<p>今は新しい趣味を探している．できればPCを使わないものがいいなと思っている．</p>\n<h2 id=\"その他\"><a href=\"#その他\" class=\"headerlink\" title=\"その他\"></a>その他</h2><ul>\n<li>アルバイトを減らして週一回にした．</li>\n<li>PCを変えた．</li>\n<li>スマホをAndroidにした．</li>\n<li>サーバを解約した．</li>\n</ul>\n<h2 id=\"反省点\"><a href=\"#反省点\" class=\"headerlink\" title=\"反省点\"></a>反省点</h2><ul>\n<li>拠点が定まっていない</li>\n</ul>\n<p>このせいで生産性がすごく低下している．環境による影響が非常に大きいことを学んだ．<br>自分一人で作業するには自宅で十分だと思っているところが問題で，誰かと議論しないと生まれない発想やチャンスをもっと重要視するべきである．</p>\n<ul>\n<li>アウトプットが少ない</li>\n</ul>\n<p>個人でもチームでも形に残る結果が少ないのはよろしくない．これはもしかしたら今までのやり方に問題がある可能性がある．<br>今までは目標や締め切りを持つことでモチベーションを保っていたが，それがなくても日常的に物事を進める癖をつけたい．</p>\n<h2 id=\"全体を振り返って\"><a href=\"#全体を振り返って\" class=\"headerlink\" title=\"全体を振り返って\"></a>全体を振り返って</h2><p>今年度は大学生も後半ということで，自分の中でいろいろなことを整理していた．</p>\n<p>資格関係は3年のうちにとっておくことにした．専門的な授業が増えて，「職業」がチラチラしてきた．それにつれて，自分がどんな分野が好きなのかが少しずつ見えてきた．</p>\n<p>生活については，多少ミニマルな方向に向かっている．なるべくコストがかからないようにして持ち物を減らし，管理コストがかかりそうな情報はクラウドサービスに移した．<br>アルバイトを減らして時間を作った割には，思ったよりも遊ばなかったなという印象．</p>\n<h2 id=\"来年度の抱負\"><a href=\"#来年度の抱負\" class=\"headerlink\" title=\"来年度の抱負\"></a>来年度の抱負</h2><p>いよいよ大学生最後の年である．</p>\n<p>まずは研究力を上げる．どこまで頑張れるかでこの先やっていけるかが決まる．というか頑張らないと卒業できなくなるので，しっかり取り組みたい．<br>授業が減って拘束される時間が減るので，自己管理が甘くならないように習慣づける．<br>それから，IT分野以外の趣味を見つけたい．自分を人に伝えるときに，ITの話しかできないのはつまらない．今まではそこに音楽があったのだけど，自分の中で音楽は趣味から教養に昇華した．<br>教養といえば，今一度数学を復習しておこうと思う．なんだかんだいって理系学生なのだ．</p>\n<p>もっと書きたいことがあったはずだけど，探り探り考えていたらこんな塩梅になった．まだぼんやりしていることがあるので，追々詰めていこう．</p>\n"},{"title":"W32TeXとTeXstudioでWindowsにTeX環境を構築する","date":"2016-07-10T11:39:13.000Z","_content":"\n所要時間：約30分\n\nTeXで文章を書いてPDFを出力できるようにするには，\n\n- TeXディストリビューション\n- TeXエディタ\n\nの二つのインストール作業を行う必要がある．\n\n「TeXインストーラ3」を使うとこの作業を全自動で行ってくれるので大変便利．\n\n以下のサイトにインストール方法が詳しく書いてある．\n\n<a href=\"https://did2memo.net/2016/04/24/easy-latex-install-windows-10-2016-04/\">&#x7C21;&#x5358;LaTeX&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;Windows&#x7DE8;&#xFF08;2016&#x5E74;4&#x6708;&#x7248;&#xFF09;</a>\n\n※2016年7月現在，W32TeXのダウンロード元が上から2番目になっているが，そのままだと情報取得に失敗するので3番目に変更する．\n\nこの方法だとエディタとしてTeXWorksがインストールされる．個人的にはもうちょっとIDEっぽいやつが使いたかったので，\nあえてTexWorksのチェックを外し，TeXstudioをインストールすることにした．\n\n以下のリンクから最新版をダウンロードして手順通りに進めればok．\n\n<a href=\"https://www.texstudio.org/\">TeXstudio</a>\n\nTeXstudioはインストール後にすこしだけ設定を変える必要がある．\n\n「オプション」→「TeXstudioの設定」から，\n\n- 「コマンド」の一番上「LaTeX」のlatex.exeをplatex.exeに書き換える．\n- 「ビルド」の「ビルド&amp;表示」を「DVI->PDFチェーン」に変更，「既定のコンパイラ」をLaTeXに変更する．\n\nこれでipsjのテンプレートからビルドを行うことができるようになる．\n\n","source":"_posts/2016-07-10-W32TeXとTeXstudioでWindowsにTeX環境を構築する.md","raw":"---\ntitle: W32TeXとTeXstudioでWindowsにTeX環境を構築する\ndate: 2016-07-10 20:39:13\n---\n\n所要時間：約30分\n\nTeXで文章を書いてPDFを出力できるようにするには，\n\n- TeXディストリビューション\n- TeXエディタ\n\nの二つのインストール作業を行う必要がある．\n\n「TeXインストーラ3」を使うとこの作業を全自動で行ってくれるので大変便利．\n\n以下のサイトにインストール方法が詳しく書いてある．\n\n<a href=\"https://did2memo.net/2016/04/24/easy-latex-install-windows-10-2016-04/\">&#x7C21;&#x5358;LaTeX&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;Windows&#x7DE8;&#xFF08;2016&#x5E74;4&#x6708;&#x7248;&#xFF09;</a>\n\n※2016年7月現在，W32TeXのダウンロード元が上から2番目になっているが，そのままだと情報取得に失敗するので3番目に変更する．\n\nこの方法だとエディタとしてTeXWorksがインストールされる．個人的にはもうちょっとIDEっぽいやつが使いたかったので，\nあえてTexWorksのチェックを外し，TeXstudioをインストールすることにした．\n\n以下のリンクから最新版をダウンロードして手順通りに進めればok．\n\n<a href=\"https://www.texstudio.org/\">TeXstudio</a>\n\nTeXstudioはインストール後にすこしだけ設定を変える必要がある．\n\n「オプション」→「TeXstudioの設定」から，\n\n- 「コマンド」の一番上「LaTeX」のlatex.exeをplatex.exeに書き換える．\n- 「ビルド」の「ビルド&amp;表示」を「DVI->PDFチェーン」に変更，「既定のコンパイラ」をLaTeXに変更する．\n\nこれでipsjのテンプレートからビルドを行うことができるようになる．\n\n","slug":"W32TeXとTeXstudioでWindowsにTeX環境を構築する","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bffrj002jxgtv6drf2swv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>所要時間：約30分</p>\n<p>TeXで文章を書いてPDFを出力できるようにするには，</p>\n<ul>\n<li>TeXディストリビューション</li>\n<li>TeXエディタ</li>\n</ul>\n<p>の二つのインストール作業を行う必要がある．</p>\n<p>「TeXインストーラ3」を使うとこの作業を全自動で行ってくれるので大変便利．</p>\n<p>以下のサイトにインストール方法が詳しく書いてある．</p>\n<p><a href=\"https://did2memo.net/2016/04/24/easy-latex-install-windows-10-2016-04/\">&#x7C21;&#x5358;LaTeX&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;Windows&#x7DE8;&#xFF08;2016&#x5E74;4&#x6708;&#x7248;&#xFF09;</a></p>\n<p>※2016年7月現在，W32TeXのダウンロード元が上から2番目になっているが，そのままだと情報取得に失敗するので3番目に変更する．</p>\n<p>この方法だとエディタとしてTeXWorksがインストールされる．個人的にはもうちょっとIDEっぽいやつが使いたかったので，<br>あえてTexWorksのチェックを外し，TeXstudioをインストールすることにした．</p>\n<p>以下のリンクから最新版をダウンロードして手順通りに進めればok．</p>\n<p><a href=\"https://www.texstudio.org/\">TeXstudio</a></p>\n<p>TeXstudioはインストール後にすこしだけ設定を変える必要がある．</p>\n<p>「オプション」→「TeXstudioの設定」から，</p>\n<ul>\n<li>「コマンド」の一番上「LaTeX」のlatex.exeをplatex.exeに書き換える．</li>\n<li>「ビルド」の「ビルド&amp;表示」を「DVI-&gt;PDFチェーン」に変更，「既定のコンパイラ」をLaTeXに変更する．</li>\n</ul>\n<p>これでipsjのテンプレートからビルドを行うことができるようになる．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>所要時間：約30分</p>\n<p>TeXで文章を書いてPDFを出力できるようにするには，</p>\n<ul>\n<li>TeXディストリビューション</li>\n<li>TeXエディタ</li>\n</ul>\n<p>の二つのインストール作業を行う必要がある．</p>\n<p>「TeXインストーラ3」を使うとこの作業を全自動で行ってくれるので大変便利．</p>\n<p>以下のサイトにインストール方法が詳しく書いてある．</p>\n<p><a href=\"https://did2memo.net/2016/04/24/easy-latex-install-windows-10-2016-04/\">&#x7C21;&#x5358;LaTeX&#x30A4;&#x30F3;&#x30B9;&#x30C8;&#x30FC;&#x30EB;Windows&#x7DE8;&#xFF08;2016&#x5E74;4&#x6708;&#x7248;&#xFF09;</a></p>\n<p>※2016年7月現在，W32TeXのダウンロード元が上から2番目になっているが，そのままだと情報取得に失敗するので3番目に変更する．</p>\n<p>この方法だとエディタとしてTeXWorksがインストールされる．個人的にはもうちょっとIDEっぽいやつが使いたかったので，<br>あえてTexWorksのチェックを外し，TeXstudioをインストールすることにした．</p>\n<p>以下のリンクから最新版をダウンロードして手順通りに進めればok．</p>\n<p><a href=\"https://www.texstudio.org/\">TeXstudio</a></p>\n<p>TeXstudioはインストール後にすこしだけ設定を変える必要がある．</p>\n<p>「オプション」→「TeXstudioの設定」から，</p>\n<ul>\n<li>「コマンド」の一番上「LaTeX」のlatex.exeをplatex.exeに書き換える．</li>\n<li>「ビルド」の「ビルド&amp;表示」を「DVI-&gt;PDFチェーン」に変更，「既定のコンパイラ」をLaTeXに変更する．</li>\n</ul>\n<p>これでipsjのテンプレートからビルドを行うことができるようになる．</p>\n"},{"title":"MinecraftサーバのログをSlackに流す","date":"2016-08-05T13:51:07.000Z","thumbnail":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160805/20160805234813.png","_content":"\n## はじめに\n\n自前でマイクラ鯖を建ててマルチプレイをしていると，24時間出入りできて楽しい．\n\n鯖内のログイン履歴やチャット履歴は自分がログインしてないときでも残る．\nこれを共有できれば，自分がいない間にあった出来事や鯖にログインしているメンバーの確認などがマイクラを起動しなくても可能になる．\nまた，ゲーム中にメモした座標などがログアウトしたあとにも残るので大変便利なのだ．\n\nログを共有するにはチャットサービスのbotにしてしまうのがよい．\nある程度のセキュリティに期待できるし，お気に入り機能や通知機能などが最初からそろっている．\nちょうど鯖メンバー用のSlackチームを作っていたので，今回はそれを利用することにした．\n\n## 実装\n\nRubyのslack-ruby-clientを用いて書いてみた．\nまずはgemのインストール．\n\n```\ngem install slack-ruby-client\n```\n\nminecraft_server.jarを設置しているディレクトリと同じ階層に以下のプログラムを設置．\n\n<script src=\"https://gist.github.com/salmon2073/5e745965f9b936cb086bdf19df2a8a65.js\"></script>\n\nslackのアクセストークンを取得してきて書き換える．アクセストークンの取得方法は例えば以下の記事を参考にするとよい．\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fjoesbar.blog.jp%2Farchives%2F1059092482.html\" title=\"Slackでボットを作る　カスタムボット連携編 : じょえずブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://joesbar.blog.jp/archives/1059092482.html\">joesbar.blog.jp</a></cite>\n\nチャンネル名を書き換えよう．結構な量のログが流れるので，専用のチャンネルを新しく作るのがおススメ．\n通知したいチャンネルにbotがいるか確認することを忘れずに．\n\nあとは実行すれば鯖内の入退出や会話，死因や称号の情報がSlackに流れてくる．エラーが疑われる場合は4行目をコメントアウトしてデバッグしよう．\n\n## おわりに\n\nそのままの状態だとサーバの警告なども拾ってしまうので，運用する際にはある程度フィルタリングするのがよい．\n\nうちの鯖のメンバーには今のところ好評である．メモ機能としても活躍している．\n他の人がプレイしている情報を見るとついつい自分もやりたくなってしまうので，時間を溶かしすぎないようにしなければ．\n\n<span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160805/20160805235700.png\" alt=\"f:id:salmon2073:20160805235700p:plain\" title=\"f:id:salmon2073:20160805235700p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n","source":"_posts/2016-08-05-MinecraftサーバのログをSlackに流す.md","raw":"---\ntitle: MinecraftサーバのログをSlackに流す\ndate: 2016-08-05 22:51:07\nthumbnail: https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160805/20160805234813.png\n---\n\n## はじめに\n\n自前でマイクラ鯖を建ててマルチプレイをしていると，24時間出入りできて楽しい．\n\n鯖内のログイン履歴やチャット履歴は自分がログインしてないときでも残る．\nこれを共有できれば，自分がいない間にあった出来事や鯖にログインしているメンバーの確認などがマイクラを起動しなくても可能になる．\nまた，ゲーム中にメモした座標などがログアウトしたあとにも残るので大変便利なのだ．\n\nログを共有するにはチャットサービスのbotにしてしまうのがよい．\nある程度のセキュリティに期待できるし，お気に入り機能や通知機能などが最初からそろっている．\nちょうど鯖メンバー用のSlackチームを作っていたので，今回はそれを利用することにした．\n\n## 実装\n\nRubyのslack-ruby-clientを用いて書いてみた．\nまずはgemのインストール．\n\n```\ngem install slack-ruby-client\n```\n\nminecraft_server.jarを設置しているディレクトリと同じ階層に以下のプログラムを設置．\n\n<script src=\"https://gist.github.com/salmon2073/5e745965f9b936cb086bdf19df2a8a65.js\"></script>\n\nslackのアクセストークンを取得してきて書き換える．アクセストークンの取得方法は例えば以下の記事を参考にするとよい．\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fjoesbar.blog.jp%2Farchives%2F1059092482.html\" title=\"Slackでボットを作る　カスタムボット連携編 : じょえずブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://joesbar.blog.jp/archives/1059092482.html\">joesbar.blog.jp</a></cite>\n\nチャンネル名を書き換えよう．結構な量のログが流れるので，専用のチャンネルを新しく作るのがおススメ．\n通知したいチャンネルにbotがいるか確認することを忘れずに．\n\nあとは実行すれば鯖内の入退出や会話，死因や称号の情報がSlackに流れてくる．エラーが疑われる場合は4行目をコメントアウトしてデバッグしよう．\n\n## おわりに\n\nそのままの状態だとサーバの警告なども拾ってしまうので，運用する際にはある程度フィルタリングするのがよい．\n\nうちの鯖のメンバーには今のところ好評である．メモ機能としても活躍している．\n他の人がプレイしている情報を見るとついつい自分もやりたくなってしまうので，時間を溶かしすぎないようにしなければ．\n\n<span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160805/20160805235700.png\" alt=\"f:id:salmon2073:20160805235700p:plain\" title=\"f:id:salmon2073:20160805235700p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span>\n\n","slug":"MinecraftサーバのログをSlackに流す","published":1,"updated":"2020-05-16T07:41:06.083Z","_id":"cka9bfh1h002kxgtv487qgbfh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>自前でマイクラ鯖を建ててマルチプレイをしていると，24時間出入りできて楽しい．</p>\n<p>鯖内のログイン履歴やチャット履歴は自分がログインしてないときでも残る．<br>これを共有できれば，自分がいない間にあった出来事や鯖にログインしているメンバーの確認などがマイクラを起動しなくても可能になる．<br>また，ゲーム中にメモした座標などがログアウトしたあとにも残るので大変便利なのだ．</p>\n<p>ログを共有するにはチャットサービスのbotにしてしまうのがよい．<br>ある程度のセキュリティに期待できるし，お気に入り機能や通知機能などが最初からそろっている．<br>ちょうど鯖メンバー用のSlackチームを作っていたので，今回はそれを利用することにした．</p>\n<h2 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h2><p>Rubyのslack-ruby-clientを用いて書いてみた．<br>まずはgemのインストール．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install slack-ruby-client</span><br></pre></td></tr></table></figure>\n\n<p>minecraft_server.jarを設置しているディレクトリと同じ階層に以下のプログラムを設置．</p>\n<script src=\"https://gist.github.com/salmon2073/5e745965f9b936cb086bdf19df2a8a65.js\"></script>\n\n<p>slackのアクセストークンを取得してきて書き換える．アクセストークンの取得方法は例えば以下の記事を参考にするとよい．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fjoesbar.blog.jp%2Farchives%2F1059092482.html\" title=\"Slackでボットを作る　カスタムボット連携編 : じょえずブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://joesbar.blog.jp/archives/1059092482.html\">joesbar.blog.jp</a></cite>\n\n<p>チャンネル名を書き換えよう．結構な量のログが流れるので，専用のチャンネルを新しく作るのがおススメ．<br>通知したいチャンネルにbotがいるか確認することを忘れずに．</p>\n<p>あとは実行すれば鯖内の入退出や会話，死因や称号の情報がSlackに流れてくる．エラーが疑われる場合は4行目をコメントアウトしてデバッグしよう．</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>そのままの状態だとサーバの警告なども拾ってしまうので，運用する際にはある程度フィルタリングするのがよい．</p>\n<p>うちの鯖のメンバーには今のところ好評である．メモ機能としても活躍している．<br>他の人がプレイしている情報を見るとついつい自分もやりたくなってしまうので，時間を溶かしすぎないようにしなければ．</p>\n<p><span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160805/20160805235700.png\" alt=\"f:id:salmon2073:20160805235700p:plain\" title=\"f:id:salmon2073:20160805235700p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>自前でマイクラ鯖を建ててマルチプレイをしていると，24時間出入りできて楽しい．</p>\n<p>鯖内のログイン履歴やチャット履歴は自分がログインしてないときでも残る．<br>これを共有できれば，自分がいない間にあった出来事や鯖にログインしているメンバーの確認などがマイクラを起動しなくても可能になる．<br>また，ゲーム中にメモした座標などがログアウトしたあとにも残るので大変便利なのだ．</p>\n<p>ログを共有するにはチャットサービスのbotにしてしまうのがよい．<br>ある程度のセキュリティに期待できるし，お気に入り機能や通知機能などが最初からそろっている．<br>ちょうど鯖メンバー用のSlackチームを作っていたので，今回はそれを利用することにした．</p>\n<h2 id=\"実装\"><a href=\"#実装\" class=\"headerlink\" title=\"実装\"></a>実装</h2><p>Rubyのslack-ruby-clientを用いて書いてみた．<br>まずはgemのインストール．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install slack-ruby-client</span><br></pre></td></tr></table></figure>\n\n<p>minecraft_server.jarを設置しているディレクトリと同じ階層に以下のプログラムを設置．</p>\n<script src=\"https://gist.github.com/salmon2073/5e745965f9b936cb086bdf19df2a8a65.js\"></script>\n\n<p>slackのアクセストークンを取得してきて書き換える．アクセストークンの取得方法は例えば以下の記事を参考にするとよい．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fjoesbar.blog.jp%2Farchives%2F1059092482.html\" title=\"Slackでボットを作る　カスタムボット連携編 : じょえずブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://joesbar.blog.jp/archives/1059092482.html\">joesbar.blog.jp</a></cite>\n\n<p>チャンネル名を書き換えよう．結構な量のログが流れるので，専用のチャンネルを新しく作るのがおススメ．<br>通知したいチャンネルにbotがいるか確認することを忘れずに．</p>\n<p>あとは実行すれば鯖内の入退出や会話，死因や称号の情報がSlackに流れてくる．エラーが疑われる場合は4行目をコメントアウトしてデバッグしよう．</p>\n<h2 id=\"おわりに\"><a href=\"#おわりに\" class=\"headerlink\" title=\"おわりに\"></a>おわりに</h2><p>そのままの状態だとサーバの警告なども拾ってしまうので，運用する際にはある程度フィルタリングするのがよい．</p>\n<p>うちの鯖のメンバーには今のところ好評である．メモ機能としても活躍している．<br>他の人がプレイしている情報を見るとついつい自分もやりたくなってしまうので，時間を溶かしすぎないようにしなければ．</p>\n<p><span itemscope itemtype=\"https://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160805/20160805235700.png\" alt=\"f:id:salmon2073:20160805235700p:plain\" title=\"f:id:salmon2073:20160805235700p:plain\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n"},{"title":"Evernoteからの移行先について考えた","date":"2016-08-12T09:54:21.000Z","thubmnail":"https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160812/20160812152250.jpg","_content":"\n## はじめに\n\n普段テキストの管理にはEvernoteを利用している．\nシンプルで使いやすく，動作も軽快なため大変重宝している．\nしかし，そんなEvernote料金体系が変更になり，無料版では同期できる端末が2台までに制限されることになった．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.evernote.com%2Fjp%2F2016%2F06%2F29%2F53395\" title=\"Evernote の価格プランの改定について - Evernote日本語版ブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.evernote.com/jp/2016/06/29/53395\">blog.evernote.com</a></cite>\n\n2台の内訳にはスマホも含まれるため，メインのPC + スマホの組み合わせで埋まってしまうことになる．\n例えば，外出用のノートPCとデスクトップPCを使い分けている場合には，スマホと合わせて3台になるため制限台数を超えてしまうのだ．\n\n今回の料金プラン変更を機にEvernoteから別のサービスに乗り換えている人もいる．\n今後さらに制限が厳しくなるかもしれないと考えると，今のうちに移行先を探しておくのが賢明だろう．\n\nそこで，乗り換え候補のサービスについて考えてみることにした．\n\n## OneNote\n\n<a href=\"https://www.onenote.com/?ui=ja-jp\">Microsoft OneNote | &#x30C7;&#x30D0;&#x30A4;&#x30B9;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x305F;&#x30C7;&#x30B8;&#x30BF;&#x30EB; &#x30CE;&#x30FC;&#x30C8;&#x4F5C;&#x6210;&#x30A2;&#x30D7;&#x30EA;</a>\n\nEvernoteからの移行について検索すると，候補として最も有力と言われているのはOneNoteのようだ．\nOffice製品の一つだが無料で使用することができる．Evernoteからの移行ツールが公開されているため，移行も容易である．\nEvernoteはテキストエディタのようなインタフェースである一方で，OneNoteはテキストの配置が自由，ペン入力にも対応しているなど，「紙」のような使い方ができるのが特徴である．\n\n確かに移行先として適していると思い，私も実際に使ってみた…のだが，どうも操作感がしっくりこない．\n一番気になるのはテキストボックスがチラチラすることである．\n普段テキストは左につめて上から書いていくことに慣れているため（例えばブログもそうである），自由度の高すぎる記入スペースはかえって書きづらいと感じてしまう．\n\n逆に言えばそれ以外に大きく気になる点はなかったので，OneNoteの編集スタイルになじめる人にはお勧めである．\n\n## Google Keep\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fgoogle-keep-notes-and-lis%2Fhmjkmjkepdijhoojdojkdfohbdgmmhki%3Fhl%3Dja\" title=\"Google Keep - メモとリスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://chrome.google.com/webstore/detail/google-keep-notes-and-lis/hmjkmjkepdijhoojdojkdfohbdgmmhki?hl=ja\">chrome.google.com</cite>\n\n続いて多く言及されていたのはGoogle Keepである．「ノート」というよりは「メモ」をとる感覚に近いツールで，ボードに付箋を貼り付けるようにして管理する．\n便利な機能がそろっていて，リマインドしたり他の人と共有したりといったことができる．\n\nただし，残念なことにノートブック機能がない．そのため，保存したノートをカテゴリに分けて整理するのは難しい．\nもちろん検索機能はあるので，気軽にメモをとりたいシーンでは活用できるだろう．\n\n## Simplenote\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fsimplenote.com%2F\" title=\"Simplenote\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://simplenote.com/\">simplenote.com</a></cite>\n\nこちらはEvernoteを使う前に私が使っていたサービスである．テキストの管理に特化しているサービスで，使い方に迷いようがないほどシンプルなツールである．\n以前使用していたときはWindows用のデスクトップ版はなかったが，今は公開されている．マークダウン形式での記述に対応している．\n\nノートブック機能はないが，タグをつけることができる．エディタはシンプルでEvernoteに似ている．\nあと画像さえ貼り付けることができれば完璧なのに…と思っていたらマークダウンで記述してやればプレビューで見れるらしい．（一度同期すればオフラインでも可）\n\n## 終わりに\n\nここまでいくつか候補を挙げてみたが，個人的にはSimplenoteが少ないコストで乗り換えられて良いように思う．\nしばらくはEvernoteとパラレルで使ってみて，問題ないようであれば移行してみたい．\n\n","source":"_posts/2016-08-12-Evernoteからの移行先について考えた.md","raw":"---\ntitle: Evernoteからの移行先について考えた\ndate: 2016-08-12 18:54:21\nthubmnail: https://cdn-ak.f.st-hatena.com/images/fotolife/s/salmon2073/20160812/20160812152250.jpg\n---\n\n## はじめに\n\n普段テキストの管理にはEvernoteを利用している．\nシンプルで使いやすく，動作も軽快なため大変重宝している．\nしかし，そんなEvernote料金体系が変更になり，無料版では同期できる端末が2台までに制限されることになった．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.evernote.com%2Fjp%2F2016%2F06%2F29%2F53395\" title=\"Evernote の価格プランの改定について - Evernote日本語版ブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.evernote.com/jp/2016/06/29/53395\">blog.evernote.com</a></cite>\n\n2台の内訳にはスマホも含まれるため，メインのPC + スマホの組み合わせで埋まってしまうことになる．\n例えば，外出用のノートPCとデスクトップPCを使い分けている場合には，スマホと合わせて3台になるため制限台数を超えてしまうのだ．\n\n今回の料金プラン変更を機にEvernoteから別のサービスに乗り換えている人もいる．\n今後さらに制限が厳しくなるかもしれないと考えると，今のうちに移行先を探しておくのが賢明だろう．\n\nそこで，乗り換え候補のサービスについて考えてみることにした．\n\n## OneNote\n\n<a href=\"https://www.onenote.com/?ui=ja-jp\">Microsoft OneNote | &#x30C7;&#x30D0;&#x30A4;&#x30B9;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x305F;&#x30C7;&#x30B8;&#x30BF;&#x30EB; &#x30CE;&#x30FC;&#x30C8;&#x4F5C;&#x6210;&#x30A2;&#x30D7;&#x30EA;</a>\n\nEvernoteからの移行について検索すると，候補として最も有力と言われているのはOneNoteのようだ．\nOffice製品の一つだが無料で使用することができる．Evernoteからの移行ツールが公開されているため，移行も容易である．\nEvernoteはテキストエディタのようなインタフェースである一方で，OneNoteはテキストの配置が自由，ペン入力にも対応しているなど，「紙」のような使い方ができるのが特徴である．\n\n確かに移行先として適していると思い，私も実際に使ってみた…のだが，どうも操作感がしっくりこない．\n一番気になるのはテキストボックスがチラチラすることである．\n普段テキストは左につめて上から書いていくことに慣れているため（例えばブログもそうである），自由度の高すぎる記入スペースはかえって書きづらいと感じてしまう．\n\n逆に言えばそれ以外に大きく気になる点はなかったので，OneNoteの編集スタイルになじめる人にはお勧めである．\n\n## Google Keep\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fgoogle-keep-notes-and-lis%2Fhmjkmjkepdijhoojdojkdfohbdgmmhki%3Fhl%3Dja\" title=\"Google Keep - メモとリスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://chrome.google.com/webstore/detail/google-keep-notes-and-lis/hmjkmjkepdijhoojdojkdfohbdgmmhki?hl=ja\">chrome.google.com</cite>\n\n続いて多く言及されていたのはGoogle Keepである．「ノート」というよりは「メモ」をとる感覚に近いツールで，ボードに付箋を貼り付けるようにして管理する．\n便利な機能がそろっていて，リマインドしたり他の人と共有したりといったことができる．\n\nただし，残念なことにノートブック機能がない．そのため，保存したノートをカテゴリに分けて整理するのは難しい．\nもちろん検索機能はあるので，気軽にメモをとりたいシーンでは活用できるだろう．\n\n## Simplenote\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fsimplenote.com%2F\" title=\"Simplenote\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://simplenote.com/\">simplenote.com</a></cite>\n\nこちらはEvernoteを使う前に私が使っていたサービスである．テキストの管理に特化しているサービスで，使い方に迷いようがないほどシンプルなツールである．\n以前使用していたときはWindows用のデスクトップ版はなかったが，今は公開されている．マークダウン形式での記述に対応している．\n\nノートブック機能はないが，タグをつけることができる．エディタはシンプルでEvernoteに似ている．\nあと画像さえ貼り付けることができれば完璧なのに…と思っていたらマークダウンで記述してやればプレビューで見れるらしい．（一度同期すればオフラインでも可）\n\n## 終わりに\n\nここまでいくつか候補を挙げてみたが，個人的にはSimplenoteが少ないコストで乗り換えられて良いように思う．\nしばらくはEvernoteとパラレルで使ってみて，問題ないようであれば移行してみたい．\n\n","slug":"Evernoteからの移行先について考えた","published":1,"updated":"2020-05-16T07:35:00.519Z","_id":"cka9bfik3002lxgtvalz0bjr3","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>普段テキストの管理にはEvernoteを利用している．<br>シンプルで使いやすく，動作も軽快なため大変重宝している．<br>しかし，そんなEvernote料金体系が変更になり，無料版では同期できる端末が2台までに制限されることになった．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.evernote.com%2Fjp%2F2016%2F06%2F29%2F53395\" title=\"Evernote の価格プランの改定について - Evernote日本語版ブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.evernote.com/jp/2016/06/29/53395\">blog.evernote.com</a></cite>\n\n<p>2台の内訳にはスマホも含まれるため，メインのPC + スマホの組み合わせで埋まってしまうことになる．<br>例えば，外出用のノートPCとデスクトップPCを使い分けている場合には，スマホと合わせて3台になるため制限台数を超えてしまうのだ．</p>\n<p>今回の料金プラン変更を機にEvernoteから別のサービスに乗り換えている人もいる．<br>今後さらに制限が厳しくなるかもしれないと考えると，今のうちに移行先を探しておくのが賢明だろう．</p>\n<p>そこで，乗り換え候補のサービスについて考えてみることにした．</p>\n<h2 id=\"OneNote\"><a href=\"#OneNote\" class=\"headerlink\" title=\"OneNote\"></a>OneNote</h2><p><a href=\"https://www.onenote.com/?ui=ja-jp\">Microsoft OneNote | &#x30C7;&#x30D0;&#x30A4;&#x30B9;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x305F;&#x30C7;&#x30B8;&#x30BF;&#x30EB; &#x30CE;&#x30FC;&#x30C8;&#x4F5C;&#x6210;&#x30A2;&#x30D7;&#x30EA;</a></p>\n<p>Evernoteからの移行について検索すると，候補として最も有力と言われているのはOneNoteのようだ．<br>Office製品の一つだが無料で使用することができる．Evernoteからの移行ツールが公開されているため，移行も容易である．<br>Evernoteはテキストエディタのようなインタフェースである一方で，OneNoteはテキストの配置が自由，ペン入力にも対応しているなど，「紙」のような使い方ができるのが特徴である．</p>\n<p>確かに移行先として適していると思い，私も実際に使ってみた…のだが，どうも操作感がしっくりこない．<br>一番気になるのはテキストボックスがチラチラすることである．<br>普段テキストは左につめて上から書いていくことに慣れているため（例えばブログもそうである），自由度の高すぎる記入スペースはかえって書きづらいと感じてしまう．</p>\n<p>逆に言えばそれ以外に大きく気になる点はなかったので，OneNoteの編集スタイルになじめる人にはお勧めである．</p>\n<h2 id=\"Google-Keep\"><a href=\"#Google-Keep\" class=\"headerlink\" title=\"Google Keep\"></a>Google Keep</h2><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fgoogle-keep-notes-and-lis%2Fhmjkmjkepdijhoojdojkdfohbdgmmhki%3Fhl%3Dja\" title=\"Google Keep - メモとリスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://chrome.google.com/webstore/detail/google-keep-notes-and-lis/hmjkmjkepdijhoojdojkdfohbdgmmhki?hl=ja\">chrome.google.com</cite>\n\n<p>続いて多く言及されていたのはGoogle Keepである．「ノート」というよりは「メモ」をとる感覚に近いツールで，ボードに付箋を貼り付けるようにして管理する．<br>便利な機能がそろっていて，リマインドしたり他の人と共有したりといったことができる．</p>\n<p>ただし，残念なことにノートブック機能がない．そのため，保存したノートをカテゴリに分けて整理するのは難しい．<br>もちろん検索機能はあるので，気軽にメモをとりたいシーンでは活用できるだろう．</p>\n<h2 id=\"Simplenote\"><a href=\"#Simplenote\" class=\"headerlink\" title=\"Simplenote\"></a>Simplenote</h2><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fsimplenote.com%2F\" title=\"Simplenote\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://simplenote.com/\">simplenote.com</a></cite>\n\n<p>こちらはEvernoteを使う前に私が使っていたサービスである．テキストの管理に特化しているサービスで，使い方に迷いようがないほどシンプルなツールである．<br>以前使用していたときはWindows用のデスクトップ版はなかったが，今は公開されている．マークダウン形式での記述に対応している．</p>\n<p>ノートブック機能はないが，タグをつけることができる．エディタはシンプルでEvernoteに似ている．<br>あと画像さえ貼り付けることができれば完璧なのに…と思っていたらマークダウンで記述してやればプレビューで見れるらしい．（一度同期すればオフラインでも可）</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>ここまでいくつか候補を挙げてみたが，個人的にはSimplenoteが少ないコストで乗り換えられて良いように思う．<br>しばらくはEvernoteとパラレルで使ってみて，問題ないようであれば移行してみたい．</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>普段テキストの管理にはEvernoteを利用している．<br>シンプルで使いやすく，動作も軽快なため大変重宝している．<br>しかし，そんなEvernote料金体系が変更になり，無料版では同期できる端末が2台までに制限されることになった．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fblog.evernote.com%2Fjp%2F2016%2F06%2F29%2F53395\" title=\"Evernote の価格プランの改定について - Evernote日本語版ブログ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://blog.evernote.com/jp/2016/06/29/53395\">blog.evernote.com</a></cite>\n\n<p>2台の内訳にはスマホも含まれるため，メインのPC + スマホの組み合わせで埋まってしまうことになる．<br>例えば，外出用のノートPCとデスクトップPCを使い分けている場合には，スマホと合わせて3台になるため制限台数を超えてしまうのだ．</p>\n<p>今回の料金プラン変更を機にEvernoteから別のサービスに乗り換えている人もいる．<br>今後さらに制限が厳しくなるかもしれないと考えると，今のうちに移行先を探しておくのが賢明だろう．</p>\n<p>そこで，乗り換え候補のサービスについて考えてみることにした．</p>\n<h2 id=\"OneNote\"><a href=\"#OneNote\" class=\"headerlink\" title=\"OneNote\"></a>OneNote</h2><p><a href=\"https://www.onenote.com/?ui=ja-jp\">Microsoft OneNote | &#x30C7;&#x30D0;&#x30A4;&#x30B9;&#x306B;&#x5BFE;&#x5FDC;&#x3057;&#x305F;&#x30C7;&#x30B8;&#x30BF;&#x30EB; &#x30CE;&#x30FC;&#x30C8;&#x4F5C;&#x6210;&#x30A2;&#x30D7;&#x30EA;</a></p>\n<p>Evernoteからの移行について検索すると，候補として最も有力と言われているのはOneNoteのようだ．<br>Office製品の一つだが無料で使用することができる．Evernoteからの移行ツールが公開されているため，移行も容易である．<br>Evernoteはテキストエディタのようなインタフェースである一方で，OneNoteはテキストの配置が自由，ペン入力にも対応しているなど，「紙」のような使い方ができるのが特徴である．</p>\n<p>確かに移行先として適していると思い，私も実際に使ってみた…のだが，どうも操作感がしっくりこない．<br>一番気になるのはテキストボックスがチラチラすることである．<br>普段テキストは左につめて上から書いていくことに慣れているため（例えばブログもそうである），自由度の高すぎる記入スペースはかえって書きづらいと感じてしまう．</p>\n<p>逆に言えばそれ以外に大きく気になる点はなかったので，OneNoteの編集スタイルになじめる人にはお勧めである．</p>\n<h2 id=\"Google-Keep\"><a href=\"#Google-Keep\" class=\"headerlink\" title=\"Google Keep\"></a>Google Keep</h2><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fchrome.google.com%2Fwebstore%2Fdetail%2Fgoogle-keep-notes-and-lis%2Fhmjkmjkepdijhoojdojkdfohbdgmmhki%3Fhl%3Dja\" title=\"Google Keep - メモとリスト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://chrome.google.com/webstore/detail/google-keep-notes-and-lis/hmjkmjkepdijhoojdojkdfohbdgmmhki?hl=ja\">chrome.google.com</cite>\n\n<p>続いて多く言及されていたのはGoogle Keepである．「ノート」というよりは「メモ」をとる感覚に近いツールで，ボードに付箋を貼り付けるようにして管理する．<br>便利な機能がそろっていて，リマインドしたり他の人と共有したりといったことができる．</p>\n<p>ただし，残念なことにノートブック機能がない．そのため，保存したノートをカテゴリに分けて整理するのは難しい．<br>もちろん検索機能はあるので，気軽にメモをとりたいシーンでは活用できるだろう．</p>\n<h2 id=\"Simplenote\"><a href=\"#Simplenote\" class=\"headerlink\" title=\"Simplenote\"></a>Simplenote</h2><iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fsimplenote.com%2F\" title=\"Simplenote\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://simplenote.com/\">simplenote.com</a></cite>\n\n<p>こちらはEvernoteを使う前に私が使っていたサービスである．テキストの管理に特化しているサービスで，使い方に迷いようがないほどシンプルなツールである．<br>以前使用していたときはWindows用のデスクトップ版はなかったが，今は公開されている．マークダウン形式での記述に対応している．</p>\n<p>ノートブック機能はないが，タグをつけることができる．エディタはシンプルでEvernoteに似ている．<br>あと画像さえ貼り付けることができれば完璧なのに…と思っていたらマークダウンで記述してやればプレビューで見れるらしい．（一度同期すればオフラインでも可）</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>ここまでいくつか候補を挙げてみたが，個人的にはSimplenoteが少ないコストで乗り換えられて良いように思う．<br>しばらくはEvernoteとパラレルで使ってみて，問題ないようであれば移行してみたい．</p>\n"},{"title":"シン・ゴジラを見てきた","date":"2016-08-20T15:15:49.000Z","_content":"\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.shin-godzilla.jp%2Findex.html\" title=\"映画『シン・ゴジラ』公式サイト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.shin-godzilla.jp/index.html\">www.shin-godzilla.jp</a></cite>\n\n先週末にシン・ゴジラを見てきた．\n\n普段映画を見に行くことはめったにないのだが，ゴジラ映画はものごころついたときからビデオでよく見ていたので，なんとなく見ておかないといけない気がしていた．\nそれならせっかくだし映画館で見てみようということで行ってきた．\n\n人気映画のチケットをとるには朝から映画館へ行って並ぶ必要があるという記憶だったが，今はそうではないらしい．\nネットから予約してクレジットで決済，なんと視聴席までその場で決めることができる．ちょっと前に作ったクレカが意外なところで役にたった．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohotheater.jp%2Fvit%2F\" title=\"インターネットチケット販売“vit” || TOHOシネマズ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.tohotheater.jp/vit/\">www.tohotheater.jp</a></cite>\n\n肝心のシン・ゴジラについてだが，「これだよこれ」という感じだった．\n昔見ていたときはゴジラのエネルギー源についての話などは分からなかったので，改めて一から全部みることができた気分である．\n\nゴジラってとにかく「最強・最恐」ってイメージで，目的もなくただただ街を破壊しつくすシーンが子供心に一番興奮していたのだが，今作でもそれを見ることができた．破壊光線も健在である．\n\nこの歳になってみると，自分だったらどのタイミングで避難できるだろうかとか，備えは足りるのかとか，いろいろと考えてしまうことに気づいた．\n作中でも言われているがゴジラって存在自体は自然災害と変わらないので，かえって宇宙人などよりもリアリティがある．「ゴシラ災害対策マニュアル」って本当にありそうだし．\n\n映画の作りこみや伏線の貼り方についてはweb上でたくさん議論されているので，あえて書かないことにする．\n童心に返ることができて楽しかった．\n\n","source":"_posts/2016-08-21-シン・ゴジラを見てきた.md","raw":"---\ntitle: シン・ゴジラを見てきた\ndate: 2016-08-21 00:15:49\n---\n\n<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.shin-godzilla.jp%2Findex.html\" title=\"映画『シン・ゴジラ』公式サイト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.shin-godzilla.jp/index.html\">www.shin-godzilla.jp</a></cite>\n\n先週末にシン・ゴジラを見てきた．\n\n普段映画を見に行くことはめったにないのだが，ゴジラ映画はものごころついたときからビデオでよく見ていたので，なんとなく見ておかないといけない気がしていた．\nそれならせっかくだし映画館で見てみようということで行ってきた．\n\n人気映画のチケットをとるには朝から映画館へ行って並ぶ必要があるという記憶だったが，今はそうではないらしい．\nネットから予約してクレジットで決済，なんと視聴席までその場で決めることができる．ちょっと前に作ったクレカが意外なところで役にたった．\n\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohotheater.jp%2Fvit%2F\" title=\"インターネットチケット販売“vit” || TOHOシネマズ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.tohotheater.jp/vit/\">www.tohotheater.jp</a></cite>\n\n肝心のシン・ゴジラについてだが，「これだよこれ」という感じだった．\n昔見ていたときはゴジラのエネルギー源についての話などは分からなかったので，改めて一から全部みることができた気分である．\n\nゴジラってとにかく「最強・最恐」ってイメージで，目的もなくただただ街を破壊しつくすシーンが子供心に一番興奮していたのだが，今作でもそれを見ることができた．破壊光線も健在である．\n\nこの歳になってみると，自分だったらどのタイミングで避難できるだろうかとか，備えは足りるのかとか，いろいろと考えてしまうことに気づいた．\n作中でも言われているがゴジラって存在自体は自然災害と変わらないので，かえって宇宙人などよりもリアリティがある．「ゴシラ災害対策マニュアル」って本当にありそうだし．\n\n映画の作りこみや伏線の貼り方についてはweb上でたくさん議論されているので，あえて書かないことにする．\n童心に返ることができて楽しかった．\n\n","slug":"シン・ゴジラを見てきた","published":1,"updated":"2020-05-16T07:41:06.085Z","_id":"cka9bfk7q002mxgtv3izq0cmp","comments":1,"layout":"post","photos":[],"link":"","content":"<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.shin-godzilla.jp%2Findex.html\" title=\"映画『シン・ゴジラ』公式サイト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.shin-godzilla.jp/index.html\">www.shin-godzilla.jp</a></cite>\n\n<p>先週末にシン・ゴジラを見てきた．</p>\n<p>普段映画を見に行くことはめったにないのだが，ゴジラ映画はものごころついたときからビデオでよく見ていたので，なんとなく見ておかないといけない気がしていた．<br>それならせっかくだし映画館で見てみようということで行ってきた．</p>\n<p>人気映画のチケットをとるには朝から映画館へ行って並ぶ必要があるという記憶だったが，今はそうではないらしい．<br>ネットから予約してクレジットで決済，なんと視聴席までその場で決めることができる．ちょっと前に作ったクレカが意外なところで役にたった．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohotheater.jp%2Fvit%2F\" title=\"インターネットチケット販売“vit” || TOHOシネマズ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.tohotheater.jp/vit/\">www.tohotheater.jp</a></cite>\n\n<p>肝心のシン・ゴジラについてだが，「これだよこれ」という感じだった．<br>昔見ていたときはゴジラのエネルギー源についての話などは分からなかったので，改めて一から全部みることができた気分である．</p>\n<p>ゴジラってとにかく「最強・最恐」ってイメージで，目的もなくただただ街を破壊しつくすシーンが子供心に一番興奮していたのだが，今作でもそれを見ることができた．破壊光線も健在である．</p>\n<p>この歳になってみると，自分だったらどのタイミングで避難できるだろうかとか，備えは足りるのかとか，いろいろと考えてしまうことに気づいた．<br>作中でも言われているがゴジラって存在自体は自然災害と変わらないので，かえって宇宙人などよりもリアリティがある．「ゴシラ災害対策マニュアル」って本当にありそうだし．</p>\n<p>映画の作りこみや伏線の貼り方についてはweb上でたくさん議論されているので，あえて書かないことにする．<br>童心に返ることができて楽しかった．</p>\n","site":{"data":{}},"excerpt":"","more":"<iframe src=\"//hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.shin-godzilla.jp%2Findex.html\" title=\"映画『シン・ゴジラ』公式サイト\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.shin-godzilla.jp/index.html\">www.shin-godzilla.jp</a></cite>\n\n<p>先週末にシン・ゴジラを見てきた．</p>\n<p>普段映画を見に行くことはめったにないのだが，ゴジラ映画はものごころついたときからビデオでよく見ていたので，なんとなく見ておかないといけない気がしていた．<br>それならせっかくだし映画館で見てみようということで行ってきた．</p>\n<p>人気映画のチケットをとるには朝から映画館へ行って並ぶ必要があるという記憶だったが，今はそうではないらしい．<br>ネットから予約してクレジットで決済，なんと視聴席までその場で決めることができる．ちょっと前に作ったクレカが意外なところで役にたった．</p>\n<iframe src=\"//hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.tohotheater.jp%2Fvit%2F\" title=\"インターネットチケット販売“vit” || TOHOシネマズ\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\"></iframe><cite class=\"hatena-citation\"><a href=\"https://www.tohotheater.jp/vit/\">www.tohotheater.jp</a></cite>\n\n<p>肝心のシン・ゴジラについてだが，「これだよこれ」という感じだった．<br>昔見ていたときはゴジラのエネルギー源についての話などは分からなかったので，改めて一から全部みることができた気分である．</p>\n<p>ゴジラってとにかく「最強・最恐」ってイメージで，目的もなくただただ街を破壊しつくすシーンが子供心に一番興奮していたのだが，今作でもそれを見ることができた．破壊光線も健在である．</p>\n<p>この歳になってみると，自分だったらどのタイミングで避難できるだろうかとか，備えは足りるのかとか，いろいろと考えてしまうことに気づいた．<br>作中でも言われているがゴジラって存在自体は自然災害と変わらないので，かえって宇宙人などよりもリアリティがある．「ゴシラ災害対策マニュアル」って本当にありそうだし．</p>\n<p>映画の作りこみや伏線の貼り方についてはweb上でたくさん議論されているので，あえて書かないことにする．<br>童心に返ることができて楽しかった．</p>\n"},{"title":"Ubuntu 14.04にownCloudをインストールする","date":"2015-05-22T02:45:41.000Z","_content":"\nファイル管理・共有に便利なownCloudをインストールしてみようと思い、\n\n```\nsudo apt-get install owncloud\n```\n\nとしてみたが、「しばらくバグがとれなそうだから消しちゃった」という旨の画面が出た。\nその後コンソールにはインストールできたようなメッセージが出たが、入ってない。\nなんということだ。\n\nというわけで、以下のページを参考に自力でインストールした。\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-setup-owncloud-5-on-ubuntu-12-10\">How To Setup ownCloud 5 On Ubuntu 12.10</a>\n\n上記のページではUbuntuのバージョン違うような気がするけど、同じように簡単に導入できた。\n\nhttpsの設定は<a href=\"https://www.cloudflare.com/\">CloudFlare</a>を使うとよいと教えてもらったのでやってみよう。\n\n","source":"_posts/2015-05-22-Ubuntu 14.04にownCloudをインストールする.md","raw":"---\ntitle: Ubuntu 14.04にownCloudをインストールする\ndate: 2015-05-22 11:45:41\ncategory: OSS\ntag: ownCloud\n---\n\nファイル管理・共有に便利なownCloudをインストールしてみようと思い、\n\n```\nsudo apt-get install owncloud\n```\n\nとしてみたが、「しばらくバグがとれなそうだから消しちゃった」という旨の画面が出た。\nその後コンソールにはインストールできたようなメッセージが出たが、入ってない。\nなんということだ。\n\nというわけで、以下のページを参考に自力でインストールした。\n<a href=\"https://www.digitalocean.com/community/tutorials/how-to-setup-owncloud-5-on-ubuntu-12-10\">How To Setup ownCloud 5 On Ubuntu 12.10</a>\n\n上記のページではUbuntuのバージョン違うような気がするけど、同じように簡単に導入できた。\n\nhttpsの設定は<a href=\"https://www.cloudflare.com/\">CloudFlare</a>を使うとよいと教えてもらったのでやってみよう。\n\n","slug":"Ubuntu 14.04にownCloudをインストールする","published":1,"updated":"2020-05-16T07:35:48.893Z","_id":"cka9bgi8w002nxgtv833edjxa","comments":1,"layout":"post","photos":[],"link":"","content":"<p>ファイル管理・共有に便利なownCloudをインストールしてみようと思い、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install owncloud</span><br></pre></td></tr></table></figure>\n\n<p>としてみたが、「しばらくバグがとれなそうだから消しちゃった」という旨の画面が出た。<br>その後コンソールにはインストールできたようなメッセージが出たが、入ってない。<br>なんということだ。</p>\n<p>というわけで、以下のページを参考に自力でインストールした。<br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-setup-owncloud-5-on-ubuntu-12-10\">How To Setup ownCloud 5 On Ubuntu 12.10</a></p>\n<p>上記のページではUbuntuのバージョン違うような気がするけど、同じように簡単に導入できた。</p>\n<p>httpsの設定は<a href=\"https://www.cloudflare.com/\">CloudFlare</a>を使うとよいと教えてもらったのでやってみよう。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ファイル管理・共有に便利なownCloudをインストールしてみようと思い、</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install owncloud</span><br></pre></td></tr></table></figure>\n\n<p>としてみたが、「しばらくバグがとれなそうだから消しちゃった」という旨の画面が出た。<br>その後コンソールにはインストールできたようなメッセージが出たが、入ってない。<br>なんということだ。</p>\n<p>というわけで、以下のページを参考に自力でインストールした。<br><a href=\"https://www.digitalocean.com/community/tutorials/how-to-setup-owncloud-5-on-ubuntu-12-10\">How To Setup ownCloud 5 On Ubuntu 12.10</a></p>\n<p>上記のページではUbuntuのバージョン違うような気がするけど、同じように簡単に導入できた。</p>\n<p>httpsの設定は<a href=\"https://www.cloudflare.com/\">CloudFlare</a>を使うとよいと教えてもらったのでやってみよう。</p>\n"},{"title":"変数とは","date":"2013-12-29T05:49:19.000Z","_content":"\n## はじめに\n変数を人に説明するのは難しいことだと思う。\nここでは、変数に対する僕なりの解釈を述べたい。\n \n## 数学における変数\n数学では、式の中で変化することが可能なものを文字で表したものを呼ぶ。\n例えば、\nｙ ＝ ２ｘ\nのｘは変数である。　また、ｙも変数である。\n \n例外としては、\nｘ＋５＝８\nのｘは変数ではない。ｘ＝３と決まっているからである。\nまた、\n（ｘの２乗） ＝ 2\nこのｘも変数ではない。　ｘは√２または-√２と決まっているからである。\n中学・高校で数学を勉強した人はこのことを感覚的に理解していると思う。\n \nここからは、僕の現在の考え方を述べてみたい。\n変数は、関数があってはじめて存在するように見える。数学では、関数のことを「ある要素が与えられるとある要素が返ってくる対応」と理解する。それら２つの要素はそれぞれ何かしらの集合に属している。その集合は、数学の世界から自分で切り取ってきたものである。数値の集合かもしれなければベクトルの集合かもしれない。つまり、変数になりうる「もの」が何なのかはその時々によって変わるのだ。だから変数と呼ぶ。「変もの」と呼んでもいいくらいだ。\nここで、あたかも自分で切り取ってきた集合が一つであるように述べたが、そうとは限らない。結果として帰ってくる要素をまとめて、それを集合としてしまえば確かに自分で用意するのは一つであるが、時に用意した二つの集合の間の関係を主張することもある。\nまとめると、変数というのは関数を考える上で便宜上作られる概念なのである。\n \n## プログラミングにおける変数\nプログラミングでは、データを扱う領域のことをいう。\nまたは、その領域に名前をつけた際に領域の一般名詞として変数と呼ぶこともある。\n変数そのものの概念は統一されているようだが、その使い方や仕様は扱うプログラミング言語によって異なる場合がある。\n \nここからは、僕の現在の考え方を述べてみたい。\nプログラミングで重要なのは「データ構造」と「アルゴリズム（作業・How to）」である。ちなみにこの言葉は受け売りである。僕はそのデータとアルゴリズムの橋渡しをするのが変数だと理解している。データはプログラムの外部からまたは別のプログラムから渡される。これを一時的に保存し、作業するスペースが必要だ。しかし、PCの内部の領域は有限である。そこで、「この部分はこの処理につかうよ」と宣言することが変数を使うということだと思う。アルゴリズム側としては、この作業がどのデータに働きかけるのかを提示する必要がある。その際にデータを変数で指定してやれば、その中身ではなく種類を提示することができるのだ。\nまとめると、変数というのはデータを”固有”にも”一般”にも扱う上で必要な概念なのである。\n \n## 終わりに\n実際には、数学の正しい理解は専門家にでも聞くしかないし（僕は専門家では決してない）　プログラムは意図通りに動けばよいのである。\nただ、「こう思うんだけどどうだろう？」というスタンスは大事だと思う。\n","source":"_posts/2013-12-29-変数とは.md","raw":"---\ntitle: 変数とは\ndate: 2013-12-29 14:49:19\ncategory: 数学\ntag: プログラミング一般\n---\n\n## はじめに\n変数を人に説明するのは難しいことだと思う。\nここでは、変数に対する僕なりの解釈を述べたい。\n \n## 数学における変数\n数学では、式の中で変化することが可能なものを文字で表したものを呼ぶ。\n例えば、\nｙ ＝ ２ｘ\nのｘは変数である。　また、ｙも変数である。\n \n例外としては、\nｘ＋５＝８\nのｘは変数ではない。ｘ＝３と決まっているからである。\nまた、\n（ｘの２乗） ＝ 2\nこのｘも変数ではない。　ｘは√２または-√２と決まっているからである。\n中学・高校で数学を勉強した人はこのことを感覚的に理解していると思う。\n \nここからは、僕の現在の考え方を述べてみたい。\n変数は、関数があってはじめて存在するように見える。数学では、関数のことを「ある要素が与えられるとある要素が返ってくる対応」と理解する。それら２つの要素はそれぞれ何かしらの集合に属している。その集合は、数学の世界から自分で切り取ってきたものである。数値の集合かもしれなければベクトルの集合かもしれない。つまり、変数になりうる「もの」が何なのかはその時々によって変わるのだ。だから変数と呼ぶ。「変もの」と呼んでもいいくらいだ。\nここで、あたかも自分で切り取ってきた集合が一つであるように述べたが、そうとは限らない。結果として帰ってくる要素をまとめて、それを集合としてしまえば確かに自分で用意するのは一つであるが、時に用意した二つの集合の間の関係を主張することもある。\nまとめると、変数というのは関数を考える上で便宜上作られる概念なのである。\n \n## プログラミングにおける変数\nプログラミングでは、データを扱う領域のことをいう。\nまたは、その領域に名前をつけた際に領域の一般名詞として変数と呼ぶこともある。\n変数そのものの概念は統一されているようだが、その使い方や仕様は扱うプログラミング言語によって異なる場合がある。\n \nここからは、僕の現在の考え方を述べてみたい。\nプログラミングで重要なのは「データ構造」と「アルゴリズム（作業・How to）」である。ちなみにこの言葉は受け売りである。僕はそのデータとアルゴリズムの橋渡しをするのが変数だと理解している。データはプログラムの外部からまたは別のプログラムから渡される。これを一時的に保存し、作業するスペースが必要だ。しかし、PCの内部の領域は有限である。そこで、「この部分はこの処理につかうよ」と宣言することが変数を使うということだと思う。アルゴリズム側としては、この作業がどのデータに働きかけるのかを提示する必要がある。その際にデータを変数で指定してやれば、その中身ではなく種類を提示することができるのだ。\nまとめると、変数というのはデータを”固有”にも”一般”にも扱う上で必要な概念なのである。\n \n## 終わりに\n実際には、数学の正しい理解は専門家にでも聞くしかないし（僕は専門家では決してない）　プログラムは意図通りに動けばよいのである。\nただ、「こう思うんだけどどうだろう？」というスタンスは大事だと思う。\n","slug":"変数とは","published":1,"updated":"2020-05-16T07:36:03.717Z","_id":"cka9bgvc0002rxgtvha9g2i69","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>変数を人に説明するのは難しいことだと思う。<br>ここでは、変数に対する僕なりの解釈を述べたい。</p>\n<h2 id=\"数学における変数\"><a href=\"#数学における変数\" class=\"headerlink\" title=\"数学における変数\"></a>数学における変数</h2><p>数学では、式の中で変化することが可能なものを文字で表したものを呼ぶ。<br>例えば、<br>ｙ ＝ ２ｘ<br>のｘは変数である。　また、ｙも変数である。</p>\n<p>例外としては、<br>ｘ＋５＝８<br>のｘは変数ではない。ｘ＝３と決まっているからである。<br>また、<br>（ｘの２乗） ＝ 2<br>このｘも変数ではない。　ｘは√２または-√２と決まっているからである。<br>中学・高校で数学を勉強した人はこのことを感覚的に理解していると思う。</p>\n<p>ここからは、僕の現在の考え方を述べてみたい。<br>変数は、関数があってはじめて存在するように見える。数学では、関数のことを「ある要素が与えられるとある要素が返ってくる対応」と理解する。それら２つの要素はそれぞれ何かしらの集合に属している。その集合は、数学の世界から自分で切り取ってきたものである。数値の集合かもしれなければベクトルの集合かもしれない。つまり、変数になりうる「もの」が何なのかはその時々によって変わるのだ。だから変数と呼ぶ。「変もの」と呼んでもいいくらいだ。<br>ここで、あたかも自分で切り取ってきた集合が一つであるように述べたが、そうとは限らない。結果として帰ってくる要素をまとめて、それを集合としてしまえば確かに自分で用意するのは一つであるが、時に用意した二つの集合の間の関係を主張することもある。<br>まとめると、変数というのは関数を考える上で便宜上作られる概念なのである。</p>\n<h2 id=\"プログラミングにおける変数\"><a href=\"#プログラミングにおける変数\" class=\"headerlink\" title=\"プログラミングにおける変数\"></a>プログラミングにおける変数</h2><p>プログラミングでは、データを扱う領域のことをいう。<br>または、その領域に名前をつけた際に領域の一般名詞として変数と呼ぶこともある。<br>変数そのものの概念は統一されているようだが、その使い方や仕様は扱うプログラミング言語によって異なる場合がある。</p>\n<p>ここからは、僕の現在の考え方を述べてみたい。<br>プログラミングで重要なのは「データ構造」と「アルゴリズム（作業・How to）」である。ちなみにこの言葉は受け売りである。僕はそのデータとアルゴリズムの橋渡しをするのが変数だと理解している。データはプログラムの外部からまたは別のプログラムから渡される。これを一時的に保存し、作業するスペースが必要だ。しかし、PCの内部の領域は有限である。そこで、「この部分はこの処理につかうよ」と宣言することが変数を使うということだと思う。アルゴリズム側としては、この作業がどのデータに働きかけるのかを提示する必要がある。その際にデータを変数で指定してやれば、その中身ではなく種類を提示することができるのだ。<br>まとめると、変数というのはデータを”固有”にも”一般”にも扱う上で必要な概念なのである。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>実際には、数学の正しい理解は専門家にでも聞くしかないし（僕は専門家では決してない）　プログラムは意図通りに動けばよいのである。<br>ただ、「こう思うんだけどどうだろう？」というスタンスは大事だと思う。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"はじめに\"><a href=\"#はじめに\" class=\"headerlink\" title=\"はじめに\"></a>はじめに</h2><p>変数を人に説明するのは難しいことだと思う。<br>ここでは、変数に対する僕なりの解釈を述べたい。</p>\n<h2 id=\"数学における変数\"><a href=\"#数学における変数\" class=\"headerlink\" title=\"数学における変数\"></a>数学における変数</h2><p>数学では、式の中で変化することが可能なものを文字で表したものを呼ぶ。<br>例えば、<br>ｙ ＝ ２ｘ<br>のｘは変数である。　また、ｙも変数である。</p>\n<p>例外としては、<br>ｘ＋５＝８<br>のｘは変数ではない。ｘ＝３と決まっているからである。<br>また、<br>（ｘの２乗） ＝ 2<br>このｘも変数ではない。　ｘは√２または-√２と決まっているからである。<br>中学・高校で数学を勉強した人はこのことを感覚的に理解していると思う。</p>\n<p>ここからは、僕の現在の考え方を述べてみたい。<br>変数は、関数があってはじめて存在するように見える。数学では、関数のことを「ある要素が与えられるとある要素が返ってくる対応」と理解する。それら２つの要素はそれぞれ何かしらの集合に属している。その集合は、数学の世界から自分で切り取ってきたものである。数値の集合かもしれなければベクトルの集合かもしれない。つまり、変数になりうる「もの」が何なのかはその時々によって変わるのだ。だから変数と呼ぶ。「変もの」と呼んでもいいくらいだ。<br>ここで、あたかも自分で切り取ってきた集合が一つであるように述べたが、そうとは限らない。結果として帰ってくる要素をまとめて、それを集合としてしまえば確かに自分で用意するのは一つであるが、時に用意した二つの集合の間の関係を主張することもある。<br>まとめると、変数というのは関数を考える上で便宜上作られる概念なのである。</p>\n<h2 id=\"プログラミングにおける変数\"><a href=\"#プログラミングにおける変数\" class=\"headerlink\" title=\"プログラミングにおける変数\"></a>プログラミングにおける変数</h2><p>プログラミングでは、データを扱う領域のことをいう。<br>または、その領域に名前をつけた際に領域の一般名詞として変数と呼ぶこともある。<br>変数そのものの概念は統一されているようだが、その使い方や仕様は扱うプログラミング言語によって異なる場合がある。</p>\n<p>ここからは、僕の現在の考え方を述べてみたい。<br>プログラミングで重要なのは「データ構造」と「アルゴリズム（作業・How to）」である。ちなみにこの言葉は受け売りである。僕はそのデータとアルゴリズムの橋渡しをするのが変数だと理解している。データはプログラムの外部からまたは別のプログラムから渡される。これを一時的に保存し、作業するスペースが必要だ。しかし、PCの内部の領域は有限である。そこで、「この部分はこの処理につかうよ」と宣言することが変数を使うということだと思う。アルゴリズム側としては、この作業がどのデータに働きかけるのかを提示する必要がある。その際にデータを変数で指定してやれば、その中身ではなく種類を提示することができるのだ。<br>まとめると、変数というのはデータを”固有”にも”一般”にも扱う上で必要な概念なのである。</p>\n<h2 id=\"終わりに\"><a href=\"#終わりに\" class=\"headerlink\" title=\"終わりに\"></a>終わりに</h2><p>実際には、数学の正しい理解は専門家にでも聞くしかないし（僕は専門家では決してない）　プログラムは意図通りに動けばよいのである。<br>ただ、「こう思うんだけどどうだろう？」というスタンスは大事だと思う。</p>\n"},{"title":"(500日)のサマー感想","date":"2019-04-18T07:48:20.000Z","_content":"\n例によって，作品に対する個人的な考察を述べてみたいと思う．この作品は時間が行き来するなど，表現技法にも特徴がある．できればそういった点も踏まえて考察したいところなのだが，あいにく僕は表現技法には詳しくない．なので，ストーリーや登場人物に関する率直な感想を述べるにとどめたい．\n\n## 感想\n\nこの作品の印象を一言でいうなら，「現実にありふれた物語」である．作品の冒頭にあるように，登場人物が自分や知り合いの誰かに似ていると感じてしまうほど，既視感のあるキャラクターが作られている．\n\nただし，念頭に置くべき大前提がある．それは，この作品が「トムの物語」であるということである．\n物語のシーンは全てトムが見聞きする場面であるし，映像にはトムの心情がよく表現されている．タイトルにある「(500)日」は「トムの体験のうちの500日」という意味なのである．\n\n何故くどくどとトムの物語であることに言及しているのかというと，いつの間にか「サマーは悪い女かどうか？」ということを考えそうになるからである．むしろ，そのような問題意識を刷り込もうとしている演出がいくつかある．\n\n例えば，冒頭に原作者のメモとしてナレーションが「クソ女め」と言うシーンが印象に残る．これはサマーのことを言っているわけではない．だが，なんとなく「クソ女っぽい女性が出てくるのだろう」と思わせられ，非常にわざとらしい．他にも，「サマー効果」の話やトムの同僚がサマーの悪口を言うなど，事実と主観を絶妙に混ぜることで，サマーの人間性に興味が惹かれるような動線がひかれているのである．\n\nそのため，「サマーに振り回されるトム」や「トムから見えるサマーとその裏側」のような視点で見てしまいがちになる．しかしよく考えると，トムとサマーがお互いの価値観に与えた影響は少ない．最後まで，トムは恋愛相手との物語を，サマーは親友との物語をそれぞれ紡いでいるのである．\n\nしたがって，トムとサマーの成長はそれぞれ切り分けて考えることが妥当だと思われる．\n\n## トムの成長\n\nというわけでトムのほうに目を向けてみると，恋に落ちてから失恋して立ち直るまでと，なんと清々しい成長の軌跡であろうか．\n\n彼は元々正直者でやさしく，周りからも人望があるように描かれている．ただ少しだけ夢を追う自信がないという，ありふれた若者像である．そんな彼は，サマーとの関係が充実しているときには仕事でも実力を発揮しており，大変健全なマインドを持っている．さらに，失恋のストレスを夢へ向かって努力するパワーに変えることにも成功し，将来を期待させるほど人生を前へと切り開いている．\n\nトムにとってのサマーは，一人の恋人候補でしかない．興味深いことに，サマーの特性がトムに与えた影響はほぼないのである．例えば，トムがサマーの付き合い方を理解する描写はない．また，ラストシーンで彼は「人々の出会いは運命ではなく偶然であり，それに対する自分の行動こそが重要である」と悟っているが，これは彼が恋愛における自身の在り方を内省して得た結論であり，サマーと共有した時間の中で得たものではない．\n\nとはいえ，トムの恋人候補の一人にサマーがいたことは，彼にとって災難と言わざるをえない．もしサマーがトムの好意に対して明確に拒否を示していたら，彼はもっと早く先に進めたと思う．無論，恋人となってそのまま結婚していれば，トムにとって最良であったのは間違いない．\n\n出会いと別れの繰り返しを肯定したいがために，「人としての成長」に着目する話は枚挙にいとまがない．だが，その成長はあくまで副産物であって目的ではない．というか，トムの場合はそうするしかない状況で苦しみながら這い上がったのであり，その成長は100％彼の努力で得たものである．たとえ褒められることはあっても，間違っても「なんだかんだ良い経験になったじゃん」などと言われる筋合いはない．\n\nもっとも，トムがサマーと出会ってから別れるまでは500日より少ないくらいである．現実にはこれが何年もかけて起きる場合もあることを考えると，1年半程度で済んでいるのは不幸中の幸いだろう．それに，次の恋人を見つけたり再就職したりできるくらいには若い年齢であるということも，悲惨な結末にならない理由の一つだと思う．おそらく数年後には，サマーのような女性はトムの恋人候補からいなくなるだろう．\n\n## サマーの成長\n\nでは，サマーの方はどうかというと，こちらも人が変わったように成長(？)している．彼女は途中まで，カップルのように接しながら友達関係を主張するという，非常識といえる行動をとっている．この時点で，彼女が良いか悪いかで言ったら悪いに決まっているが，その考え方（もちろん本人の主観によって善悪が覆ることはないものの）にはハッとさせられる部分もある．\n\n彼女は自分が捨てられることに恐怖する一方で，大切なものを捨てることに頓着しないと考えていた．故に，お互いが所有関係のように見える恋愛を拒絶していたのである．つまり，別に相手をとっかえひっかえしたいという願望があったわけではない．サマー効果など，それこそ偶然彼女が持ち合わせている特性にすぎない．\n\n作中では，彼女は映画を見てこの考えを改め，男性と恋愛関係を築くようになる．一体その映画の何が彼女に影響を与えたのかは（映画の引用によるメタ的な考察は避けるとして）分かりかねる．だが，その映画は彼女が見たいと主張して見たものであり，サマーもまた他でもない彼女自身の行動が彼女を変えたのだということが示唆されている．\n\nその結果，サマーはトムよりも過去に出会った男性と結婚する．結婚相手がその男性であることについて，彼女は運命であると言っているが，やっていることは立派な取捨選択である．判断基準が直感（とサマーは言っている）である点は置いておくとしても，最終的に彼女はきちんとトムを振っており，その様子から彼女も成長していることが伺える．\n\nところで，僕は彼女が行った結婚相手（＝運命の相手）の選び方を，皮肉にも凄く上手であると感じてしまった．\n\n恋愛は基本的に，出会って付き合って別れたら次である．複数の相手と同時に付き合うことは，誠実さに欠けるため良くないとされる．故に，付き合う順番やタイミングによって最終的に選択することが不可能になってしまう相手も存在する．例えば，「3人付き合ったがやはり1人目がよい」と思った場合，その1人目がすでに他の人と結婚していたらこの選択はできない．\n\nところが，サマーの方法であればこの問題を解決できる．サマーは多くの男性たちとの関係を保留にし，後からその中で自分がピンときた一人を選択したのである．周りから見ればカップルにしか見えない関係であるため，男性たちに他の女性は寄り付かないだろう．この方法であれば，彼女は運命の相手をいつでも選ぶことができる．もちろん相手が自分に好意を持っていることが前提だが，サマー効果がある彼女なら誰でも選択できる．実際，サマーは他の男性と付き合っていながらトムと踊っている様子が描写されており，彼に期待を持たせ続けている．\n\nもちろん，サマーは意図してこの方法を行ったわけではない．そもそも彼女には運命の相手を選ぶつもりがなかったからだ．それを後から覆したのだから，全ての男性から愛想をつかされてもおかしくはないが．要するに，「モテるから自由にできた」という話である．\n\n## まとめ\n\n日常生活で偶然と思える出会いには，必ず「誰かの行動」という原因がある．トムとサマーが出会ったのはサマーが入社してきたからだし，トムとオータムが出会ったのはトムが転職活動を行ったからである．したがって，偶然性のあることと言えば「誰と誰が出会うのか」ということである．しかし，この作品は「誰と出会っても起こりうるパターン」を描くことで，本人たちの成長が必然に満ちたものであることを感じさせるようになっている．\n\n個人的には，できることならトムのような経験はしたくないし，サマーのような女性には近づきたくない．だが，「フィクション」として見るならば非常に勇気づけられ，笑える物語であった．","source":"_posts/2020-05-16-500日-のサマー感想.md","raw":"---\ntitle: (500日)のサマー感想\ndate: 2019-04-18 16:48:20\ncategory: 映画\ntags:\n---\n\n例によって，作品に対する個人的な考察を述べてみたいと思う．この作品は時間が行き来するなど，表現技法にも特徴がある．できればそういった点も踏まえて考察したいところなのだが，あいにく僕は表現技法には詳しくない．なので，ストーリーや登場人物に関する率直な感想を述べるにとどめたい．\n\n## 感想\n\nこの作品の印象を一言でいうなら，「現実にありふれた物語」である．作品の冒頭にあるように，登場人物が自分や知り合いの誰かに似ていると感じてしまうほど，既視感のあるキャラクターが作られている．\n\nただし，念頭に置くべき大前提がある．それは，この作品が「トムの物語」であるということである．\n物語のシーンは全てトムが見聞きする場面であるし，映像にはトムの心情がよく表現されている．タイトルにある「(500)日」は「トムの体験のうちの500日」という意味なのである．\n\n何故くどくどとトムの物語であることに言及しているのかというと，いつの間にか「サマーは悪い女かどうか？」ということを考えそうになるからである．むしろ，そのような問題意識を刷り込もうとしている演出がいくつかある．\n\n例えば，冒頭に原作者のメモとしてナレーションが「クソ女め」と言うシーンが印象に残る．これはサマーのことを言っているわけではない．だが，なんとなく「クソ女っぽい女性が出てくるのだろう」と思わせられ，非常にわざとらしい．他にも，「サマー効果」の話やトムの同僚がサマーの悪口を言うなど，事実と主観を絶妙に混ぜることで，サマーの人間性に興味が惹かれるような動線がひかれているのである．\n\nそのため，「サマーに振り回されるトム」や「トムから見えるサマーとその裏側」のような視点で見てしまいがちになる．しかしよく考えると，トムとサマーがお互いの価値観に与えた影響は少ない．最後まで，トムは恋愛相手との物語を，サマーは親友との物語をそれぞれ紡いでいるのである．\n\nしたがって，トムとサマーの成長はそれぞれ切り分けて考えることが妥当だと思われる．\n\n## トムの成長\n\nというわけでトムのほうに目を向けてみると，恋に落ちてから失恋して立ち直るまでと，なんと清々しい成長の軌跡であろうか．\n\n彼は元々正直者でやさしく，周りからも人望があるように描かれている．ただ少しだけ夢を追う自信がないという，ありふれた若者像である．そんな彼は，サマーとの関係が充実しているときには仕事でも実力を発揮しており，大変健全なマインドを持っている．さらに，失恋のストレスを夢へ向かって努力するパワーに変えることにも成功し，将来を期待させるほど人生を前へと切り開いている．\n\nトムにとってのサマーは，一人の恋人候補でしかない．興味深いことに，サマーの特性がトムに与えた影響はほぼないのである．例えば，トムがサマーの付き合い方を理解する描写はない．また，ラストシーンで彼は「人々の出会いは運命ではなく偶然であり，それに対する自分の行動こそが重要である」と悟っているが，これは彼が恋愛における自身の在り方を内省して得た結論であり，サマーと共有した時間の中で得たものではない．\n\nとはいえ，トムの恋人候補の一人にサマーがいたことは，彼にとって災難と言わざるをえない．もしサマーがトムの好意に対して明確に拒否を示していたら，彼はもっと早く先に進めたと思う．無論，恋人となってそのまま結婚していれば，トムにとって最良であったのは間違いない．\n\n出会いと別れの繰り返しを肯定したいがために，「人としての成長」に着目する話は枚挙にいとまがない．だが，その成長はあくまで副産物であって目的ではない．というか，トムの場合はそうするしかない状況で苦しみながら這い上がったのであり，その成長は100％彼の努力で得たものである．たとえ褒められることはあっても，間違っても「なんだかんだ良い経験になったじゃん」などと言われる筋合いはない．\n\nもっとも，トムがサマーと出会ってから別れるまでは500日より少ないくらいである．現実にはこれが何年もかけて起きる場合もあることを考えると，1年半程度で済んでいるのは不幸中の幸いだろう．それに，次の恋人を見つけたり再就職したりできるくらいには若い年齢であるということも，悲惨な結末にならない理由の一つだと思う．おそらく数年後には，サマーのような女性はトムの恋人候補からいなくなるだろう．\n\n## サマーの成長\n\nでは，サマーの方はどうかというと，こちらも人が変わったように成長(？)している．彼女は途中まで，カップルのように接しながら友達関係を主張するという，非常識といえる行動をとっている．この時点で，彼女が良いか悪いかで言ったら悪いに決まっているが，その考え方（もちろん本人の主観によって善悪が覆ることはないものの）にはハッとさせられる部分もある．\n\n彼女は自分が捨てられることに恐怖する一方で，大切なものを捨てることに頓着しないと考えていた．故に，お互いが所有関係のように見える恋愛を拒絶していたのである．つまり，別に相手をとっかえひっかえしたいという願望があったわけではない．サマー効果など，それこそ偶然彼女が持ち合わせている特性にすぎない．\n\n作中では，彼女は映画を見てこの考えを改め，男性と恋愛関係を築くようになる．一体その映画の何が彼女に影響を与えたのかは（映画の引用によるメタ的な考察は避けるとして）分かりかねる．だが，その映画は彼女が見たいと主張して見たものであり，サマーもまた他でもない彼女自身の行動が彼女を変えたのだということが示唆されている．\n\nその結果，サマーはトムよりも過去に出会った男性と結婚する．結婚相手がその男性であることについて，彼女は運命であると言っているが，やっていることは立派な取捨選択である．判断基準が直感（とサマーは言っている）である点は置いておくとしても，最終的に彼女はきちんとトムを振っており，その様子から彼女も成長していることが伺える．\n\nところで，僕は彼女が行った結婚相手（＝運命の相手）の選び方を，皮肉にも凄く上手であると感じてしまった．\n\n恋愛は基本的に，出会って付き合って別れたら次である．複数の相手と同時に付き合うことは，誠実さに欠けるため良くないとされる．故に，付き合う順番やタイミングによって最終的に選択することが不可能になってしまう相手も存在する．例えば，「3人付き合ったがやはり1人目がよい」と思った場合，その1人目がすでに他の人と結婚していたらこの選択はできない．\n\nところが，サマーの方法であればこの問題を解決できる．サマーは多くの男性たちとの関係を保留にし，後からその中で自分がピンときた一人を選択したのである．周りから見ればカップルにしか見えない関係であるため，男性たちに他の女性は寄り付かないだろう．この方法であれば，彼女は運命の相手をいつでも選ぶことができる．もちろん相手が自分に好意を持っていることが前提だが，サマー効果がある彼女なら誰でも選択できる．実際，サマーは他の男性と付き合っていながらトムと踊っている様子が描写されており，彼に期待を持たせ続けている．\n\nもちろん，サマーは意図してこの方法を行ったわけではない．そもそも彼女には運命の相手を選ぶつもりがなかったからだ．それを後から覆したのだから，全ての男性から愛想をつかされてもおかしくはないが．要するに，「モテるから自由にできた」という話である．\n\n## まとめ\n\n日常生活で偶然と思える出会いには，必ず「誰かの行動」という原因がある．トムとサマーが出会ったのはサマーが入社してきたからだし，トムとオータムが出会ったのはトムが転職活動を行ったからである．したがって，偶然性のあることと言えば「誰と誰が出会うのか」ということである．しかし，この作品は「誰と出会っても起こりうるパターン」を描くことで，本人たちの成長が必然に満ちたものであることを感じさせるようになっている．\n\n個人的には，できることならトムのような経験はしたくないし，サマーのような女性には近づきたくない．だが，「フィクション」として見るならば非常に勇気づけられ，笑える物語であった．","slug":"500日-のサマー感想","published":1,"updated":"2020-05-16T07:50:24.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cka9cakya0000k0tv0p5fgb7u","content":"<p>例によって，作品に対する個人的な考察を述べてみたいと思う．この作品は時間が行き来するなど，表現技法にも特徴がある．できればそういった点も踏まえて考察したいところなのだが，あいにく僕は表現技法には詳しくない．なので，ストーリーや登場人物に関する率直な感想を述べるにとどめたい．</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>この作品の印象を一言でいうなら，「現実にありふれた物語」である．作品の冒頭にあるように，登場人物が自分や知り合いの誰かに似ていると感じてしまうほど，既視感のあるキャラクターが作られている．</p>\n<p>ただし，念頭に置くべき大前提がある．それは，この作品が「トムの物語」であるということである．<br>物語のシーンは全てトムが見聞きする場面であるし，映像にはトムの心情がよく表現されている．タイトルにある「(500)日」は「トムの体験のうちの500日」という意味なのである．</p>\n<p>何故くどくどとトムの物語であることに言及しているのかというと，いつの間にか「サマーは悪い女かどうか？」ということを考えそうになるからである．むしろ，そのような問題意識を刷り込もうとしている演出がいくつかある．</p>\n<p>例えば，冒頭に原作者のメモとしてナレーションが「クソ女め」と言うシーンが印象に残る．これはサマーのことを言っているわけではない．だが，なんとなく「クソ女っぽい女性が出てくるのだろう」と思わせられ，非常にわざとらしい．他にも，「サマー効果」の話やトムの同僚がサマーの悪口を言うなど，事実と主観を絶妙に混ぜることで，サマーの人間性に興味が惹かれるような動線がひかれているのである．</p>\n<p>そのため，「サマーに振り回されるトム」や「トムから見えるサマーとその裏側」のような視点で見てしまいがちになる．しかしよく考えると，トムとサマーがお互いの価値観に与えた影響は少ない．最後まで，トムは恋愛相手との物語を，サマーは親友との物語をそれぞれ紡いでいるのである．</p>\n<p>したがって，トムとサマーの成長はそれぞれ切り分けて考えることが妥当だと思われる．</p>\n<h2 id=\"トムの成長\"><a href=\"#トムの成長\" class=\"headerlink\" title=\"トムの成長\"></a>トムの成長</h2><p>というわけでトムのほうに目を向けてみると，恋に落ちてから失恋して立ち直るまでと，なんと清々しい成長の軌跡であろうか．</p>\n<p>彼は元々正直者でやさしく，周りからも人望があるように描かれている．ただ少しだけ夢を追う自信がないという，ありふれた若者像である．そんな彼は，サマーとの関係が充実しているときには仕事でも実力を発揮しており，大変健全なマインドを持っている．さらに，失恋のストレスを夢へ向かって努力するパワーに変えることにも成功し，将来を期待させるほど人生を前へと切り開いている．</p>\n<p>トムにとってのサマーは，一人の恋人候補でしかない．興味深いことに，サマーの特性がトムに与えた影響はほぼないのである．例えば，トムがサマーの付き合い方を理解する描写はない．また，ラストシーンで彼は「人々の出会いは運命ではなく偶然であり，それに対する自分の行動こそが重要である」と悟っているが，これは彼が恋愛における自身の在り方を内省して得た結論であり，サマーと共有した時間の中で得たものではない．</p>\n<p>とはいえ，トムの恋人候補の一人にサマーがいたことは，彼にとって災難と言わざるをえない．もしサマーがトムの好意に対して明確に拒否を示していたら，彼はもっと早く先に進めたと思う．無論，恋人となってそのまま結婚していれば，トムにとって最良であったのは間違いない．</p>\n<p>出会いと別れの繰り返しを肯定したいがために，「人としての成長」に着目する話は枚挙にいとまがない．だが，その成長はあくまで副産物であって目的ではない．というか，トムの場合はそうするしかない状況で苦しみながら這い上がったのであり，その成長は100％彼の努力で得たものである．たとえ褒められることはあっても，間違っても「なんだかんだ良い経験になったじゃん」などと言われる筋合いはない．</p>\n<p>もっとも，トムがサマーと出会ってから別れるまでは500日より少ないくらいである．現実にはこれが何年もかけて起きる場合もあることを考えると，1年半程度で済んでいるのは不幸中の幸いだろう．それに，次の恋人を見つけたり再就職したりできるくらいには若い年齢であるということも，悲惨な結末にならない理由の一つだと思う．おそらく数年後には，サマーのような女性はトムの恋人候補からいなくなるだろう．</p>\n<h2 id=\"サマーの成長\"><a href=\"#サマーの成長\" class=\"headerlink\" title=\"サマーの成長\"></a>サマーの成長</h2><p>では，サマーの方はどうかというと，こちらも人が変わったように成長(？)している．彼女は途中まで，カップルのように接しながら友達関係を主張するという，非常識といえる行動をとっている．この時点で，彼女が良いか悪いかで言ったら悪いに決まっているが，その考え方（もちろん本人の主観によって善悪が覆ることはないものの）にはハッとさせられる部分もある．</p>\n<p>彼女は自分が捨てられることに恐怖する一方で，大切なものを捨てることに頓着しないと考えていた．故に，お互いが所有関係のように見える恋愛を拒絶していたのである．つまり，別に相手をとっかえひっかえしたいという願望があったわけではない．サマー効果など，それこそ偶然彼女が持ち合わせている特性にすぎない．</p>\n<p>作中では，彼女は映画を見てこの考えを改め，男性と恋愛関係を築くようになる．一体その映画の何が彼女に影響を与えたのかは（映画の引用によるメタ的な考察は避けるとして）分かりかねる．だが，その映画は彼女が見たいと主張して見たものであり，サマーもまた他でもない彼女自身の行動が彼女を変えたのだということが示唆されている．</p>\n<p>その結果，サマーはトムよりも過去に出会った男性と結婚する．結婚相手がその男性であることについて，彼女は運命であると言っているが，やっていることは立派な取捨選択である．判断基準が直感（とサマーは言っている）である点は置いておくとしても，最終的に彼女はきちんとトムを振っており，その様子から彼女も成長していることが伺える．</p>\n<p>ところで，僕は彼女が行った結婚相手（＝運命の相手）の選び方を，皮肉にも凄く上手であると感じてしまった．</p>\n<p>恋愛は基本的に，出会って付き合って別れたら次である．複数の相手と同時に付き合うことは，誠実さに欠けるため良くないとされる．故に，付き合う順番やタイミングによって最終的に選択することが不可能になってしまう相手も存在する．例えば，「3人付き合ったがやはり1人目がよい」と思った場合，その1人目がすでに他の人と結婚していたらこの選択はできない．</p>\n<p>ところが，サマーの方法であればこの問題を解決できる．サマーは多くの男性たちとの関係を保留にし，後からその中で自分がピンときた一人を選択したのである．周りから見ればカップルにしか見えない関係であるため，男性たちに他の女性は寄り付かないだろう．この方法であれば，彼女は運命の相手をいつでも選ぶことができる．もちろん相手が自分に好意を持っていることが前提だが，サマー効果がある彼女なら誰でも選択できる．実際，サマーは他の男性と付き合っていながらトムと踊っている様子が描写されており，彼に期待を持たせ続けている．</p>\n<p>もちろん，サマーは意図してこの方法を行ったわけではない．そもそも彼女には運命の相手を選ぶつもりがなかったからだ．それを後から覆したのだから，全ての男性から愛想をつかされてもおかしくはないが．要するに，「モテるから自由にできた」という話である．</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>日常生活で偶然と思える出会いには，必ず「誰かの行動」という原因がある．トムとサマーが出会ったのはサマーが入社してきたからだし，トムとオータムが出会ったのはトムが転職活動を行ったからである．したがって，偶然性のあることと言えば「誰と誰が出会うのか」ということである．しかし，この作品は「誰と出会っても起こりうるパターン」を描くことで，本人たちの成長が必然に満ちたものであることを感じさせるようになっている．</p>\n<p>個人的には，できることならトムのような経験はしたくないし，サマーのような女性には近づきたくない．だが，「フィクション」として見るならば非常に勇気づけられ，笑える物語であった．</p>\n","site":{"data":{}},"excerpt":"","more":"<p>例によって，作品に対する個人的な考察を述べてみたいと思う．この作品は時間が行き来するなど，表現技法にも特徴がある．できればそういった点も踏まえて考察したいところなのだが，あいにく僕は表現技法には詳しくない．なので，ストーリーや登場人物に関する率直な感想を述べるにとどめたい．</p>\n<h2 id=\"感想\"><a href=\"#感想\" class=\"headerlink\" title=\"感想\"></a>感想</h2><p>この作品の印象を一言でいうなら，「現実にありふれた物語」である．作品の冒頭にあるように，登場人物が自分や知り合いの誰かに似ていると感じてしまうほど，既視感のあるキャラクターが作られている．</p>\n<p>ただし，念頭に置くべき大前提がある．それは，この作品が「トムの物語」であるということである．<br>物語のシーンは全てトムが見聞きする場面であるし，映像にはトムの心情がよく表現されている．タイトルにある「(500)日」は「トムの体験のうちの500日」という意味なのである．</p>\n<p>何故くどくどとトムの物語であることに言及しているのかというと，いつの間にか「サマーは悪い女かどうか？」ということを考えそうになるからである．むしろ，そのような問題意識を刷り込もうとしている演出がいくつかある．</p>\n<p>例えば，冒頭に原作者のメモとしてナレーションが「クソ女め」と言うシーンが印象に残る．これはサマーのことを言っているわけではない．だが，なんとなく「クソ女っぽい女性が出てくるのだろう」と思わせられ，非常にわざとらしい．他にも，「サマー効果」の話やトムの同僚がサマーの悪口を言うなど，事実と主観を絶妙に混ぜることで，サマーの人間性に興味が惹かれるような動線がひかれているのである．</p>\n<p>そのため，「サマーに振り回されるトム」や「トムから見えるサマーとその裏側」のような視点で見てしまいがちになる．しかしよく考えると，トムとサマーがお互いの価値観に与えた影響は少ない．最後まで，トムは恋愛相手との物語を，サマーは親友との物語をそれぞれ紡いでいるのである．</p>\n<p>したがって，トムとサマーの成長はそれぞれ切り分けて考えることが妥当だと思われる．</p>\n<h2 id=\"トムの成長\"><a href=\"#トムの成長\" class=\"headerlink\" title=\"トムの成長\"></a>トムの成長</h2><p>というわけでトムのほうに目を向けてみると，恋に落ちてから失恋して立ち直るまでと，なんと清々しい成長の軌跡であろうか．</p>\n<p>彼は元々正直者でやさしく，周りからも人望があるように描かれている．ただ少しだけ夢を追う自信がないという，ありふれた若者像である．そんな彼は，サマーとの関係が充実しているときには仕事でも実力を発揮しており，大変健全なマインドを持っている．さらに，失恋のストレスを夢へ向かって努力するパワーに変えることにも成功し，将来を期待させるほど人生を前へと切り開いている．</p>\n<p>トムにとってのサマーは，一人の恋人候補でしかない．興味深いことに，サマーの特性がトムに与えた影響はほぼないのである．例えば，トムがサマーの付き合い方を理解する描写はない．また，ラストシーンで彼は「人々の出会いは運命ではなく偶然であり，それに対する自分の行動こそが重要である」と悟っているが，これは彼が恋愛における自身の在り方を内省して得た結論であり，サマーと共有した時間の中で得たものではない．</p>\n<p>とはいえ，トムの恋人候補の一人にサマーがいたことは，彼にとって災難と言わざるをえない．もしサマーがトムの好意に対して明確に拒否を示していたら，彼はもっと早く先に進めたと思う．無論，恋人となってそのまま結婚していれば，トムにとって最良であったのは間違いない．</p>\n<p>出会いと別れの繰り返しを肯定したいがために，「人としての成長」に着目する話は枚挙にいとまがない．だが，その成長はあくまで副産物であって目的ではない．というか，トムの場合はそうするしかない状況で苦しみながら這い上がったのであり，その成長は100％彼の努力で得たものである．たとえ褒められることはあっても，間違っても「なんだかんだ良い経験になったじゃん」などと言われる筋合いはない．</p>\n<p>もっとも，トムがサマーと出会ってから別れるまでは500日より少ないくらいである．現実にはこれが何年もかけて起きる場合もあることを考えると，1年半程度で済んでいるのは不幸中の幸いだろう．それに，次の恋人を見つけたり再就職したりできるくらいには若い年齢であるということも，悲惨な結末にならない理由の一つだと思う．おそらく数年後には，サマーのような女性はトムの恋人候補からいなくなるだろう．</p>\n<h2 id=\"サマーの成長\"><a href=\"#サマーの成長\" class=\"headerlink\" title=\"サマーの成長\"></a>サマーの成長</h2><p>では，サマーの方はどうかというと，こちらも人が変わったように成長(？)している．彼女は途中まで，カップルのように接しながら友達関係を主張するという，非常識といえる行動をとっている．この時点で，彼女が良いか悪いかで言ったら悪いに決まっているが，その考え方（もちろん本人の主観によって善悪が覆ることはないものの）にはハッとさせられる部分もある．</p>\n<p>彼女は自分が捨てられることに恐怖する一方で，大切なものを捨てることに頓着しないと考えていた．故に，お互いが所有関係のように見える恋愛を拒絶していたのである．つまり，別に相手をとっかえひっかえしたいという願望があったわけではない．サマー効果など，それこそ偶然彼女が持ち合わせている特性にすぎない．</p>\n<p>作中では，彼女は映画を見てこの考えを改め，男性と恋愛関係を築くようになる．一体その映画の何が彼女に影響を与えたのかは（映画の引用によるメタ的な考察は避けるとして）分かりかねる．だが，その映画は彼女が見たいと主張して見たものであり，サマーもまた他でもない彼女自身の行動が彼女を変えたのだということが示唆されている．</p>\n<p>その結果，サマーはトムよりも過去に出会った男性と結婚する．結婚相手がその男性であることについて，彼女は運命であると言っているが，やっていることは立派な取捨選択である．判断基準が直感（とサマーは言っている）である点は置いておくとしても，最終的に彼女はきちんとトムを振っており，その様子から彼女も成長していることが伺える．</p>\n<p>ところで，僕は彼女が行った結婚相手（＝運命の相手）の選び方を，皮肉にも凄く上手であると感じてしまった．</p>\n<p>恋愛は基本的に，出会って付き合って別れたら次である．複数の相手と同時に付き合うことは，誠実さに欠けるため良くないとされる．故に，付き合う順番やタイミングによって最終的に選択することが不可能になってしまう相手も存在する．例えば，「3人付き合ったがやはり1人目がよい」と思った場合，その1人目がすでに他の人と結婚していたらこの選択はできない．</p>\n<p>ところが，サマーの方法であればこの問題を解決できる．サマーは多くの男性たちとの関係を保留にし，後からその中で自分がピンときた一人を選択したのである．周りから見ればカップルにしか見えない関係であるため，男性たちに他の女性は寄り付かないだろう．この方法であれば，彼女は運命の相手をいつでも選ぶことができる．もちろん相手が自分に好意を持っていることが前提だが，サマー効果がある彼女なら誰でも選択できる．実際，サマーは他の男性と付き合っていながらトムと踊っている様子が描写されており，彼に期待を持たせ続けている．</p>\n<p>もちろん，サマーは意図してこの方法を行ったわけではない．そもそも彼女には運命の相手を選ぶつもりがなかったからだ．それを後から覆したのだから，全ての男性から愛想をつかされてもおかしくはないが．要するに，「モテるから自由にできた」という話である．</p>\n<h2 id=\"まとめ\"><a href=\"#まとめ\" class=\"headerlink\" title=\"まとめ\"></a>まとめ</h2><p>日常生活で偶然と思える出会いには，必ず「誰かの行動」という原因がある．トムとサマーが出会ったのはサマーが入社してきたからだし，トムとオータムが出会ったのはトムが転職活動を行ったからである．したがって，偶然性のあることと言えば「誰と誰が出会うのか」ということである．しかし，この作品は「誰と出会っても起こりうるパターン」を描くことで，本人たちの成長が必然に満ちたものであることを感じさせるようになっている．</p>\n<p>個人的には，できることならトムのような経験はしたくないし，サマーのような女性には近づきたくない．だが，「フィクション」として見るならば非常に勇気づけられ，笑える物語であった．</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9zec1rp000avbtvahcedn5y","category_id":"cka0j21650000d7tvb3kjgu3z","_id":"cka0j21670001d7tv4tnffabz"},{"post_id":"ck9zeace20002vbtvfzkq36cs","category_id":"cka0j21650000d7tvb3kjgu3z","_id":"cka0j2uek0002d7tverks9zu6"},{"post_id":"ck9zeajtf0003vbtv408cb6rq","category_id":"cka0j33u30004d7tv4ua66qcp","_id":"cka0j33u30005d7tvdmgg45lk"},{"post_id":"ck9zebsqo0009vbtv36477fo5","category_id":"cka0j4w92000id7tvewl1gjyj","_id":"cka0j4w92000jd7tvdw4fckln"},{"post_id":"ck9zebm1b0008vbtv6s6521gl","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka0j5hv4000nd7tv2kzm1h3u"},{"post_id":"cka60a2g80000nttv3btybvaq","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka60a2gi0005nttvdnvk2asq"},{"post_id":"cka60a2gf0001nttv6cqt1i48","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka60a2gj0007nttv6mlzbwd7"},{"post_id":"cka60a2gh0003nttvdfi3ca8f","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka60a2gj0009nttva3v763b8"},{"post_id":"cka60y8a300002wtv45ni5sh0","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka70nhoc00065qtv63ix89g0"},{"post_id":"ck9ze9y0t0000vbtv659vf9cl","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka70nmhk00075qtvcstog949"},{"post_id":"cka9bak790001xgtv0vr04q3f","category_id":"cka0j3k0d0007d7tva4m0cfuz","_id":"cka9bak7f0003xgtvg7vy858y"},{"post_id":"cka9bcvqc0004xgtvg6rr2tb6","category_id":"cka9bcvqf0005xgtv4p2d3ec5","_id":"cka9bcvqg0006xgtvb0me3eks"},{"post_id":"cka9bcy0q0007xgtve5ir5ry1","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bcy0r0009xgtv6gpohbmv"},{"post_id":"cka9bczmi000axgtv8s3ocd7f","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bczmj000bxgtv77mleihj"},{"post_id":"cka9bd1mi000cxgtvfg7cc50s","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bd1mj000dxgtv4joqanuk"},{"post_id":"cka9bd3gc000exgtv2yvl4c9j","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bd3gd000fxgtv0ivza4xf"},{"post_id":"cka9bd57c000gxgtvdy565kt5","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bd57c000hxgtvbzc03cd5"},{"post_id":"cka9bd9pu000ixgtvfkgrfeem","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bd9pv000jxgtv4j9j27hu"},{"post_id":"cka9bdf1e000kxgtvbrij4zwp","category_id":"cka9bdf1f000lxgtv6eukfq30","_id":"cka9bdf1f000mxgtv7pzk0gxl"},{"post_id":"cka9bdh12000nxgtv3ytbct1c","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bdh13000oxgtvbyj2ceve"},{"post_id":"cka9bdiqm000pxgtv6vu028ny","category_id":"cka9bdf1f000lxgtv6eukfq30","_id":"cka9bdiqn000qxgtvhw6yhotd"},{"post_id":"cka9bdrii000uxgtvfip89fym","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bdrii000vxgtv37j22afu"},{"post_id":"cka9bdyo8000zxgtv6uix56s1","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bdyo90010xgtvhm9q4jmp"},{"post_id":"cka9be3sa0011xgtv5tst7ftw","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9be3sb0012xgtv5vda5x52"},{"post_id":"cka9be5c50013xgtv7tdje6nu","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9be5c60014xgtvhxuh3bvq"},{"post_id":"cka9be77u0015xgtv6d8v33r0","category_id":"cka9be77u0016xgtv1scgdkxe","_id":"cka9be77u0017xgtvebpd1c22"},{"post_id":"cka9be8ra0018xgtv1pjr6y4j","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9be8ra0019xgtvf3q32wi7"},{"post_id":"cka9beaf5001axgtv56dm4293","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9beaf5001bxgtv1ewr8sjc"},{"post_id":"cka9bebv4001cxgtv8imj36b9","category_id":"cka9bcy0r0008xgtv2y1egifm","_id":"cka9bebv5001dxgtvhy4g14e2"},{"post_id":"cka9bedi7001exgtv4i5ndqhw","category_id":"cka9bedi8001fxgtvdra4dbem","_id":"cka9bedi8001gxgtvb0yl5k1u"},{"post_id":"cka9beezc001hxgtv2awqawnr","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9beezc001ixgtvaxtxcbw9"},{"post_id":"cka9begbn001jxgtv9zrd4y36","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9begbo001kxgtvgupef2x9"},{"post_id":"cka9bei8k001lxgtv4jgye86y","category_id":"cka9bei8l001mxgtv04u553pv","_id":"cka9bei8l001nxgtvfox82r9k"},{"post_id":"cka9bekg2001oxgtv2p924kxh","category_id":"cka9bekg3001pxgtv5fkv1xaj","_id":"cka9bekg3001qxgtvh1ie5mfc"},{"post_id":"cka9beluo001rxgtv2ezl9m99","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9belup001sxgtv3l1ob3hk"},{"post_id":"cka9benwt001txgtvb86q1ebe","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9benwu001uxgtv6h8r1crr"},{"post_id":"cka9bepft001vxgtvgbxn8icn","category_id":"cka9bepfv001wxgtv53fhg58z","_id":"cka9bepfv001xxgtvet4f2vz2"},{"post_id":"cka9bev0e001yxgtv8zqudg08","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9bev0g001zxgtv7heg35lw"},{"post_id":"cka9bewqd0020xgtvh3m7bypf","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9bewqe0021xgtvfu8bd017"},{"post_id":"cka9bey7n0022xgtv703xgkb5","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9bey7o0023xgtv7duz2zdc"},{"post_id":"cka9bezuc0024xgtvdmc10tda","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9bezud0025xgtv6fkz9l3w"},{"post_id":"cka9bf2910026xgtv78vbhds4","category_id":"cka9bf2910027xgtv01vd6rmg","_id":"cka9bf2920028xgtvgc4haedn"},{"post_id":"cka9bf3vo0029xgtv6r4xe6bd","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9bf3vp002axgtv65wsgfh7"},{"post_id":"cka9bf5ea002bxgtv0i9k3xxr","category_id":"cka9bf5ea002cxgtvgo4acda1","_id":"cka9bf5eb002dxgtvhlu80s2d"},{"post_id":"cka9bfccp002hxgtv34cagxd6","category_id":"cka614rg200035qtv5yhh3gxv","_id":"cka9bfccq002ixgtvdz9u03uq"},{"post_id":"cka9bgi8w002nxgtv833edjxa","category_id":"cka9bekg3001pxgtv5fkv1xaj","_id":"cka9bgi8y002pxgtv06lf5g0o"},{"post_id":"cka9bgvc0002rxgtvha9g2i69","category_id":"cka9bgvc2002sxgtv0dq20lww","_id":"cka9bgvc4002vxgtv9r315v4e"},{"post_id":"cka9cakya0000k0tv0p5fgb7u","category_id":"cka9cakye0001k0tvasfu6a34","_id":"cka9cakyo0002k0tv157p062p"}],"PostTag":[{"post_id":"ck9zebsqo0009vbtv36477fo5","tag_id":"cka0j7909000pd7tv1hjxa0oc","_id":"cka0j790a000qd7tv41ie3d8e"},{"post_id":"ck9zebm1b0008vbtv6s6521gl","tag_id":"cka0j7l5f000rd7tvemn746rs","_id":"cka0j7l5g000sd7tv9tzc8g43"},{"post_id":"ck9zeajtf0003vbtv408cb6rq","tag_id":"cka0j7uow000td7tv6s86cx9a","_id":"cka0j7uox000ud7tv2tpb5egk"},{"post_id":"ck9zeace20002vbtvfzkq36cs","tag_id":"cka0j85qe000vd7tvce317wp4","_id":"cka0j85qf000wd7tv9oyrbn2v"},{"post_id":"ck9zebm1b0008vbtv6s6521gl","tag_id":"cka0jjib80012d7tv0rvn5yz1","_id":"cka0jjib90013d7tv8ef00k1b"},{"post_id":"ck9zeace20002vbtvfzkq36cs","tag_id":"cka0jjib80012d7tv0rvn5yz1","_id":"cka0jjzn20014d7tv874s0m8d"},{"post_id":"cka60a2g80000nttv3btybvaq","tag_id":"cka0j3sba0009d7tvcflcake6","_id":"cka60a2gh0002nttvhe18gr81"},{"post_id":"cka60a2gf0001nttv6cqt1i48","tag_id":"cka0j3sba0009d7tvcflcake6","_id":"cka60a2gi0004nttv786n9w1h"},{"post_id":"cka60a2gh0003nttvdfi3ca8f","tag_id":"cka0j4gmm000fd7tv58crepz4","_id":"cka60a2gj0006nttv85s84sr4"},{"post_id":"cka60a2gh0003nttvdfi3ca8f","tag_id":"cka0j9diq000zd7tv7wiuh4yt","_id":"cka60a2gj0008nttvfk9ef5z4"},{"post_id":"cka9bak790001xgtv0vr04q3f","tag_id":"cka0j4gmm000fd7tv58crepz4","_id":"cka9bak7f0002xgtvalk4b2wo"},{"post_id":"cka9bgi8w002nxgtv833edjxa","tag_id":"cka9bgi8y002oxgtvbaxn20tf","_id":"cka9bgi8z002qxgtvbl6i1wdi"},{"post_id":"cka9bgvc0002rxgtvha9g2i69","tag_id":"cka9bgvc3002txgtvdrmx52xe","_id":"cka9bgvc3002uxgtv44b7emwr"}],"Tag":[{"name":"Processing","_id":"cka0j3sba0009d7tvcflcake6"},{"name":"C#","_id":"cka0j4gmm000fd7tv58crepz4"},{"name":"はとバスツアー","_id":"cka0j7909000pd7tv1hjxa0oc"},{"name":"はてなスター","_id":"cka0j7l5f000rd7tvemn746rs"},{"name":"タスク管理","_id":"cka0j7uow000td7tv6s86cx9a"},{"name":"GCP","_id":"cka0j85qe000vd7tvce317wp4"},{"name":"C#, Win2D","_id":"cka0j8drt000xd7tvbem58tdq"},{"name":"Win2D","_id":"cka0j9diq000zd7tv7wiuh4yt"},{"name":"WordPress","_id":"cka0jjib80012d7tv0rvn5yz1"},{"name":"日記","_id":"cka614efv00005qtvd5m465qc"},{"name":"ownCloud","_id":"cka9bgi8y002oxgtvbaxn20tf"},{"name":"プログラミング一般","_id":"cka9bgvc3002txgtvdrmx52xe"}]}}